
com_module_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001491c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d0c  08014aec  08014aec  00024aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080177f8  080177f8  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  080177f8  080177f8  000277f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017800  08017800  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017800  08017800  00027800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017804  08017804  00027804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08017808  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015e78  20000080  08017888  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015ef8  08017888  00035ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042bb1  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007fa7  00000000  00000000  00072c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025d0  00000000  00000000  0007ac08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023b8  00000000  00000000  0007d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a345  00000000  00000000  0007f590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002e867  00000000  00000000  000b98d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011c0bd  00000000  00000000  000e813c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002041f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1d0  00000000  00000000  00204274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014ad4 	.word	0x08014ad4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08014ad4 	.word	0x08014ad4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	2000009c 	.word	0x2000009c
 80005e0:	200000f0 	.word	0x200000f0

080005e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 1280);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_FREERTOS_Init+0x30>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f006 fc59 	bl	8006eb8 <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <MX_FREERTOS_Init+0x34>)
 800060a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bdb0      	pop	{r4, r5, r7, pc}
 8000614:	08014af8 	.word	0x08014af8
 8000618:	2000f03c 	.word	0x2000f03c

0800061c <startMainTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000624:	f005 ff82 	bl	800652c <MX_LWIP_Init>
  /* USER CODE BEGIN startMainTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f006 fc91 	bl	8006f50 <osDelay>
 800062e:	e7fb      	b.n	8000628 <startMainTask+0xc>

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08c      	sub	sp, #48	; 0x30
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <MX_GPIO_Init+0x140>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a49      	ldr	r2, [pc, #292]	; (8000770 <MX_GPIO_Init+0x140>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b47      	ldr	r3, [pc, #284]	; (8000770 <MX_GPIO_Init+0x140>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	61bb      	str	r3, [r7, #24]
 800065c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b44      	ldr	r3, [pc, #272]	; (8000770 <MX_GPIO_Init+0x140>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a43      	ldr	r2, [pc, #268]	; (8000770 <MX_GPIO_Init+0x140>)
 8000664:	f043 0320 	orr.w	r3, r3, #32
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b41      	ldr	r3, [pc, #260]	; (8000770 <MX_GPIO_Init+0x140>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0320 	and.w	r3, r3, #32
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <MX_GPIO_Init+0x140>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a3d      	ldr	r2, [pc, #244]	; (8000770 <MX_GPIO_Init+0x140>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <MX_GPIO_Init+0x140>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b38      	ldr	r3, [pc, #224]	; (8000770 <MX_GPIO_Init+0x140>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a37      	ldr	r2, [pc, #220]	; (8000770 <MX_GPIO_Init+0x140>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b35      	ldr	r3, [pc, #212]	; (8000770 <MX_GPIO_Init+0x140>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b32      	ldr	r3, [pc, #200]	; (8000770 <MX_GPIO_Init+0x140>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a31      	ldr	r2, [pc, #196]	; (8000770 <MX_GPIO_Init+0x140>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <MX_GPIO_Init+0x140>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <MX_GPIO_Init+0x140>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <MX_GPIO_Init+0x140>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_GPIO_Init+0x140>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_GPIO_Init+0x140>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <MX_GPIO_Init+0x140>)
 80006dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_GPIO_Init+0x140>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_1_COM_GPIO_Port, RS485_1_COM_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f4:	481f      	ldr	r0, [pc, #124]	; (8000774 <MX_GPIO_Init+0x144>)
 80006f6:	f002 f833 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GSM_LDO_EN_Pin|RS485_2_COM_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f640 0108 	movw	r1, #2056	; 0x808
 8000700:	481d      	ldr	r0, [pc, #116]	; (8000778 <MX_GPIO_Init+0x148>)
 8000702:	f002 f82d 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	481c      	ldr	r0, [pc, #112]	; (800077c <MX_GPIO_Init+0x14c>)
 800070c:	f002 f828 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_1_COM_Pin;
 8000710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_1_COM_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4812      	ldr	r0, [pc, #72]	; (8000774 <MX_GPIO_Init+0x144>)
 800072a:	f001 fe6f 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = GSM_LDO_EN_Pin|RS485_2_COM_Pin;
 800072e:	f640 0308 	movw	r3, #2056	; 0x808
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_GPIO_Init+0x148>)
 8000748:	f001 fe60 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800074c:	2340      	movs	r3, #64	; 0x40
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_GPIO_Init+0x14c>)
 8000764:	f001 fe52 	bl	800240c <HAL_GPIO_Init>

}
 8000768:	bf00      	nop
 800076a:	3730      	adds	r7, #48	; 0x30
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020800 	.word	0x40020800
 8000778:	40020c00 	.word	0x40020c00
 800077c:	40021800 	.word	0x40021800

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fcfd 	bl	8001182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f812 	bl	80007b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f7ff ff50 	bl	8000630 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000790:	f000 f8d4 	bl	800093c <MX_SDMMC1_SD_Init>
  MX_UART7_Init();
 8000794:	f000 fae2 	bl	8000d5c <MX_UART7_Init>
  MX_USART2_UART_Init();
 8000798:	f000 fb10 	bl	8000dbc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800079c:	f000 fb3e 	bl	8000e1c <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a0:	f000 fc4a 	bl	8001038 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80007a4:	f7ff ff1e 	bl	80005e4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80007a8:	f006 fb6f 	bl	8006e8a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <main+0x2c>
	...

080007b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0b4      	sub	sp, #208	; 0xd0
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f013 fa60 	bl	8013c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2284      	movs	r2, #132	; 0x84
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f013 fa51 	bl	8013c84 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b46      	ldr	r3, [pc, #280]	; (80008fc <_Z18SystemClock_Configv+0x14c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a45      	ldr	r2, [pc, #276]	; (80008fc <_Z18SystemClock_Configv+0x14c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b43      	ldr	r3, [pc, #268]	; (80008fc <_Z18SystemClock_Configv+0x14c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007fa:	4b41      	ldr	r3, [pc, #260]	; (8000900 <_Z18SystemClock_Configv+0x150>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000802:	4a3f      	ldr	r2, [pc, #252]	; (8000900 <_Z18SystemClock_Configv+0x150>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <_Z18SystemClock_Configv+0x150>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000816:	2303      	movs	r3, #3
 8000818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082a:	2310      	movs	r3, #16
 800082c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 800083e:	230f      	movs	r3, #15
 8000840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000844:	2390      	movs	r3, #144	; 0x90
 8000846:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000850:	2305      	movs	r3, #5
 8000852:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800085a:	4618      	mov	r0, r3
 800085c:	f002 f8e2 	bl	8002a24 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8000870:	f000 f85c 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800088a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000896:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800089a:	2103      	movs	r1, #3
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fb65 	bl	8002f6c <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf14      	ite	ne
 80008a8:	2301      	movne	r3, #1
 80008aa:	2300      	moveq	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <_Z18SystemClock_Configv+0x106>
  {
    Error_Handler();
 80008b2:	f000 f83b 	bl	800092c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART6
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <_Z18SystemClock_Configv+0x154>)
 80008b8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80008ba:	2308      	movs	r3, #8
 80008bc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_HSI;
 80008be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008c2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_SYSCLK;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fd4a 	bl	8003374 <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	bf14      	ite	ne
 80008e6:	2301      	movne	r3, #1
 80008e8:	2300      	moveq	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <_Z18SystemClock_Configv+0x144>
  {
    Error_Handler();
 80008f0:	f000 f81c 	bl	800092c <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	37d0      	adds	r7, #208	; 0xd0
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000
 8000904:	00a01880 	.word	0x00a01880

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 fc3f 	bl	800119c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010000 	.word	0x40010000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 8000942:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_SDMMC1_SD_Init+0x5c>)
 8000944:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800096a:	480a      	ldr	r0, [pc, #40]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 800096c:	f003 f8f0 	bl	8003b50 <HAL_SD_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000976:	f7ff ffd9 	bl	800092c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800097a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_SDMMC1_SD_Init+0x58>)
 8000980:	f003 fb22 	bl	8003fc8 <HAL_SD_ConfigWideBusOperation>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800098a:	f7ff ffcf 	bl	800092c <Error_Handler>
  }

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000f040 	.word	0x2000f040
 8000998:	40012c00 	.word	0x40012c00

0800099c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <HAL_SD_MspInit+0xb4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d144      	bne.n	8000a48 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80009be:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_SD_MspInit+0xb8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000a06:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a18:	230c      	movs	r3, #12
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <HAL_SD_MspInit+0xbc>)
 8000a24:	f001 fcf2 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <HAL_SD_MspInit+0xc0>)
 8000a44:	f001 fce2 	bl	800240c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40012c00 	.word	0x40012c00
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210f      	movs	r1, #15
 8000a9a:	f06f 0001 	mvn.w	r0, #1
 8000a9e:	f000 fc77 	bl	8001390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	2019      	movs	r0, #25
 8000ac6:	f000 fc63 	bl	8001390 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000aca:	2019      	movs	r0, #25
 8000acc:	f000 fc7c 	bl	80013c8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_InitTick+0xa0>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_InitTick+0xa0>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6453      	str	r3, [r2, #68]	; 0x44
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_InitTick+0xa0>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fc0c 	bl	8003310 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000af8:	f002 fbf6 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 8000afc:	4603      	mov	r3, r0
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <HAL_InitTick+0xa4>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	0c9b      	lsrs	r3, r3, #18
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_InitTick+0xa8>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <HAL_InitTick+0xac>)
 8000b14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_InitTick+0xa8>)
 8000b18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_InitTick+0xa8>)
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b22:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_InitTick+0xa8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_InitTick+0xa8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <HAL_InitTick+0xa8>)
 8000b32:	f003 fd81 	bl	8004638 <HAL_TIM_Base_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d104      	bne.n	8000b46 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <HAL_InitTick+0xa8>)
 8000b3e:	f003 fdb1 	bl	80046a4 <HAL_TIM_Base_Start_IT>
 8000b42:	4603      	mov	r3, r0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3730      	adds	r7, #48	; 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	431bde83 	.word	0x431bde83
 8000b58:	2000f0c4 	.word	0x2000f0c4
 8000b5c:	40010000 	.word	0x40010000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b9a:	f003 fdad 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000f0c4 	.word	0x2000f0c4

08000ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART2_IRQHandler+0x10>)
 8000bae:	f003 fff7 	bl	8004ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000f204 	.word	0x2000f204

08000bbc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <ETH_IRQHandler+0x10>)
 8000bc2:	f001 f815 	bl	8001bf0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20010fa4 	.word	0x20010fa4

08000bd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART6_IRQHandler+0x10>)
 8000bd6:	f003 ffe3 	bl	8004ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000f184 	.word	0x2000f184

08000be4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <UART7_IRQHandler+0x10>)
 8000bea:	f003 ffd9 	bl	8004ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000f104 	.word	0x2000f104

08000bf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
	}

return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e009      	b.n	8000c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf1      	blt.n	8000c44 <_write+0x12>
	}
	return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
	return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <_sbrk+0x50>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x16>
		heap_end = &end;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <_sbrk+0x50>)
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <_sbrk+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <_sbrk+0x50>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <_sbrk+0x50>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	466a      	mov	r2, sp
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d905      	bls.n	8000d0a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <_sbrk+0x58>)
 8000d00:	220c      	movs	r2, #12
 8000d02:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	e006      	b.n	8000d18 <_sbrk+0x44>
	}

	heap_end += incr;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <_sbrk+0x50>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <_sbrk+0x50>)
 8000d14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	200002f0 	.word	0x200002f0
 8000d28:	20015ef8 	.word	0x20015ef8
 8000d2c:	20015ef0 	.word	0x20015ef0

08000d30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <SystemInit+0x28>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <SystemInit+0x28>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SystemInit+0x28>)
 8000d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <MX_UART7_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <MX_UART7_Init+0x5c>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_UART7_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_UART7_Init+0x58>)
 8000da0:	f003 feb0 	bl	8004b04 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000daa:	f7ff fdbf 	bl	800092c <Error_Handler>
  }

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000f104 	.word	0x2000f104
 8000db8:	40007800 	.word	0x40007800

08000dbc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <MX_USART2_UART_Init+0x5c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 300;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000e00:	f003 fe80 	bl	8004b04 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f7ff fd8f 	bl	800092c <Error_Handler>
  }

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000f204 	.word	0x2000f204
 8000e18:	40004400 	.word	0x40004400

08000e1c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <MX_USART6_UART_Init+0x5c>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_USART6_UART_Init+0x58>)
 8000e60:	f003 fe50 	bl	8004b04 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000e6a:	f7ff fd5f 	bl	800092c <Error_Handler>
  }

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000f184 	.word	0x2000f184
 8000e78:	40011400 	.word	0x40011400

08000e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a5f      	ldr	r2, [pc, #380]	; (8001018 <HAL_UART_MspInit+0x19c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d130      	bne.n	8000f00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000e9e:	4b5f      	ldr	r3, [pc, #380]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a5e      	ldr	r2, [pc, #376]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b5c      	ldr	r3, [pc, #368]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb6:	4b59      	ldr	r3, [pc, #356]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a58      	ldr	r2, [pc, #352]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b56      	ldr	r3, [pc, #344]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = RS485_1_RX_Pin|RS485_1_TX_Pin;
 8000ece:	23c0      	movs	r3, #192	; 0xc0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	484d      	ldr	r0, [pc, #308]	; (8001020 <HAL_UART_MspInit+0x1a4>)
 8000eea:	f001 fa8f 	bl	800240c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	2052      	movs	r0, #82	; 0x52
 8000ef4:	f000 fa4c 	bl	8001390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000ef8:	2052      	movs	r0, #82	; 0x52
 8000efa:	f000 fa65 	bl	80013c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000efe:	e086      	b.n	800100e <HAL_UART_MspInit+0x192>
  else if(uartHandle->Instance==USART2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a47      	ldr	r2, [pc, #284]	; (8001024 <HAL_UART_MspInit+0x1a8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d14c      	bne.n	8000fa4 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0a:	4b44      	ldr	r3, [pc, #272]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a43      	ldr	r2, [pc, #268]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b41      	ldr	r3, [pc, #260]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b3e      	ldr	r3, [pc, #248]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a3d      	ldr	r2, [pc, #244]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a37      	ldr	r2, [pc, #220]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b35      	ldr	r3, [pc, #212]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RS485_2_RX_Pin;
 8000f52:	2308      	movs	r3, #8
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f62:	2307      	movs	r3, #7
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_2_RX_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	482e      	ldr	r0, [pc, #184]	; (8001028 <HAL_UART_MspInit+0x1ac>)
 8000f6e:	f001 fa4d 	bl	800240c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_2_TX_Pin;
 8000f72:	2320      	movs	r3, #32
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f82:	2307      	movs	r3, #7
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_2_TX_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4827      	ldr	r0, [pc, #156]	; (800102c <HAL_UART_MspInit+0x1b0>)
 8000f8e:	f001 fa3d 	bl	800240c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2105      	movs	r1, #5
 8000f96:	2026      	movs	r0, #38	; 0x26
 8000f98:	f000 f9fa 	bl	8001390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f9c:	2026      	movs	r0, #38	; 0x26
 8000f9e:	f000 fa13 	bl	80013c8 <HAL_NVIC_EnableIRQ>
}
 8000fa2:	e034      	b.n	800100e <HAL_UART_MspInit+0x192>
  else if(uartHandle->Instance==USART6)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <HAL_UART_MspInit+0x1b4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12f      	bne.n	800100e <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_UART_MspInit+0x1a0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 8000fde:	23c0      	movs	r3, #192	; 0xc0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480e      	ldr	r0, [pc, #56]	; (8001034 <HAL_UART_MspInit+0x1b8>)
 8000ffa:	f001 fa07 	bl	800240c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	2047      	movs	r0, #71	; 0x47
 8001004:	f000 f9c4 	bl	8001390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001008:	2047      	movs	r0, #71	; 0x47
 800100a:	f000 f9dd 	bl	80013c8 <HAL_NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3738      	adds	r7, #56	; 0x38
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40007800 	.word	0x40007800
 800101c:	40023800 	.word	0x40023800
 8001020:	40021400 	.word	0x40021400
 8001024:	40004400 	.word	0x40004400
 8001028:	40020000 	.word	0x40020000
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40011400 	.word	0x40011400
 8001034:	40020800 	.word	0x40020800

08001038 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001042:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001046:	2206      	movs	r2, #6
 8001048:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104c:	2202      	movs	r2, #2
 800104e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001058:	2202      	movs	r2, #2
 800105a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107c:	f001 fb89 	bl	8002792 <HAL_PCD_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001086:	f7ff fc51 	bl	800092c <Error_Handler>
  }

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000f284 	.word	0x2000f284

08001094 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b4:	d134      	bne.n	8001120 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_PCD_MspInit+0x94>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_PCD_MspInit+0x94>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_PCD_MspInit+0x94>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010e0:	230a      	movs	r3, #10
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <HAL_PCD_MspInit+0x98>)
 80010ec:	f001 f98e 	bl	800240c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_PCD_MspInit+0x94>)
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_PCD_MspInit+0x94>)
 80010f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fa:	6353      	str	r3, [r2, #52]	; 0x34
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_PCD_MspInit+0x94>)
 80010fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_PCD_MspInit+0x94>)
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_PCD_MspInit+0x94>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6453      	str	r3, [r2, #68]	; 0x44
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_PCD_MspInit+0x94>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001134:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001136:	e003      	b.n	8001140 <LoopCopyDataInit>

08001138 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800113a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800113c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800113e:	3104      	adds	r1, #4

08001140 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001144:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001146:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001148:	d3f6      	bcc.n	8001138 <CopyDataInit>
  ldr  r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800114c:	e002      	b.n	8001154 <LoopFillZerobss>

0800114e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800114e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001150:	f842 3b04 	str.w	r3, [r2], #4

08001154 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001156:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001158:	d3f9      	bcc.n	800114e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115a:	f7ff fde9 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f012 fd53 	bl	8013c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fb0d 	bl	8000780 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800116c:	08017808 	.word	0x08017808
  ldr  r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001174:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001178:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800117c:	20015ef8 	.word	0x20015ef8

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>

08001182 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 f8f7 	bl	800137a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fc8f 	bl	8000ab0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001192:	f7ff fc65 	bl	8000a60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	2000f688 	.word	0x2000f688

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000f688 	.word	0x2000f688

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_Delay+0x40>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000008 	.word	0x20000008

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	4313      	orrs	r3, r2
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	05fa0000 	.word	0x05fa0000

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff4c 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a2:	f7ff ff61 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	6978      	ldr	r0, [r7, #20]
 80013ae:	f7ff ffb1 	bl	8001314 <NVIC_EncodePriority>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff80 	bl	80012c0 <__NVIC_SetPriority>
}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff54 	bl	8001284 <__NVIC_EnableIRQ>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d004      	beq.n	8001402 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00c      	b.n	800141c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2205      	movs	r2, #5
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0201 	bic.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001438:	4ba9      	ldr	r3, [pc, #676]	; (80016e0 <HAL_ETH_Init+0x2b8>)
 800143a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e183      	b.n	8001756 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f005 f990 	bl	8006788 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <HAL_ETH_Init+0x2bc>)
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	4a9d      	ldr	r2, [pc, #628]	; (80016e4 <HAL_ETH_Init+0x2bc>)
 800146e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001472:	6453      	str	r3, [r2, #68]	; 0x44
 8001474:	4b9b      	ldr	r3, [pc, #620]	; (80016e4 <HAL_ETH_Init+0x2bc>)
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001480:	4b99      	ldr	r3, [pc, #612]	; (80016e8 <HAL_ETH_Init+0x2c0>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a98      	ldr	r2, [pc, #608]	; (80016e8 <HAL_ETH_Init+0x2c0>)
 8001486:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800148a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800148c:	4b96      	ldr	r3, [pc, #600]	; (80016e8 <HAL_ETH_Init+0x2c0>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4994      	ldr	r1, [pc, #592]	; (80016e8 <HAL_ETH_Init+0x2c0>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014b2:	f7ff fe87 	bl	80011c4 <HAL_GetTick>
 80014b6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014b8:	e011      	b.n	80014de <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014ba:	f7ff fe83 	bl	80011c4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014c8:	d909      	bls.n	80014de <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e13b      	b.n	8001756 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e4      	bne.n	80014ba <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f023 031c 	bic.w	r3, r3, #28
 80014fe:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001500:	f001 fed2 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 8001504:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4a78      	ldr	r2, [pc, #480]	; (80016ec <HAL_ETH_Init+0x2c4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d908      	bls.n	8001520 <HAL_ETH_Init+0xf8>
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4a77      	ldr	r2, [pc, #476]	; (80016f0 <HAL_ETH_Init+0x2c8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d804      	bhi.n	8001520 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e027      	b.n	8001570 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	4a73      	ldr	r2, [pc, #460]	; (80016f0 <HAL_ETH_Init+0x2c8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d908      	bls.n	800153a <HAL_ETH_Init+0x112>
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	4a72      	ldr	r2, [pc, #456]	; (80016f4 <HAL_ETH_Init+0x2cc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d804      	bhi.n	800153a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f043 030c 	orr.w	r3, r3, #12
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	e01a      	b.n	8001570 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4a6d      	ldr	r2, [pc, #436]	; (80016f4 <HAL_ETH_Init+0x2cc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d903      	bls.n	800154a <HAL_ETH_Init+0x122>
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4a6c      	ldr	r2, [pc, #432]	; (80016f8 <HAL_ETH_Init+0x2d0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d911      	bls.n	800156e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4a6a      	ldr	r2, [pc, #424]	; (80016f8 <HAL_ETH_Init+0x2d0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d908      	bls.n	8001564 <HAL_ETH_Init+0x13c>
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4a69      	ldr	r2, [pc, #420]	; (80016fc <HAL_ETH_Init+0x2d4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d804      	bhi.n	8001564 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e005      	b.n	8001570 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	e000      	b.n	8001570 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800156e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001578:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800157c:	2100      	movs	r1, #0
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fc19 	bl	8001db6 <HAL_ETH_WritePHYRegister>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800158e:	6939      	ldr	r1, [r7, #16]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fca5 	bl	8001ee0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0d9      	b.n	8001756 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80015a2:	20ff      	movs	r0, #255	; 0xff
 80015a4:	f7ff fe1a 	bl	80011dc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80a7 	beq.w	8001700 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015b2:	f7ff fe07 	bl	80011c4 <HAL_GetTick>
 80015b6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	461a      	mov	r2, r3
 80015be:	2101      	movs	r1, #1
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fb90 	bl	8001ce6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015c6:	f7ff fdfd 	bl	80011c4 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d90f      	bls.n	80015f8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015dc:	6939      	ldr	r1, [r7, #16]
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fc7e 	bl	8001ee0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0ae      	b.n	8001756 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0da      	beq.n	80015b8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fbd4 	bl	8001db6 <HAL_ETH_WritePHYRegister>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00b      	beq.n	800162c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001618:	6939      	ldr	r1, [r7, #16]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fc60 	bl	8001ee0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001628:	2301      	movs	r3, #1
 800162a:	e094      	b.n	8001756 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800162c:	f7ff fdca 	bl	80011c4 <HAL_GetTick>
 8001630:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	461a      	mov	r2, r3
 8001638:	2101      	movs	r1, #1
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fb53 	bl	8001ce6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001640:	f7ff fdc0 	bl	80011c4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	; 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d90f      	bls.n	8001672 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001656:	6939      	ldr	r1, [r7, #16]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fc41 	bl	8001ee0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e071      	b.n	8001756 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0da      	beq.n	8001632 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	461a      	mov	r2, r3
 8001682:	211f      	movs	r1, #31
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fb2e 	bl	8001ce6 <HAL_ETH_ReadPHYRegister>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fc22 	bl	8001ee0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016a4:	2301      	movs	r3, #1
 80016a6:	e056      	b.n	8001756 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	e002      	b.n	80016c2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	e037      	b.n	8001744 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	e032      	b.n	8001744 <HAL_ETH_Init+0x31c>
 80016de:	bf00      	nop
 80016e0:	03938700 	.word	0x03938700
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	01312cff 	.word	0x01312cff
 80016f0:	02160ebf 	.word	0x02160ebf
 80016f4:	039386ff 	.word	0x039386ff
 80016f8:	05f5e0ff 	.word	0x05f5e0ff
 80016fc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001710:	4313      	orrs	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fb4c 	bl	8001db6 <HAL_ETH_WritePHYRegister>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fbd8 	bl	8001ee0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e00c      	b.n	8001756 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800173c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001740:	f7ff fd4c 	bl	80011dc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fbca 	bl	8001ee0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop

08001760 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ETH_DMATxDescListInit+0x20>
 800177c:	2302      	movs	r3, #2
 800177e:	e052      	b.n	8001826 <HAL_ETH_DMATxDescListInit+0xc6>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e030      	b.n	80017fe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	015b      	lsls	r3, r3, #5
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	4413      	add	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017ac:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d105      	bne.n	80017d6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d208      	bcs.n	80017f2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	015b      	lsls	r3, r3, #5
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4413      	add	r3, r2
 80017ea:	461a      	mov	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	e002      	b.n	80017f8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d3ca      	bcc.n	800179c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6819      	ldr	r1, [r3, #0]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001810:	440b      	add	r3, r1
 8001812:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	371c      	adds	r7, #28
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ETH_DMARxDescListInit+0x20>
 800184e:	2302      	movs	r3, #2
 8001850:	e056      	b.n	8001900 <HAL_ETH_DMARxDescListInit+0xce>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2202      	movs	r2, #2
 800185e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e034      	b.n	80018d8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	4413      	add	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800187e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001886:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	461a      	mov	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d208      	bcs.n	80018cc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3301      	adds	r3, #1
 80018be:	015b      	lsls	r3, r3, #5
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	4413      	add	r3, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	e002      	b.n	80018d2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3c6      	bcc.n	800186e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80018ea:	440b      	add	r3, r1
 80018ec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_ETH_TransmitFrame+0x24>
 800192c:	2302      	movs	r3, #2
 800192e:	e0cd      	b.n	8001acc <HAL_ETH_TransmitFrame+0x1c0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001956:	2301      	movs	r3, #1
 8001958:	e0b8      	b.n	8001acc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da09      	bge.n	8001978 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2212      	movs	r2, #18
 8001968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0a9      	b.n	8001acc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800197e:	4293      	cmp	r3, r2
 8001980:	d915      	bls.n	80019ae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	4a54      	ldr	r2, [pc, #336]	; (8001ad8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001992:	fba3 1302 	umull	r1, r3, r3, r2
 8001996:	0a9b      	lsrs	r3, r3, #10
 8001998:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e001      	b.n	80019b2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d11c      	bne.n	80019f2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019c6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019d2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019e2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80019f0:	e04b      	b.n	8001a8a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	e044      	b.n	8001a82 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a06:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a1c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a26:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d116      	bne.n	8001a60 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a40:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4a25      	ldr	r2, [pc, #148]	; (8001adc <HAL_ETH_TransmitFrame+0x1d0>)
 8001a46:	fb02 f203 	mul.w	r2, r2, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a52:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a5e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a6e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d3b6      	bcc.n	80019f8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a92:	4413      	add	r3, r2
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00d      	beq.n	8001aba <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	ac02b00b 	.word	0xac02b00b
 8001adc:	fffffa0c 	.word	0xfffffa0c

08001ae0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e074      	b.n	8001be4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b0a:	e05a      	b.n	8001bc2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b20:	d10d      	bne.n	8001b3e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b3c:	e041      	b.n	8001bc2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10b      	bne.n	8001b64 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
 8001b62:	e02e      	b.n	8001bc2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d103      	bne.n	8001b86 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b92:	1f1a      	subs	r2, r3, #4
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e010      	b.n	8001be4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db02      	blt.n	8001bd2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d99c      	bls.n	8001b0c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c00:	4413      	add	r3, r2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c08:	2b40      	cmp	r3, #64	; 0x40
 8001c0a:	d112      	bne.n	8001c32 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f004 fe7b 	bl	8006908 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c1a:	4413      	add	r3, r2
 8001c1c:	2240      	movs	r2, #64	; 0x40
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c30:	e01b      	b.n	8001c6a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c3a:	4413      	add	r3, r2
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d111      	bne.n	8001c6a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f839 	bl	8001cbe <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c54:	4413      	add	r3, r2
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c72:	4413      	add	r3, r2
 8001c74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c78:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c82:	4413      	add	r3, r2
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c8e:	d112      	bne.n	8001cb6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f81e 	bl	8001cd2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ca4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b82      	cmp	r3, #130	; 0x82
 8001d06:	d101      	bne.n	8001d0c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e050      	b.n	8001dae <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2282      	movs	r2, #130	; 0x82
 8001d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 031c 	and.w	r3, r3, #28
 8001d22:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8a1b      	ldrh	r3, [r3, #16]
 8001d28:	02db      	lsls	r3, r3, #11
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d32:	897b      	ldrh	r3, [r7, #10]
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f023 0302 	bic.w	r3, r3, #2
 8001d46:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d58:	f7ff fa34 	bl	80011c4 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5e:	e015      	b.n	8001d8c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d60:	f7ff fa30 	bl	80011c4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6e:	d309      	bcc.n	8001d84 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e014      	b.n	8001dae <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e4      	bne.n	8001d60 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b42      	cmp	r3, #66	; 0x42
 8001dd6:	d101      	bne.n	8001ddc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e04e      	b.n	8001e7a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2242      	movs	r2, #66	; 0x42
 8001de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 031c 	and.w	r3, r3, #28
 8001df2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8a1b      	ldrh	r3, [r3, #16]
 8001df8:	02db      	lsls	r3, r3, #11
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	019b      	lsls	r3, r3, #6
 8001e06:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e32:	f7ff f9c7 	bl	80011c4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e38:	e015      	b.n	8001e66 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e3a:	f7ff f9c3 	bl	80011c4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d309      	bcc.n	8001e5e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e00d      	b.n	8001e7a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e4      	bne.n	8001e3a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ETH_Start+0x16>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e01f      	b.n	8001ed8 <HAL_ETH_Start+0x56>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fa1b 	bl	80022e4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fa35 	bl	800231e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fa7f 	bl	80023b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fa4c 	bl	8002358 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fa61 	bl	8002388 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0b0      	sub	sp, #192	; 0xc0
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001efc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f04:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f2c:	e001      	b.n	8001f32 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f36:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f4c:	2340      	movs	r3, #64	; 0x40
 8001f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001fb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb8:	4bab      	ldr	r3, [pc, #684]	; (8002268 <ETH_MACDMAConfig+0x388>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fc4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fc8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fcc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fd2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fd6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fda:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fe0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001fe4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001fe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001fe8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fec:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ff0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001ff4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ff6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002008:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002014:	2001      	movs	r0, #1
 8002016:	f7ff f8e1 	bl	80011dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002022:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002024:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002028:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800202a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800202c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800202e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002032:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002038:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800203a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800203e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002044:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002048:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002050:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002052:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800205e:	2001      	movs	r0, #1
 8002060:	f7ff f8bc 	bl	80011dc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800206c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002076:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002080:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800208c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002090:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002094:	4013      	ands	r3, r2
 8002096:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800209a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800209e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020a4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020aa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020b0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020b6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80020b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020bc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff f87d 	bl	80011dc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ea:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020ec:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002106:	2001      	movs	r0, #1
 8002108:	f7ff f868 	bl	80011dc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002114:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800211a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002124:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002128:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800213a:	2304      	movs	r3, #4
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800213e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800214a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800214e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002154:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800215a:	2300      	movs	r3, #0
 800215c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800215e:	2300      	movs	r3, #0
 8002160:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	f241 0318 	movw	r3, #4120	; 0x1018
 800216a:	4413      	add	r3, r2
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002172:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <ETH_MACDMAConfig+0x38c>)
 8002178:	4013      	ands	r3, r2
 800217a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800217e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002180:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002182:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002184:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002186:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002188:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800218a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800218c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800218e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002190:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002192:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002194:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002196:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800219a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800219e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80021b2:	4413      	add	r3, r2
 80021b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f241 0318 	movw	r3, #4120	; 0x1018
 80021c2:	4413      	add	r3, r2
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f7ff f806 	bl	80011dc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021d8:	4413      	add	r3, r2
 80021da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021de:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021e4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021e8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021ec:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021f0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80021f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021f6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80021fa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002218:	2001      	movs	r0, #1
 800221a:	f7fe ffdf 	bl	80011dc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002226:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10d      	bne.n	8002250 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	f241 031c 	movw	r3, #4124	; 0x101c
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <ETH_MACDMAConfig+0x390>)
 8002246:	431a      	orrs	r2, r3
 8002248:	f241 031c 	movw	r3, #4124	; 0x101c
 800224c:	440b      	add	r3, r1
 800224e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	461a      	mov	r2, r3
 8002256:	2100      	movs	r1, #0
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f80b 	bl	8002274 <ETH_MACAddressConfig>
}
 800225e:	bf00      	nop
 8002260:	37c0      	adds	r7, #192	; 0xc0
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	ff20810f 	.word	0xff20810f
 800226c:	f8de3f23 	.word	0xf8de3f23
 8002270:	00010040 	.word	0x00010040

08002274 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3305      	adds	r3, #5
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	3204      	adds	r2, #4
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <ETH_MACAddressConfig+0x68>)
 8002296:	4413      	add	r3, r2
 8002298:	461a      	mov	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3303      	adds	r3, #3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	061a      	lsls	r2, r3, #24
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3302      	adds	r3, #2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3301      	adds	r3, #1
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	4313      	orrs	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <ETH_MACAddressConfig+0x6c>)
 80022c6:	4413      	add	r3, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6013      	str	r3, [r2, #0]
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40028040 	.word	0x40028040
 80022e0:	40028044 	.word	0x40028044

080022e4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0208 	orr.w	r2, r2, #8
 80022fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002308:	2001      	movs	r0, #1
 800230a:	f7fe ff67 	bl	80011dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0204 	orr.w	r2, r2, #4
 8002338:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002342:	2001      	movs	r0, #1
 8002344:	f7fe ff4a 	bl	80011dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	f241 0318 	movw	r3, #4120	; 0x1018
 8002368:	4413      	add	r3, r2
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6811      	ldr	r1, [r2, #0]
 8002370:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002374:	f241 0318 	movw	r3, #4120	; 0x1018
 8002378:	440b      	add	r3, r1
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	f241 0318 	movw	r3, #4120	; 0x1018
 8002398:	4413      	add	r3, r2
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6811      	ldr	r1, [r2, #0]
 80023a0:	f043 0202 	orr.w	r2, r3, #2
 80023a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80023a8:	440b      	add	r3, r1
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80023cc:	4413      	add	r3, r2
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6811      	ldr	r1, [r2, #0]
 80023d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80023dc:	440b      	add	r3, r1
 80023de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80023e8:	4413      	add	r3, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7fe fef4 	bl	80011dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80023fe:	440b      	add	r3, r1
 8002400:	601a      	str	r2, [r3, #0]
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e175      	b.n	8002718 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8164 	bne.w	8002712 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d00b      	beq.n	800246a <HAL_GPIO_Init+0x5e>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800245e:	2b11      	cmp	r3, #17
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b12      	cmp	r3, #18
 8002468:	d130      	bne.n	80024cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0201 	and.w	r2, r3, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x100>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b12      	cmp	r3, #18
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80be 	beq.w	8002712 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_GPIO_Init+0x320>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a64      	ldr	r2, [pc, #400]	; (800272c <HAL_GPIO_Init+0x320>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b62      	ldr	r3, [pc, #392]	; (800272c <HAL_GPIO_Init+0x320>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ae:	4a60      	ldr	r2, [pc, #384]	; (8002730 <HAL_GPIO_Init+0x324>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a57      	ldr	r2, [pc, #348]	; (8002734 <HAL_GPIO_Init+0x328>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d037      	beq.n	800264a <HAL_GPIO_Init+0x23e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a56      	ldr	r2, [pc, #344]	; (8002738 <HAL_GPIO_Init+0x32c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d031      	beq.n	8002646 <HAL_GPIO_Init+0x23a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_GPIO_Init+0x330>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d02b      	beq.n	8002642 <HAL_GPIO_Init+0x236>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a54      	ldr	r2, [pc, #336]	; (8002740 <HAL_GPIO_Init+0x334>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_Init+0x232>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a53      	ldr	r2, [pc, #332]	; (8002744 <HAL_GPIO_Init+0x338>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_Init+0x22e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_GPIO_Init+0x33c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x22a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a51      	ldr	r2, [pc, #324]	; (800274c <HAL_GPIO_Init+0x340>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x226>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a50      	ldr	r2, [pc, #320]	; (8002750 <HAL_GPIO_Init+0x344>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x222>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_GPIO_Init+0x348>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x21e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_GPIO_Init+0x34c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x21a>
 8002622:	2309      	movs	r3, #9
 8002624:	e012      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002626:	230a      	movs	r3, #10
 8002628:	e010      	b.n	800264c <HAL_GPIO_Init+0x240>
 800262a:	2308      	movs	r3, #8
 800262c:	e00e      	b.n	800264c <HAL_GPIO_Init+0x240>
 800262e:	2307      	movs	r3, #7
 8002630:	e00c      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002632:	2306      	movs	r3, #6
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x240>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x240>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x240>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x240>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800265c:	4934      	ldr	r1, [pc, #208]	; (8002730 <HAL_GPIO_Init+0x324>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800266a:	4b3c      	ldr	r3, [pc, #240]	; (800275c <HAL_GPIO_Init+0x350>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800268e:	4a33      	ldr	r2, [pc, #204]	; (800275c <HAL_GPIO_Init+0x350>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_GPIO_Init+0x350>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b8:	4a28      	ldr	r2, [pc, #160]	; (800275c <HAL_GPIO_Init+0x350>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <HAL_GPIO_Init+0x350>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_GPIO_Init+0x350>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_GPIO_Init+0x350>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <HAL_GPIO_Init+0x350>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f ae86 	bls.w	800242c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	3724      	adds	r7, #36	; 0x24
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40023800 	.word	0x40023800
 8002730:	40013800 	.word	0x40013800
 8002734:	40020000 	.word	0x40020000
 8002738:	40020400 	.word	0x40020400
 800273c:	40020800 	.word	0x40020800
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40021000 	.word	0x40021000
 8002748:	40021400 	.word	0x40021400
 800274c:	40021800 	.word	0x40021800
 8002750:	40021c00 	.word	0x40021c00
 8002754:	40022000 	.word	0x40022000
 8002758:	40022400 	.word	0x40022400
 800275c:	40013c00 	.word	0x40013c00

08002760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
 800276c:	4613      	mov	r3, r2
 800276e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800277c:	e003      	b.n	8002786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	041a      	lsls	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002794:	b08f      	sub	sp, #60	; 0x3c
 8002796:	af0a      	add	r7, sp, #40	; 0x28
 8002798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e116      	b.n	80029d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fc68 	bl	8001094 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2203      	movs	r2, #3
 80027c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fc4a 	bl	800607c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	687e      	ldr	r6, [r7, #4]
 80027f0:	466d      	mov	r5, sp
 80027f2:	f106 0410 	add.w	r4, r6, #16
 80027f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002802:	e885 0003 	stmia.w	r5, {r0, r1}
 8002806:	1d33      	adds	r3, r6, #4
 8002808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800280a:	6838      	ldr	r0, [r7, #0]
 800280c:	f003 fbde 	bl	8005fcc <USB_CoreInit>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0d7      	b.n	80029d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f003 fc38 	bl	800609e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e04a      	b.n	80028ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	333d      	adds	r3, #61	; 0x3d
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	333c      	adds	r3, #60	; 0x3c
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	b298      	uxth	r0, r3
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3342      	adds	r3, #66	; 0x42
 8002870:	4602      	mov	r2, r0
 8002872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	333f      	adds	r3, #63	; 0x3f
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3344      	adds	r3, #68	; 0x44
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3348      	adds	r3, #72	; 0x48
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3350      	adds	r3, #80	; 0x50
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3301      	adds	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3af      	bcc.n	8002834 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e044      	b.n	8002964 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3301      	adds	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d3b5      	bcc.n	80028da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	687e      	ldr	r6, [r7, #4]
 8002976:	466d      	mov	r5, sp
 8002978:	f106 0410 	add.w	r4, r6, #16
 800297c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002984:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002988:	e885 0003 	stmia.w	r5, {r0, r1}
 800298c:	1d33      	adds	r3, r6, #4
 800298e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002990:	6838      	ldr	r0, [r7, #0]
 8002992:	f003 fbaf 	bl	80060f4 <USB_DevInit>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e014      	b.n	80029d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f80b 	bl	80029dc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fd61 	bl	8006492 <USB_DevDisconnect>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080029dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	10000003 	.word	0x10000003

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e291      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8087 	beq.w	8002b56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a48:	4b96      	ldr	r3, [pc, #600]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d00c      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a54:	4b93      	ldr	r3, [pc, #588]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d112      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62>
 8002a60:	4b90      	ldr	r3, [pc, #576]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6c:	d10b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6e:	4b8d      	ldr	r3, [pc, #564]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d06c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x130>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d168      	bne.n	8002b54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e26b      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x7a>
 8002a90:	4b84      	ldr	r3, [pc, #528]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a83      	ldr	r2, [pc, #524]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e02e      	b.n	8002afc <HAL_RCC_OscConfig+0xd8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x9c>
 8002aa6:	4b7f      	ldr	r3, [pc, #508]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7e      	ldr	r2, [pc, #504]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b7c      	ldr	r3, [pc, #496]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a7b      	ldr	r2, [pc, #492]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xd8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xc0>
 8002aca:	4b76      	ldr	r3, [pc, #472]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a75      	ldr	r2, [pc, #468]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a72      	ldr	r2, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xd8>
 8002ae4:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b6c      	ldr	r3, [pc, #432]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6b      	ldr	r2, [pc, #428]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fb5e 	bl	80011c4 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fb5a 	bl	80011c4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e21f      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xe8>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fb4a 	bl	80011c4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe fb46 	bl	80011c4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e20b      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x110>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d069      	beq.n	8002c36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b62:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x190>
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x17a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1df      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	493d      	ldr	r1, [pc, #244]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e040      	b.n	8002c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d023      	beq.n	8002c04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fafc 	bl	80011c4 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe faf8 	bl	80011c4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1bd      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4929      	ldr	r1, [pc, #164]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
 8002c02:	e018      	b.n	8002c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe fad8 	bl	80011c4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c18:	f7fe fad4 	bl	80011c4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e199      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d038      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d019      	beq.n	8002c7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4a:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe fab5 	bl	80011c4 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fab1 	bl	80011c4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e176      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x23a>
 8002c7c:	e01a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <HAL_RCC_OscConfig+0x280>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fa9b 	bl	80011c4 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7fe fa97 	bl	80011c4 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d903      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e15c      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
 8002ca4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	4b91      	ldr	r3, [pc, #580]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ee      	bne.n	8002c92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a4 	beq.w	8002e0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a87      	ldr	r2, [pc, #540]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b85      	ldr	r3, [pc, #532]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cea:	4b82      	ldr	r3, [pc, #520]	; (8002ef4 <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	; (8002ef4 <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7e      	ldr	r2, [pc, #504]	; (8002ef4 <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fa5f 	bl	80011c4 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fe fa5b 	bl	80011c4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	; 0x64
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e120      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1c:	4b75      	ldr	r3, [pc, #468]	; (8002ef4 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x31a>
 8002d30:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a6e      	ldr	r2, [pc, #440]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_OscConfig+0x376>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x33c>
 8002d46:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a69      	ldr	r2, [pc, #420]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a66      	ldr	r2, [pc, #408]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5e:	e01c      	b.n	8002d9a <HAL_RCC_OscConfig+0x376>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x35e>
 8002d68:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a60      	ldr	r2, [pc, #384]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
 8002d74:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	4a5d      	ldr	r2, [pc, #372]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d80:	e00b      	b.n	8002d9a <HAL_RCC_OscConfig+0x376>
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a5a      	ldr	r2, [pc, #360]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	4a57      	ldr	r2, [pc, #348]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d015      	beq.n	8002dce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe fa0f 	bl	80011c4 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fa0b 	bl	80011c4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0ce      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCC_OscConfig+0x386>
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe f9f9 	bl	80011c4 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe f9f5 	bl	80011c4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0b8      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a3b      	ldr	r2, [pc, #236]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a4 	beq.w	8002f5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e14:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d06b      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d149      	bne.n	8002ebc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a30      	ldr	r2, [pc, #192]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe f9c6 	bl	80011c4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe f9c2 	bl	80011c4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e087      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	019b      	lsls	r3, r3, #6
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	3b01      	subs	r3, #1
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f996 	bl	80011c4 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe f992 	bl	80011c4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e057      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x478>
 8002eba:	e04f      	b.n	8002f5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f97c 	bl	80011c4 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe f978 	bl	80011c4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e03d      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4ac>
 8002eee:	e035      	b.n	8002f5c <HAL_RCC_OscConfig+0x538>
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x544>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d028      	beq.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d121      	bne.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800

08002f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0d0      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d910      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b67      	ldr	r3, [pc, #412]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 020f 	bic.w	r2, r3, #15
 8002f9a:	4965      	ldr	r1, [pc, #404]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b63      	ldr	r3, [pc, #396]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0b8      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fcc:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe4:	4b53      	ldr	r3, [pc, #332]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	494d      	ldr	r1, [pc, #308]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d040      	beq.n	8003090 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d115      	bne.n	800304e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e07f      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b41      	ldr	r3, [pc, #260]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e073      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b3d      	ldr	r3, [pc, #244]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06b      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4936      	ldr	r1, [pc, #216]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003060:	f7fe f8b0 	bl	80011c4 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fe f8ac 	bl	80011c4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e053      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b27      	ldr	r3, [pc, #156]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d210      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 020f 	bic.w	r2, r3, #15
 80030a6:	4922      	ldr	r1, [pc, #136]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e032      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4916      	ldr	r1, [pc, #88]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	490e      	ldr	r1, [pc, #56]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030fe:	f000 f821 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003102:	4601      	mov	r1, r0
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x1cc>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	fa21 f303 	lsr.w	r3, r1, r3
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <HAL_RCC_ClockConfig+0x1d0>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1d4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fcc6 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023c00 	.word	0x40023c00
 8003134:	40023800 	.word	0x40023800
 8003138:	0801761c 	.word	0x0801761c
 800313c:	20000000 	.word	0x20000000
 8003140:	20000004 	.word	0x20000004

08003144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	2300      	movs	r3, #0
 8003154:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800315a:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_GetSysClockFreq+0x158>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d007      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x32>
 8003166:	2b08      	cmp	r3, #8
 8003168:	d008      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x38>
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 808d 	bne.w	800328a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003170:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003172:	60bb      	str	r3, [r7, #8]
      break;
 8003174:	e08c      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003176:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003178:	60bb      	str	r3, [r7, #8]
      break;
 800317a:	e089      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800317c:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_GetSysClockFreq+0x158>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003184:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003186:	4b45      	ldr	r3, [pc, #276]	; (800329c <HAL_RCC_GetSysClockFreq+0x158>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d023      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003192:	4b42      	ldr	r3, [pc, #264]	; (800329c <HAL_RCC_GetSysClockFreq+0x158>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	f04f 0400 	mov.w	r4, #0
 800319c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	ea03 0501 	and.w	r5, r3, r1
 80031a8:	ea04 0602 	and.w	r6, r4, r2
 80031ac:	4a3d      	ldr	r2, [pc, #244]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80031ae:	fb02 f106 	mul.w	r1, r2, r6
 80031b2:	2200      	movs	r2, #0
 80031b4:	fb02 f205 	mul.w	r2, r2, r5
 80031b8:	440a      	add	r2, r1
 80031ba:	493a      	ldr	r1, [pc, #232]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80031bc:	fba5 0101 	umull	r0, r1, r5, r1
 80031c0:	1853      	adds	r3, r2, r1
 80031c2:	4619      	mov	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f04f 0400 	mov.w	r4, #0
 80031ca:	461a      	mov	r2, r3
 80031cc:	4623      	mov	r3, r4
 80031ce:	f7fd f86f 	bl	80002b0 <__aeabi_uldivmod>
 80031d2:	4603      	mov	r3, r0
 80031d4:	460c      	mov	r4, r1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e049      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031da:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_RCC_GetSysClockFreq+0x158>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	099b      	lsrs	r3, r3, #6
 80031e0:	f04f 0400 	mov.w	r4, #0
 80031e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	ea03 0501 	and.w	r5, r3, r1
 80031f0:	ea04 0602 	and.w	r6, r4, r2
 80031f4:	4629      	mov	r1, r5
 80031f6:	4632      	mov	r2, r6
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	f04f 0400 	mov.w	r4, #0
 8003200:	0154      	lsls	r4, r2, #5
 8003202:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003206:	014b      	lsls	r3, r1, #5
 8003208:	4619      	mov	r1, r3
 800320a:	4622      	mov	r2, r4
 800320c:	1b49      	subs	r1, r1, r5
 800320e:	eb62 0206 	sbc.w	r2, r2, r6
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f04f 0400 	mov.w	r4, #0
 800321a:	0194      	lsls	r4, r2, #6
 800321c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003220:	018b      	lsls	r3, r1, #6
 8003222:	1a5b      	subs	r3, r3, r1
 8003224:	eb64 0402 	sbc.w	r4, r4, r2
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	00e2      	lsls	r2, r4, #3
 8003232:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003236:	00d9      	lsls	r1, r3, #3
 8003238:	460b      	mov	r3, r1
 800323a:	4614      	mov	r4, r2
 800323c:	195b      	adds	r3, r3, r5
 800323e:	eb44 0406 	adc.w	r4, r4, r6
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	02a2      	lsls	r2, r4, #10
 800324c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003250:	0299      	lsls	r1, r3, #10
 8003252:	460b      	mov	r3, r1
 8003254:	4614      	mov	r4, r2
 8003256:	4618      	mov	r0, r3
 8003258:	4621      	mov	r1, r4
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f04f 0400 	mov.w	r4, #0
 8003260:	461a      	mov	r2, r3
 8003262:	4623      	mov	r3, r4
 8003264:	f7fd f824 	bl	80002b0 <__aeabi_uldivmod>
 8003268:	4603      	mov	r3, r0
 800326a:	460c      	mov	r4, r1
 800326c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_GetSysClockFreq+0x158>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	0c1b      	lsrs	r3, r3, #16
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	3301      	adds	r3, #1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	60bb      	str	r3, [r7, #8]
      break;
 8003288:	e002      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800328c:	60bb      	str	r3, [r7, #8]
      break;
 800328e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003290:	68bb      	ldr	r3, [r7, #8]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	00f42400 	.word	0x00f42400
 80032a4:	017d7840 	.word	0x017d7840

080032a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c4:	f7ff fff0 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032c8:	4601      	mov	r1, r0
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0a9b      	lsrs	r3, r3, #10
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40023800 	.word	0x40023800
 80032e4:	0801762c 	.word	0x0801762c

080032e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032ec:	f7ff ffdc 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032f0:	4601      	mov	r1, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0b5b      	lsrs	r3, r3, #13
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4a03      	ldr	r2, [pc, #12]	; (800330c <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	0801762c 	.word	0x0801762c

08003310 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	220f      	movs	r2, #15
 800331e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0203 	and.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCC_GetClockConfig+0x5c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_RCC_GetClockConfig+0x60>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	601a      	str	r2, [r3, #0]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	40023c00 	.word	0x40023c00

08003374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d012      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800339c:	4b69      	ldr	r3, [pc, #420]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a68      	ldr	r2, [pc, #416]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033a6:	6093      	str	r3, [r2, #8]
 80033a8:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	4964      	ldr	r1, [pc, #400]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ce:	4b5d      	ldr	r3, [pc, #372]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	4959      	ldr	r1, [pc, #356]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ec:	d101      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033ee:	2301      	movs	r3, #1
 80033f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800340a:	4b4e      	ldr	r3, [pc, #312]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003410:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	494a      	ldr	r1, [pc, #296]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003428:	d101      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800342a:	2301      	movs	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 808b 	beq.w	800356e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	4a39      	ldr	r2, [pc, #228]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003462:	6413      	str	r3, [r2, #64]	; 0x40
 8003464:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a34      	ldr	r2, [pc, #208]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347c:	f7fd fea2 	bl	80011c4 <HAL_GetTick>
 8003480:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fd fe9e 	bl	80011c4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e355      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003496:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a2:	4b28      	ldr	r3, [pc, #160]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d035      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d02e      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c0:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a1a      	ldr	r2, [pc, #104]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034e2:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034e8:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d114      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fe66 	bl	80011c4 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	e00a      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd fe62 	bl	80011c4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e317      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0ee      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800352a:	d111      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800353a:	400b      	ands	r3, r1
 800353c:	4901      	ldr	r1, [pc, #4]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
 8003542:	e00b      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003544:	40023800 	.word	0x40023800
 8003548:	40007000 	.word	0x40007000
 800354c:	0ffffcff 	.word	0x0ffffcff
 8003550:	4bb0      	ldr	r3, [pc, #704]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4aaf      	ldr	r2, [pc, #700]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003556:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	4bad      	ldr	r3, [pc, #692]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800355e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	49aa      	ldr	r1, [pc, #680]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800356a:	4313      	orrs	r3, r2
 800356c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800357a:	4ba6      	ldr	r3, [pc, #664]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800357c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003580:	4aa4      	ldr	r2, [pc, #656]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003586:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800358a:	4ba2      	ldr	r3, [pc, #648]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800358c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	499f      	ldr	r1, [pc, #636]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035a8:	4b9a      	ldr	r3, [pc, #616]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b6:	4997      	ldr	r1, [pc, #604]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ca:	4b92      	ldr	r3, [pc, #584]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d8:	498e      	ldr	r1, [pc, #568]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ec:	4b89      	ldr	r3, [pc, #548]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	4986      	ldr	r1, [pc, #536]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800360e:	4b81      	ldr	r3, [pc, #516]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	497d      	ldr	r1, [pc, #500]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003630:	4b78      	ldr	r3, [pc, #480]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f023 0203 	bic.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	4975      	ldr	r1, [pc, #468]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003652:	4b70      	ldr	r3, [pc, #448]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f023 020c 	bic.w	r2, r3, #12
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003660:	496c      	ldr	r1, [pc, #432]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003674:	4b67      	ldr	r3, [pc, #412]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	4964      	ldr	r1, [pc, #400]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003696:	4b5f      	ldr	r3, [pc, #380]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a4:	495b      	ldr	r1, [pc, #364]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036b8:	4b56      	ldr	r3, [pc, #344]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	4953      	ldr	r1, [pc, #332]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036da:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	494a      	ldr	r1, [pc, #296]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036fc:	4b45      	ldr	r3, [pc, #276]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	4942      	ldr	r1, [pc, #264]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800371e:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	4939      	ldr	r1, [pc, #228]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003740:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374e:	4931      	ldr	r1, [pc, #196]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d011      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003762:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003770:	4928      	ldr	r1, [pc, #160]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003780:	d101      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003792:	2301      	movs	r3, #1
 8003794:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b0:	4918      	ldr	r1, [pc, #96]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037c4:	4b13      	ldr	r3, [pc, #76]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d4:	490f      	ldr	r1, [pc, #60]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d005      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ea:	f040 80d8 	bne.w	800399e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a08      	ldr	r2, [pc, #32]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fa:	f7fd fce3 	bl	80011c4 <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003802:	f7fd fcdf 	bl	80011c4 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b64      	cmp	r3, #100	; 0x64
 800380e:	d903      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e196      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003814:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003818:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ee      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d021      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d11d      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003838:	4b64      	ldr	r3, [pc, #400]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800383a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003846:	4b61      	ldr	r3, [pc, #388]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	019a      	lsls	r2, r3, #6
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	431a      	orrs	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	071b      	lsls	r3, r3, #28
 800386c:	4957      	ldr	r1, [pc, #348]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02e      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389e:	d129      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038a0:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038ae:	4b47      	ldr	r3, [pc, #284]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b4:	0f1b      	lsrs	r3, r3, #28
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	019a      	lsls	r2, r3, #6
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	431a      	orrs	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	071b      	lsls	r3, r3, #28
 80038d4:	493d      	ldr	r1, [pc, #244]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e2:	f023 021f 	bic.w	r2, r3, #31
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	3b01      	subs	r3, #1
 80038ec:	4937      	ldr	r1, [pc, #220]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01d      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003900:	4b32      	ldr	r3, [pc, #200]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003906:	0e1b      	lsrs	r3, r3, #24
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003914:	0f1b      	lsrs	r3, r3, #28
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	019a      	lsls	r2, r3, #6
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	071b      	lsls	r3, r3, #28
 8003934:	4925      	ldr	r1, [pc, #148]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d011      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	019a      	lsls	r2, r3, #6
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	061b      	lsls	r3, r3, #24
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	071b      	lsls	r3, r3, #28
 8003964:	4919      	ldr	r1, [pc, #100]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a16      	ldr	r2, [pc, #88]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003978:	f7fd fc24 	bl	80011c4 <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003980:	f7fd fc20 	bl	80011c4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0d7      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	f040 80cd 	bne.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a08      	ldr	r2, [pc, #32]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b2:	f7fd fc07 	bl	80011c4 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039ba:	f7fd fc03 	bl	80011c4 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b64      	cmp	r3, #100	; 0x64
 80039c6:	d903      	bls.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0ba      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80039cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039d0:	4b5e      	ldr	r3, [pc, #376]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039dc:	d0ed      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d02e      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d12a      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a06:	4b51      	ldr	r3, [pc, #324]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a14:	4b4d      	ldr	r3, [pc, #308]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	0f1b      	lsrs	r3, r3, #28
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	019a      	lsls	r2, r3, #6
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	061b      	lsls	r3, r3, #24
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	071b      	lsls	r3, r3, #28
 8003a3a:	4944      	ldr	r1, [pc, #272]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a42:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	493d      	ldr	r1, [pc, #244]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d022      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a70:	d11d      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	0e1b      	lsrs	r3, r3, #24
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a80:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	0f1b      	lsrs	r3, r3, #28
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	019a      	lsls	r2, r3, #6
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	071b      	lsls	r3, r3, #28
 8003aa6:	4929      	ldr	r1, [pc, #164]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d028      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	0e1b      	lsrs	r3, r3, #24
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	019a      	lsls	r2, r3, #6
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	071b      	lsls	r3, r3, #28
 8003aee:	4917      	ldr	r1, [pc, #92]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4911      	ldr	r1, [pc, #68]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b18:	f7fd fb54 	bl	80011c4 <HAL_GetTick>
 8003b1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b20:	f7fd fb50 	bl	80011c4 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	; 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e007      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b3e:	d1ef      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800

08003b50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e022      	b.n	8003ba8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fc ff11 	bl	800099c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f814 	bl	8003bb0 <HAL_SD_InitCard>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00a      	b.n	8003ba8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003bb0:	b5b0      	push	{r4, r5, r7, lr}
 8003bb2:	b08e      	sub	sp, #56	; 0x38
 8003bb4:	af04      	add	r7, sp, #16
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003bcc:	2376      	movs	r3, #118	; 0x76
 8003bce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681d      	ldr	r5, [r3, #0]
 8003bd4:	466c      	mov	r4, sp
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be8:	4628      	mov	r0, r5
 8003bea:	f001 fd65 	bl	80056b8 <SDMMC_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e03b      	b.n	8003c78 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 fd88 	bl	800572a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c28:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fb16 	bl	800425c <SD_PowerON>
 8003c30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e013      	b.n	8003c78 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fa35 	bl	80040c0 <SD_InitCard>
 8003c56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	; 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bdb0      	pop	{r4, r5, r7, pc}

08003c80 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c8e:	0f9b      	lsrs	r3, r3, #30
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9a:	0e9b      	lsrs	r3, r3, #26
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cac:	0e1b      	lsrs	r3, r3, #24
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce0:	0d1b      	lsrs	r3, r3, #20
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cfe:	0bdb      	lsrs	r3, r3, #15
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d10:	0b9b      	lsrs	r3, r3, #14
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d22:	0b5b      	lsrs	r3, r3, #13
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d34:	0b1b      	lsrs	r3, r3, #12
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2200      	movs	r2, #0
 8003d46:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d163      	bne.n	8003e18 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d54:	009a      	lsls	r2, r3, #2
 8003d56:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d60:	0f92      	lsrs	r2, r2, #30
 8003d62:	431a      	orrs	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6c:	0edb      	lsrs	r3, r3, #27
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7e:	0e1b      	lsrs	r3, r3, #24
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d90:	0d5b      	lsrs	r3, r3, #21
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	0c9b      	lsrs	r3, r3, #18
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db4:	0bdb      	lsrs	r3, r3, #15
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	7e1b      	ldrb	r3, [r3, #24]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	2201      	movs	r2, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003de2:	fb02 f203 	mul.w	r2, r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	7a1b      	ldrb	r3, [r3, #8]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e04:	0a52      	lsrs	r2, r2, #9
 8003e06:	fb02 f203 	mul.w	r2, r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e14:	661a      	str	r2, [r3, #96]	; 0x60
 8003e16:	e031      	b.n	8003e7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d11d      	bne.n	8003e5c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2e:	0c1b      	lsrs	r3, r3, #16
 8003e30:	431a      	orrs	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	029a      	lsls	r2, r3, #10
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e50:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	661a      	str	r2, [r3, #96]	; 0x60
 8003e5a:	e00f      	b.n	8003e7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a58      	ldr	r2, [pc, #352]	; (8003fc4 <HAL_SD_GetCardCSD+0x344>)
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e09d      	b.n	8003fb8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e80:	0b9b      	lsrs	r3, r3, #14
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e92:	09db      	lsrs	r3, r3, #7
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	0fdb      	lsrs	r3, r3, #31
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	0f5b      	lsrs	r3, r3, #29
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	0e9b      	lsrs	r3, r3, #26
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	0d9b      	lsrs	r3, r3, #22
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	0d5b      	lsrs	r3, r3, #21
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	0bdb      	lsrs	r3, r3, #15
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	0b9b      	lsrs	r3, r3, #14
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	0b5b      	lsrs	r3, r3, #13
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	0b1b      	lsrs	r3, r3, #12
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	004005ff 	.word	0x004005ff

08003fc8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003fc8:	b5b0      	push	{r4, r5, r7, lr}
 8003fca:	b08e      	sub	sp, #56	; 0x38
 8003fcc:	af04      	add	r7, sp, #16
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d02e      	beq.n	8004040 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe8:	d106      	bne.n	8003ff8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff6:	e029      	b.n	800404c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffe:	d10a      	bne.n	8004016 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f9b9 	bl	8004378 <SD_WideBus_Enable>
 8004006:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
 8004014:	e01a      	b.n	800404c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f9f6 	bl	800440e <SD_WideBus_Disable>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
 8004030:	e00c      	b.n	800404c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
 800403e:	e005      	b.n	800404c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e024      	b.n	80040b2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681d      	ldr	r5, [r3, #0]
 800408e:	466c      	mov	r4, sp
 8004090:	f107 0318 	add.w	r3, r7, #24
 8004094:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a2:	4628      	mov	r0, r5
 80040a4:	f001 fb08 	bl	80056b8 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3728      	adds	r7, #40	; 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bdb0      	pop	{r4, r5, r7, pc}
 80040ba:	bf00      	nop
 80040bc:	004005ff 	.word	0x004005ff

080040c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80040c0:	b5b0      	push	{r4, r5, r7, lr}
 80040c2:	b094      	sub	sp, #80	; 0x50
 80040c4:	af04      	add	r7, sp, #16
 80040c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80040c8:	2301      	movs	r3, #1
 80040ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 fb39 	bl	8005748 <SDMMC_GetPowerState>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80040dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80040e0:	e0b7      	b.n	8004252 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d02f      	beq.n	800414a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fcb9 	bl	8005a66 <SDMMC_CmdSendCID>
 80040f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <SD_InitCard+0x40>
    {
      return errorstate;
 80040fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fe:	e0a8      	b.n	8004252 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f001 fb63 	bl	80057d2 <SDMMC_GetResponse>
 800410c:	4602      	mov	r2, r0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2104      	movs	r1, #4
 8004118:	4618      	mov	r0, r3
 800411a:	f001 fb5a 	bl	80057d2 <SDMMC_GetResponse>
 800411e:	4602      	mov	r2, r0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2108      	movs	r1, #8
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fb51 	bl	80057d2 <SDMMC_GetResponse>
 8004130:	4602      	mov	r2, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	210c      	movs	r1, #12
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fb48 	bl	80057d2 <SDMMC_GetResponse>
 8004142:	4602      	mov	r2, r0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	2b03      	cmp	r3, #3
 8004150:	d00d      	beq.n	800416e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f107 020e 	add.w	r2, r7, #14
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f001 fcbf 	bl	8005ae0 <SDMMC_CmdSetRelAdd>
 8004162:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <SD_InitCard+0xae>
    {
      return errorstate;
 800416a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416c:	e071      	b.n	8004252 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	2b03      	cmp	r3, #3
 8004174:	d036      	beq.n	80041e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004176:	89fb      	ldrh	r3, [r7, #14]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f001 fc89 	bl	8005aa2 <SDMMC_CmdSendCSD>
 8004190:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419a:	e05a      	b.n	8004252 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fb15 	bl	80057d2 <SDMMC_GetResponse>
 80041a8:	4602      	mov	r2, r0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2104      	movs	r1, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fb0c 	bl	80057d2 <SDMMC_GetResponse>
 80041ba:	4602      	mov	r2, r0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2108      	movs	r1, #8
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 fb03 	bl	80057d2 <SDMMC_GetResponse>
 80041cc:	4602      	mov	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	210c      	movs	r1, #12
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 fafa 	bl	80057d2 <SDMMC_GetResponse>
 80041de:	4602      	mov	r2, r0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2104      	movs	r1, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 faf1 	bl	80057d2 <SDMMC_GetResponse>
 80041f0:	4603      	mov	r3, r0
 80041f2:	0d1a      	lsrs	r2, r3, #20
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80041f8:	f107 0310 	add.w	r3, r7, #16
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fd3e 	bl	8003c80 <HAL_SD_GetCardCSD>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800420a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800420e:	e020      	b.n	8004252 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6819      	ldr	r1, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	f04f 0400 	mov.w	r4, #0
 800421e:	461a      	mov	r2, r3
 8004220:	4623      	mov	r3, r4
 8004222:	4608      	mov	r0, r1
 8004224:	f001 fb36 	bl	8005894 <SDMMC_CmdSelDesel>
 8004228:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800422a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <SD_InitCard+0x174>
  {
    return errorstate;
 8004230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004232:	e00e      	b.n	8004252 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681d      	ldr	r5, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	466c      	mov	r4, sp
 800423c:	f103 0210 	add.w	r2, r3, #16
 8004240:	ca07      	ldmia	r2, {r0, r1, r2}
 8004242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004246:	3304      	adds	r3, #4
 8004248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800424a:	4628      	mov	r0, r5
 800424c:	f001 fa34 	bl	80056b8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3740      	adds	r7, #64	; 0x40
 8004256:	46bd      	mov	sp, r7
 8004258:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800425c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f001 fb30 	bl	80058da <SDMMC_CmdGoIdleState>
 800427a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	e072      	b.n	800436c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f001 fb43 	bl	8005916 <SDMMC_CmdOperCond>
 8004290:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00d      	beq.n	80042b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fb19 	bl	80058da <SDMMC_CmdGoIdleState>
 80042a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	e05b      	b.n	800436c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d137      	bne.n	8004332 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fb43 	bl	8005954 <SDMMC_CmdAppCommand>
 80042ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d02d      	beq.n	8004332 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042da:	e047      	b.n	800436c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 fb36 	bl	8005954 <SDMMC_CmdAppCommand>
 80042e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	e03b      	b.n	800436c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	491e      	ldr	r1, [pc, #120]	; (8004374 <SD_PowerON+0x118>)
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 fb4c 	bl	8005998 <SDMMC_CmdAppOperCommand>
 8004300:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800430c:	e02e      	b.n	800436c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f001 fa5c 	bl	80057d2 <SDMMC_GetResponse>
 800431a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	0fdb      	lsrs	r3, r3, #31
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <SD_PowerON+0xcc>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <SD_PowerON+0xce>
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]

    count++;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3301      	adds	r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004338:	4293      	cmp	r3, r2
 800433a:	d802      	bhi.n	8004342 <SD_PowerON+0xe6>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0cc      	beq.n	80042dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004348:	4293      	cmp	r3, r2
 800434a:	d902      	bls.n	8004352 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800434c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004350:	e00c      	b.n	800436c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
 8004362:	e002      	b.n	800436a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	c1100000 	.word	0xc1100000

08004378 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f001 fa1f 	bl	80057d2 <SDMMC_GetResponse>
 8004394:	4603      	mov	r3, r0
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800439e:	d102      	bne.n	80043a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80043a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043a4:	e02f      	b.n	8004406 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80043a6:	f107 030c 	add.w	r3, r7, #12
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f879 	bl	80044a4 <SD_FindSCR>
 80043b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	e023      	b.n	8004406 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01c      	beq.n	8004402 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f001 fabd 	bl	8005954 <SDMMC_CmdAppCommand>
 80043da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	e00f      	b.n	8004406 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2102      	movs	r1, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 faf7 	bl	80059e0 <SDMMC_CmdBusWidth>
 80043f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	e003      	b.n	8004406 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80043fe:	2300      	movs	r3, #0
 8004400:	e001      	b.n	8004406 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004402:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2100      	movs	r1, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f001 f9d4 	bl	80057d2 <SDMMC_GetResponse>
 800442a:	4603      	mov	r3, r0
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004434:	d102      	bne.n	800443c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004436:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800443a:	e02f      	b.n	800449c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f82e 	bl	80044a4 <SD_FindSCR>
 8004448:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	e023      	b.n	800449c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01c      	beq.n	8004498 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f001 fa72 	bl	8005954 <SDMMC_CmdAppCommand>
 8004470:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	e00f      	b.n	800449c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f001 faac 	bl	80059e0 <SDMMC_CmdBusWidth>
 8004488:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	e003      	b.n	800449c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004494:	2300      	movs	r3, #0
 8004496:	e001      	b.n	800449c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b08f      	sub	sp, #60	; 0x3c
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044ae:	f7fc fe89 	bl	80011c4 <HAL_GetTick>
 80044b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2108      	movs	r1, #8
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 f9c0 	bl	8005850 <SDMMC_CmdBlockLength>
 80044d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	e0a9      	b.n	8004630 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f001 fa33 	bl	8005954 <SDMMC_CmdAppCommand>
 80044ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	e09a      	b.n	8004630 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004500:	2308      	movs	r3, #8
 8004502:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004504:	2330      	movs	r3, #48	; 0x30
 8004506:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004508:	2302      	movs	r3, #2
 800450a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800450c:	2300      	movs	r3, #0
 800450e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004510:	2301      	movs	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f107 0210 	add.w	r2, r7, #16
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f96a 	bl	80057f8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fa7b 	bl	8005a24 <SDMMC_CmdSendSCR>
 800452e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d022      	beq.n	800457c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	e07a      	b.n	8004630 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	f107 0208 	add.w	r2, r7, #8
 8004554:	18d4      	adds	r4, r2, r3
 8004556:	4608      	mov	r0, r1
 8004558:	f001 f8da 	bl	8005710 <SDMMC_ReadFIFO>
 800455c:	4603      	mov	r3, r0
 800455e:	6023      	str	r3, [r4, #0]
      index++;
 8004560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004562:	3301      	adds	r3, #1
 8004564:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004566:	f7fc fe2d 	bl	80011c4 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d102      	bne.n	800457c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004576:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800457a:	e059      	b.n	8004630 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004582:	f240 432a 	movw	r3, #1066	; 0x42a
 8004586:	4013      	ands	r3, r2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0d6      	beq.n	800453a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2208      	movs	r2, #8
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80045a2:	2308      	movs	r3, #8
 80045a4:	e044      	b.n	8004630 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2202      	movs	r2, #2
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80045bc:	2302      	movs	r3, #2
 80045be:	e037      	b.n	8004630 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2220      	movs	r2, #32
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80045d6:	2320      	movs	r3, #32
 80045d8:	e02a      	b.n	8004630 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f240 523a 	movw	r2, #1338	; 0x53a
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	061a      	lsls	r2, r3, #24
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80045fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	0e1b      	lsrs	r3, r3, #24
 8004600:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	601a      	str	r2, [r3, #0]
    scr++;
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	3304      	adds	r3, #4
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	061a      	lsls	r2, r3, #24
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004618:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004622:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	0e1b      	lsrs	r3, r3, #24
 8004628:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	373c      	adds	r7, #60	; 0x3c
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}

08004638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e01d      	b.n	8004686 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f815 	bl	800468e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f000 f986 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <HAL_TIM_Base_Start_IT+0x50>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d00b      	beq.n	80046e6 <HAL_TIM_Base_Start_IT+0x42>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d4:	d007      	beq.n	80046e6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	00010007 	.word	0x00010007

080046f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f905 	bl	800494a <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8f7 	bl	8004936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f908 	bl	800495e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0204 	mvn.w	r2, #4
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8db 	bl	800494a <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8cd 	bl	8004936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f8de 	bl	800495e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0208 	mvn.w	r2, #8
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8b1 	bl	800494a <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8a3 	bl	8004936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f8b4 	bl	800495e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b10      	cmp	r3, #16
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0210 	mvn.w	r2, #16
 8004820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2208      	movs	r2, #8
 8004826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f887 	bl	800494a <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f879 	bl	8004936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f88a 	bl	800495e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10e      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc f846 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d10e      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f91a 	bl	8004adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d10e      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b80      	cmp	r3, #128	; 0x80
 80048c4:	d107      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f90d 	bl	8004af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d10e      	bne.n	8004902 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f838 	bl	8004972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b20      	cmp	r3, #32
 800490e:	d10e      	bne.n	800492e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0220 	mvn.w	r2, #32
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f8cd 	bl	8004ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d027      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d023      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <TIM_Base_SetConfig+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <TIM_Base_SetConfig+0x130>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <TIM_Base_SetConfig+0x134>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <TIM_Base_SetConfig+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e040      	b.n	8004b98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc f9a8 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2224      	movs	r2, #36	; 0x24
 8004b30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f972 	bl	8004e2c <UART_SetConfig>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e022      	b.n	8004b98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fc10 	bl	8005380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fc97 	bl	80054c4 <UART_CheckIdleState>
 8004b96:	4603      	mov	r3, r0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8100 	beq.w	8004dee <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
      }
      return;
 8004bf6:	e0fa      	b.n	8004dee <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80d5 	beq.w	8004daa <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d105      	bne.n	8004c16 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80ca 	beq.w	8004daa <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00e      	beq.n	8004c3e <HAL_UART_IRQHandler+0x9e>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00e      	beq.n	8004c66 <HAL_UART_IRQHandler+0xc6>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2202      	movs	r2, #2
 8004c58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00e      	beq.n	8004c8e <HAL_UART_IRQHandler+0xee>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c86:	f043 0202 	orr.w	r2, r3, #2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb8:	f043 0208 	orr.w	r2, r3, #8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <HAL_UART_IRQHandler+0x14a>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d07f      	beq.n	8004df2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00c      	beq.n	8004d16 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d004      	beq.n	8004d34 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d031      	beq.n	8004d98 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fc6f 	bl	8005618 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d123      	bne.n	8004d90 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d56:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d64:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <HAL_UART_IRQHandler+0x260>)
 8004d66:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fc fb39 	bl	80013e4 <HAL_DMA_Abort_IT>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d016      	beq.n	8004da6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d82:	4610      	mov	r0, r2
 8004d84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d86:	e00e      	b.n	8004da6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f845 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8e:	e00a      	b.n	8004da6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f841 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d96:	e006      	b.n	8004da6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f83d 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004da4:	e025      	b.n	8004df2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da6:	bf00      	nop
    return;
 8004da8:	e023      	b.n	8004df2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d017      	beq.n	8004df6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
    }
    return;
 8004dce:	e012      	b.n	8004df6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00e      	beq.n	8004df8 <HAL_UART_IRQHandler+0x258>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d009      	beq.n	8004df8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fc4d 	bl	8005684 <UART_EndTransmit_IT>
    return;
 8004dea:	bf00      	nop
 8004dec:	e004      	b.n	8004df8 <HAL_UART_IRQHandler+0x258>
      return;
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <HAL_UART_IRQHandler+0x258>
    return;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <HAL_UART_IRQHandler+0x258>
    return;
 8004df6:	bf00      	nop
  }

}
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	08005659 	.word	0x08005659

08004e04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4bb1      	ldr	r3, [pc, #708]	; (8005120 <UART_SetConfig+0x2f4>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a9f      	ldr	r2, [pc, #636]	; (8005124 <UART_SetConfig+0x2f8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d121      	bne.n	8004ef0 <UART_SetConfig+0xc4>
 8004eac:	4b9e      	ldr	r3, [pc, #632]	; (8005128 <UART_SetConfig+0x2fc>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d816      	bhi.n	8004ee8 <UART_SetConfig+0xbc>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x94>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ed1 	.word	0x08004ed1
 8004ec4:	08004edd 	.word	0x08004edd
 8004ec8:	08004ed7 	.word	0x08004ed7
 8004ecc:	08004ee3 	.word	0x08004ee3
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e151      	b.n	800517a <UART_SetConfig+0x34e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e14e      	b.n	800517a <UART_SetConfig+0x34e>
 8004edc:	2304      	movs	r3, #4
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e14b      	b.n	800517a <UART_SetConfig+0x34e>
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e148      	b.n	800517a <UART_SetConfig+0x34e>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	bf00      	nop
 8004eee:	e144      	b.n	800517a <UART_SetConfig+0x34e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a8d      	ldr	r2, [pc, #564]	; (800512c <UART_SetConfig+0x300>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d134      	bne.n	8004f64 <UART_SetConfig+0x138>
 8004efa:	4b8b      	ldr	r3, [pc, #556]	; (8005128 <UART_SetConfig+0x2fc>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b0c      	cmp	r3, #12
 8004f06:	d829      	bhi.n	8004f5c <UART_SetConfig+0x130>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0xe4>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f45 	.word	0x08004f45
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f5d 	.word	0x08004f5d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f51 	.word	0x08004f51
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08004f5d 	.word	0x08004f5d
 8004f30:	08004f4b 	.word	0x08004f4b
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f5d 	.word	0x08004f5d
 8004f40:	08004f57 	.word	0x08004f57
 8004f44:	2300      	movs	r3, #0
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e117      	b.n	800517a <UART_SetConfig+0x34e>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e114      	b.n	800517a <UART_SetConfig+0x34e>
 8004f50:	2304      	movs	r3, #4
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e111      	b.n	800517a <UART_SetConfig+0x34e>
 8004f56:	2308      	movs	r3, #8
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e10e      	b.n	800517a <UART_SetConfig+0x34e>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	bf00      	nop
 8004f62:	e10a      	b.n	800517a <UART_SetConfig+0x34e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a71      	ldr	r2, [pc, #452]	; (8005130 <UART_SetConfig+0x304>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d120      	bne.n	8004fb0 <UART_SetConfig+0x184>
 8004f6e:	4b6e      	ldr	r3, [pc, #440]	; (8005128 <UART_SetConfig+0x2fc>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d00f      	beq.n	8004f9c <UART_SetConfig+0x170>
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d802      	bhi.n	8004f86 <UART_SetConfig+0x15a>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <UART_SetConfig+0x164>
 8004f84:	e010      	b.n	8004fa8 <UART_SetConfig+0x17c>
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d005      	beq.n	8004f96 <UART_SetConfig+0x16a>
 8004f8a:	2b30      	cmp	r3, #48	; 0x30
 8004f8c:	d009      	beq.n	8004fa2 <UART_SetConfig+0x176>
 8004f8e:	e00b      	b.n	8004fa8 <UART_SetConfig+0x17c>
 8004f90:	2300      	movs	r3, #0
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e0f1      	b.n	800517a <UART_SetConfig+0x34e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e0ee      	b.n	800517a <UART_SetConfig+0x34e>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e0eb      	b.n	800517a <UART_SetConfig+0x34e>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e0e8      	b.n	800517a <UART_SetConfig+0x34e>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	bf00      	nop
 8004fae:	e0e4      	b.n	800517a <UART_SetConfig+0x34e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a5f      	ldr	r2, [pc, #380]	; (8005134 <UART_SetConfig+0x308>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d120      	bne.n	8004ffc <UART_SetConfig+0x1d0>
 8004fba:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <UART_SetConfig+0x2fc>)
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d00f      	beq.n	8004fe8 <UART_SetConfig+0x1bc>
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d802      	bhi.n	8004fd2 <UART_SetConfig+0x1a6>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <UART_SetConfig+0x1b0>
 8004fd0:	e010      	b.n	8004ff4 <UART_SetConfig+0x1c8>
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	d005      	beq.n	8004fe2 <UART_SetConfig+0x1b6>
 8004fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd8:	d009      	beq.n	8004fee <UART_SetConfig+0x1c2>
 8004fda:	e00b      	b.n	8004ff4 <UART_SetConfig+0x1c8>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e0cb      	b.n	800517a <UART_SetConfig+0x34e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e0c8      	b.n	800517a <UART_SetConfig+0x34e>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e0c5      	b.n	800517a <UART_SetConfig+0x34e>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e0c2      	b.n	800517a <UART_SetConfig+0x34e>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	bf00      	nop
 8004ffa:	e0be      	b.n	800517a <UART_SetConfig+0x34e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a4d      	ldr	r2, [pc, #308]	; (8005138 <UART_SetConfig+0x30c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d124      	bne.n	8005050 <UART_SetConfig+0x224>
 8005006:	4b48      	ldr	r3, [pc, #288]	; (8005128 <UART_SetConfig+0x2fc>)
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005014:	d012      	beq.n	800503c <UART_SetConfig+0x210>
 8005016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501a:	d802      	bhi.n	8005022 <UART_SetConfig+0x1f6>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <UART_SetConfig+0x204>
 8005020:	e012      	b.n	8005048 <UART_SetConfig+0x21c>
 8005022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005026:	d006      	beq.n	8005036 <UART_SetConfig+0x20a>
 8005028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502c:	d009      	beq.n	8005042 <UART_SetConfig+0x216>
 800502e:	e00b      	b.n	8005048 <UART_SetConfig+0x21c>
 8005030:	2300      	movs	r3, #0
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e0a1      	b.n	800517a <UART_SetConfig+0x34e>
 8005036:	2302      	movs	r3, #2
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e09e      	b.n	800517a <UART_SetConfig+0x34e>
 800503c:	2304      	movs	r3, #4
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e09b      	b.n	800517a <UART_SetConfig+0x34e>
 8005042:	2308      	movs	r3, #8
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e098      	b.n	800517a <UART_SetConfig+0x34e>
 8005048:	2310      	movs	r3, #16
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	bf00      	nop
 800504e:	e094      	b.n	800517a <UART_SetConfig+0x34e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a39      	ldr	r2, [pc, #228]	; (800513c <UART_SetConfig+0x310>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d124      	bne.n	80050a4 <UART_SetConfig+0x278>
 800505a:	4b33      	ldr	r3, [pc, #204]	; (8005128 <UART_SetConfig+0x2fc>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005068:	d012      	beq.n	8005090 <UART_SetConfig+0x264>
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d802      	bhi.n	8005076 <UART_SetConfig+0x24a>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <UART_SetConfig+0x258>
 8005074:	e012      	b.n	800509c <UART_SetConfig+0x270>
 8005076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507a:	d006      	beq.n	800508a <UART_SetConfig+0x25e>
 800507c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005080:	d009      	beq.n	8005096 <UART_SetConfig+0x26a>
 8005082:	e00b      	b.n	800509c <UART_SetConfig+0x270>
 8005084:	2301      	movs	r3, #1
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e077      	b.n	800517a <UART_SetConfig+0x34e>
 800508a:	2302      	movs	r3, #2
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e074      	b.n	800517a <UART_SetConfig+0x34e>
 8005090:	2304      	movs	r3, #4
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e071      	b.n	800517a <UART_SetConfig+0x34e>
 8005096:	2308      	movs	r3, #8
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e06e      	b.n	800517a <UART_SetConfig+0x34e>
 800509c:	2310      	movs	r3, #16
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	bf00      	nop
 80050a2:	e06a      	b.n	800517a <UART_SetConfig+0x34e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a25      	ldr	r2, [pc, #148]	; (8005140 <UART_SetConfig+0x314>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d124      	bne.n	80050f8 <UART_SetConfig+0x2cc>
 80050ae:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <UART_SetConfig+0x2fc>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050bc:	d012      	beq.n	80050e4 <UART_SetConfig+0x2b8>
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c2:	d802      	bhi.n	80050ca <UART_SetConfig+0x29e>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <UART_SetConfig+0x2ac>
 80050c8:	e012      	b.n	80050f0 <UART_SetConfig+0x2c4>
 80050ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ce:	d006      	beq.n	80050de <UART_SetConfig+0x2b2>
 80050d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050d4:	d009      	beq.n	80050ea <UART_SetConfig+0x2be>
 80050d6:	e00b      	b.n	80050f0 <UART_SetConfig+0x2c4>
 80050d8:	2300      	movs	r3, #0
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e04d      	b.n	800517a <UART_SetConfig+0x34e>
 80050de:	2302      	movs	r3, #2
 80050e0:	77fb      	strb	r3, [r7, #31]
 80050e2:	e04a      	b.n	800517a <UART_SetConfig+0x34e>
 80050e4:	2304      	movs	r3, #4
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e047      	b.n	800517a <UART_SetConfig+0x34e>
 80050ea:	2308      	movs	r3, #8
 80050ec:	77fb      	strb	r3, [r7, #31]
 80050ee:	e044      	b.n	800517a <UART_SetConfig+0x34e>
 80050f0:	2310      	movs	r3, #16
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	bf00      	nop
 80050f6:	e040      	b.n	800517a <UART_SetConfig+0x34e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a11      	ldr	r2, [pc, #68]	; (8005144 <UART_SetConfig+0x318>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d139      	bne.n	8005176 <UART_SetConfig+0x34a>
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <UART_SetConfig+0x2fc>)
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005108:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800510c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005110:	d027      	beq.n	8005162 <UART_SetConfig+0x336>
 8005112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005116:	d817      	bhi.n	8005148 <UART_SetConfig+0x31c>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01c      	beq.n	8005156 <UART_SetConfig+0x32a>
 800511c:	e027      	b.n	800516e <UART_SetConfig+0x342>
 800511e:	bf00      	nop
 8005120:	efff69f3 	.word	0xefff69f3
 8005124:	40011000 	.word	0x40011000
 8005128:	40023800 	.word	0x40023800
 800512c:	40004400 	.word	0x40004400
 8005130:	40004800 	.word	0x40004800
 8005134:	40004c00 	.word	0x40004c00
 8005138:	40005000 	.word	0x40005000
 800513c:	40011400 	.word	0x40011400
 8005140:	40007800 	.word	0x40007800
 8005144:	40007c00 	.word	0x40007c00
 8005148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514c:	d006      	beq.n	800515c <UART_SetConfig+0x330>
 800514e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005152:	d009      	beq.n	8005168 <UART_SetConfig+0x33c>
 8005154:	e00b      	b.n	800516e <UART_SetConfig+0x342>
 8005156:	2300      	movs	r3, #0
 8005158:	77fb      	strb	r3, [r7, #31]
 800515a:	e00e      	b.n	800517a <UART_SetConfig+0x34e>
 800515c:	2302      	movs	r3, #2
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e00b      	b.n	800517a <UART_SetConfig+0x34e>
 8005162:	2304      	movs	r3, #4
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e008      	b.n	800517a <UART_SetConfig+0x34e>
 8005168:	2308      	movs	r3, #8
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e005      	b.n	800517a <UART_SetConfig+0x34e>
 800516e:	2310      	movs	r3, #16
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	bf00      	nop
 8005174:	e001      	b.n	800517a <UART_SetConfig+0x34e>
 8005176:	2310      	movs	r3, #16
 8005178:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005182:	d17f      	bne.n	8005284 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005184:	7ffb      	ldrb	r3, [r7, #31]
 8005186:	2b08      	cmp	r3, #8
 8005188:	d85c      	bhi.n	8005244 <UART_SetConfig+0x418>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x364>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051f5 	.word	0x080051f5
 800519c:	08005245 	.word	0x08005245
 80051a0:	0800520d 	.word	0x0800520d
 80051a4:	08005245 	.word	0x08005245
 80051a8:	08005245 	.word	0x08005245
 80051ac:	08005245 	.word	0x08005245
 80051b0:	0800522d 	.word	0x0800522d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fe f884 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 80051b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	005a      	lsls	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	441a      	add	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	61bb      	str	r3, [r7, #24]
        break;
 80051d2:	e03a      	b.n	800524a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7fe f888 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 80051d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	005a      	lsls	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	61bb      	str	r3, [r7, #24]
        break;
 80051f2:	e02a      	b.n	800524a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	085a      	lsrs	r2, r3, #1
 80051fa:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <UART_SetConfig+0x54c>)
 80051fc:	4413      	add	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6852      	ldr	r2, [r2, #4]
 8005202:	fbb3 f3f2 	udiv	r3, r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	61bb      	str	r3, [r7, #24]
        break;
 800520a:	e01e      	b.n	800524a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520c:	f7fd ff9a 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8005210:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	005a      	lsls	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	b29b      	uxth	r3, r3
 8005228:	61bb      	str	r3, [r7, #24]
        break;
 800522a:	e00e      	b.n	800524a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	b29b      	uxth	r3, r3
 8005240:	61bb      	str	r3, [r7, #24]
        break;
 8005242:	e002      	b.n	800524a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	75fb      	strb	r3, [r7, #23]
        break;
 8005248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b0f      	cmp	r3, #15
 800524e:	d916      	bls.n	800527e <UART_SetConfig+0x452>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005256:	d212      	bcs.n	800527e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f023 030f 	bic.w	r3, r3, #15
 8005260:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	b29a      	uxth	r2, r3
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	4313      	orrs	r3, r2
 8005272:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	897a      	ldrh	r2, [r7, #10]
 800527a:	60da      	str	r2, [r3, #12]
 800527c:	e070      	b.n	8005360 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
 8005282:	e06d      	b.n	8005360 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005284:	7ffb      	ldrb	r3, [r7, #31]
 8005286:	2b08      	cmp	r3, #8
 8005288:	d859      	bhi.n	800533e <UART_SetConfig+0x512>
 800528a:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <UART_SetConfig+0x464>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052d3 	.word	0x080052d3
 8005298:	080052f1 	.word	0x080052f1
 800529c:	0800533f 	.word	0x0800533f
 80052a0:	08005309 	.word	0x08005309
 80052a4:	0800533f 	.word	0x0800533f
 80052a8:	0800533f 	.word	0x0800533f
 80052ac:	0800533f 	.word	0x0800533f
 80052b0:	08005327 	.word	0x08005327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b4:	f7fe f804 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 80052b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	085a      	lsrs	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	441a      	add	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	61bb      	str	r3, [r7, #24]
        break;
 80052d0:	e038      	b.n	8005344 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d2:	f7fe f809 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 80052d6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	085a      	lsrs	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	441a      	add	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	61bb      	str	r3, [r7, #24]
        break;
 80052ee:	e029      	b.n	8005344 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	085a      	lsrs	r2, r3, #1
 80052f6:	4b21      	ldr	r3, [pc, #132]	; (800537c <UART_SetConfig+0x550>)
 80052f8:	4413      	add	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6852      	ldr	r2, [r2, #4]
 80052fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	61bb      	str	r3, [r7, #24]
        break;
 8005306:	e01d      	b.n	8005344 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005308:	f7fd ff1c 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 800530c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	085a      	lsrs	r2, r3, #1
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	441a      	add	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	b29b      	uxth	r3, r3
 8005322:	61bb      	str	r3, [r7, #24]
        break;
 8005324:	e00e      	b.n	8005344 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	b29b      	uxth	r3, r3
 800533a:	61bb      	str	r3, [r7, #24]
        break;
 800533c:	e002      	b.n	8005344 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
        break;
 8005342:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d908      	bls.n	800535c <UART_SetConfig+0x530>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d204      	bcs.n	800535c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	e001      	b.n	8005360 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	01e84800 	.word	0x01e84800
 800537c:	00f42400 	.word	0x00f42400

08005380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01a      	beq.n	8005496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547e:	d10a      	bne.n	8005496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80054d2:	f7fb fe77 	bl	80011c4 <HAL_GetTick>
 80054d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d10e      	bne.n	8005504 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f814 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e00a      	b.n	800551a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005532:	e05d      	b.n	80055f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d059      	beq.n	80055f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553c:	f7fb fe42 	bl	80011c4 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	429a      	cmp	r2, r3
 800554a:	d302      	bcc.n	8005552 <UART_WaitOnFlagUntilTimeout+0x30>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d11b      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005560:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e042      	b.n	8005610 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d02b      	beq.n	80055f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a6:	d123      	bne.n	80055f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e00f      	b.n	8005610 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4013      	ands	r3, r2
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	bf0c      	ite	eq
 8005600:	2301      	moveq	r3, #1
 8005602:	2300      	movne	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	429a      	cmp	r2, r3
 800560c:	d092      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800562e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fbce 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff fbab 	bl	8004e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80056b8:	b084      	sub	sp, #16
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	f107 001c 	add.w	r0, r7, #28
 80056c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80056ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80056d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80056d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80056d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80056da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80056de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80056e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	4b07      	ldr	r3, [pc, #28]	; (800570c <SDMMC_Init+0x54>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	b004      	add	sp, #16
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	ffff8100 	.word	0xffff8100

08005710 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2203      	movs	r2, #3
 8005736:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005738:	2002      	movs	r0, #2
 800573a:	f7fb fd4f 	bl	80011dc <HAL_Delay>
  
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0303 	and.w	r3, r3, #3
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005782:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005788:	431a      	orrs	r2, r3
                       Command->CPSM);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800578e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <SDMMC_SendCommand+0x50>)
 800579c:	4013      	ands	r3, r2
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	fffff000 	.word	0xfffff000

080057b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	b2db      	uxtb	r3, r3
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3314      	adds	r3, #20
 80057e0:	461a      	mov	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
}  
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800581e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005824:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800582a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005842:	2300      	movs	r3, #0

}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800585e:	2310      	movs	r3, #16
 8005860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800586a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005870:	f107 0308 	add.w	r3, r7, #8
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff ff74 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	2110      	movs	r1, #16
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f976 	bl	8005b74 <SDMMC_GetCmdResp1>
 8005888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800588a:	69fb      	ldr	r3, [r7, #28]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	; 0x28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80058a4:	2307      	movs	r3, #7
 80058a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058a8:	2340      	movs	r3, #64	; 0x40
 80058aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058b6:	f107 0310 	add.w	r3, r7, #16
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff ff51 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	2107      	movs	r1, #7
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f953 	bl	8005b74 <SDMMC_GetCmdResp1>
 80058ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3728      	adds	r7, #40	; 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b088      	sub	sp, #32
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80058ea:	2300      	movs	r3, #0
 80058ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ff30 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f90d 	bl	8005b24 <SDMMC_GetCmdError>
 800590a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800590c:	69fb      	ldr	r3, [r7, #28]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b088      	sub	sp, #32
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800591e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005924:	2308      	movs	r3, #8
 8005926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005928:	2340      	movs	r3, #64	; 0x40
 800592a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005934:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005936:	f107 0308 	add.w	r3, r7, #8
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ff11 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 faf6 	bl	8005f34 <SDMMC_GetCmdResp7>
 8005948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800594a:	69fb      	ldr	r3, [r7, #28]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005962:	2337      	movs	r3, #55	; 0x37
 8005964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800596e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005972:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005974:	f107 0308 	add.w	r3, r7, #8
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff fef2 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	2137      	movs	r1, #55	; 0x37
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8f4 	bl	8005b74 <SDMMC_GetCmdResp1>
 800598c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800598e:	69fb      	ldr	r3, [r7, #28]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <SDMMC_CmdAppOperCommand+0x44>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80059aa:	2329      	movs	r3, #41	; 0x29
 80059ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059ae:	2340      	movs	r3, #64	; 0x40
 80059b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fece 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa05 	bl	8005dd8 <SDMMC_GetCmdResp3>
 80059ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059d0:	69fb      	ldr	r3, [r7, #28]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	80100000 	.word	0x80100000

080059e0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80059ee:	2306      	movs	r3, #6
 80059f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a00:	f107 0308 	add.w	r3, r7, #8
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff feac 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	2106      	movs	r1, #6
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8ae 	bl	8005b74 <SDMMC_GetCmdResp1>
 8005a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005a30:	2333      	movs	r3, #51	; 0x33
 8005a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a42:	f107 0308 	add.w	r3, r7, #8
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fe8b 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	2133      	movs	r1, #51	; 0x33
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f88d 	bl	8005b74 <SDMMC_GetCmdResp1>
 8005a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a72:	2302      	movs	r3, #2
 8005a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005a76:	23c0      	movs	r3, #192	; 0xc0
 8005a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a84:	f107 0308 	add.w	r3, r7, #8
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fe6a 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f95b 	bl	8005d4c <SDMMC_GetCmdResp2>
 8005a96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a98:	69fb      	ldr	r3, [r7, #28]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b088      	sub	sp, #32
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005ab0:	2309      	movs	r3, #9
 8005ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005ab4:	23c0      	movs	r3, #192	; 0xc0
 8005ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ac2:	f107 0308 	add.w	r3, r7, #8
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fe4b 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f93c 	bl	8005d4c <SDMMC_GetCmdResp2>
 8005ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005aee:	2303      	movs	r3, #3
 8005af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005af2:	2340      	movs	r3, #64	; 0x40
 8005af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005afe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b00:	f107 0308 	add.w	r3, r7, #8
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fe2c 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	2103      	movs	r1, #3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f99b 	bl	8005e4c <SDMMC_GetCmdResp6>
 8005b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b18:	69fb      	ldr	r3, [r7, #28]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005b24:	b490      	push	{r4, r7}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <SDMMC_GetCmdError+0x48>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <SDMMC_GetCmdError+0x4c>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	0a5b      	lsrs	r3, r3, #9
 8005b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005b40:	4623      	mov	r3, r4
 8005b42:	1e5c      	subs	r4, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b4c:	e009      	b.n	8005b62 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f2      	beq.n	8005b40 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	22c5      	movs	r2, #197	; 0xc5
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc90      	pop	{r4, r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	20000000 	.word	0x20000000
 8005b70:	10624dd3 	.word	0x10624dd3

08005b74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b82:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <SDMMC_GetCmdResp1+0x1cc>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6f      	ldr	r2, [pc, #444]	; (8005d44 <SDMMC_GetCmdResp1+0x1d0>)
 8005b88:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8c:	0a5b      	lsrs	r3, r3, #9
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005b94:	4623      	mov	r3, r4
 8005b96:	1e5c      	subs	r4, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ba0:	e0c9      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <SDMMC_GetCmdResp1+0x20>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1eb      	bne.n	8005b94 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2204      	movs	r2, #4
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bce:	2304      	movs	r3, #4
 8005bd0:	e0b1      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0a6      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	22c5      	movs	r2, #197	; 0xc5
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fde2 	bl	80057b8 <SDMMC_GetCommandResponse>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d001      	beq.n	8005c02 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e099      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005c02:	2100      	movs	r1, #0
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff fde4 	bl	80057d2 <SDMMC_GetResponse>
 8005c0a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4b4e      	ldr	r3, [pc, #312]	; (8005d48 <SDMMC_GetCmdResp1+0x1d4>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e08d      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	da02      	bge.n	8005c26 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005c20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c24:	e087      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005c30:	2340      	movs	r3, #64	; 0x40
 8005c32:	e080      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005c3e:	2380      	movs	r3, #128	; 0x80
 8005c40:	e079      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c50:	e071      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c60:	e069      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c70:	e061      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c80:	e059      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c90:	e051      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ca0:	e049      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cb0:	e041      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc0:	e039      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cd0:	e031      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005cdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ce0:	e029      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005cec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005cf0:	e021      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005cfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d00:	e019      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d10:	e011      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005d1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d20:	e009      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005d2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005d30:	e001      	b.n	8005d36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd90      	pop	{r4, r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000000 	.word	0x20000000
 8005d44:	10624dd3 	.word	0x10624dd3
 8005d48:	fdffe008 	.word	0xfdffe008

08005d4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005d4c:	b490      	push	{r4, r7}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d54:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <SDMMC_GetCmdResp2+0x84>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1e      	ldr	r2, [pc, #120]	; (8005dd4 <SDMMC_GetCmdResp2+0x88>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	0a5b      	lsrs	r3, r3, #9
 8005d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d68:	4623      	mov	r3, r4
 8005d6a:	1e5c      	subs	r4, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d74:	e026      	b.n	8005dc4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <SDMMC_GetCmdResp2+0x1c>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1eb      	bne.n	8005d68 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005da2:	2304      	movs	r3, #4
 8005da4:	e00e      	b.n	8005dc4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e003      	b.n	8005dc4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	22c5      	movs	r2, #197	; 0xc5
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc90      	pop	{r4, r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000000 	.word	0x20000000
 8005dd4:	10624dd3 	.word	0x10624dd3

08005dd8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005dd8:	b490      	push	{r4, r7}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005de0:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <SDMMC_GetCmdResp3+0x6c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <SDMMC_GetCmdResp3+0x70>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	0a5b      	lsrs	r3, r3, #9
 8005dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005df4:	4623      	mov	r3, r4
 8005df6:	1e5c      	subs	r4, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e00:	e01b      	b.n	8005e3a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0f0      	beq.n	8005df4 <SDMMC_GetCmdResp3+0x1c>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1eb      	bne.n	8005df4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e2e:	2304      	movs	r3, #4
 8005e30:	e003      	b.n	8005e3a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	22c5      	movs	r2, #197	; 0xc5
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc90      	pop	{r4, r7}
 8005e42:	4770      	bx	lr
 8005e44:	20000000 	.word	0x20000000
 8005e48:	10624dd3 	.word	0x10624dd3

08005e4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005e4c:	b590      	push	{r4, r7, lr}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	460b      	mov	r3, r1
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e5a:	4b34      	ldr	r3, [pc, #208]	; (8005f2c <SDMMC_GetCmdResp6+0xe0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a34      	ldr	r2, [pc, #208]	; (8005f30 <SDMMC_GetCmdResp6+0xe4>)
 8005e60:	fba2 2303 	umull	r2, r3, r2, r3
 8005e64:	0a5b      	lsrs	r3, r3, #9
 8005e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005e6e:	4623      	mov	r3, r4
 8005e70:	1e5c      	subs	r4, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e7a:	e052      	b.n	8005f22 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <SDMMC_GetCmdResp6+0x22>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1eb      	bne.n	8005e6e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	e03a      	b.n	8005f22 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e02f      	b.n	8005f22 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7ff fc78 	bl	80057b8 <SDMMC_GetCommandResponse>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	7afb      	ldrb	r3, [r7, #11]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d001      	beq.n	8005ed6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e025      	b.n	8005f22 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	22c5      	movs	r2, #197	; 0xc5
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005edc:	2100      	movs	r1, #0
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff fc77 	bl	80057d2 <SDMMC_GetResponse>
 8005ee4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e011      	b.n	8005f22 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f0c:	e009      	b.n	8005f22 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f1c:	e001      	b.n	8005f22 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000000 	.word	0x20000000
 8005f30:	10624dd3 	.word	0x10624dd3

08005f34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005f34:	b490      	push	{r4, r7}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f3c:	4b21      	ldr	r3, [pc, #132]	; (8005fc4 <SDMMC_GetCmdResp7+0x90>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a21      	ldr	r2, [pc, #132]	; (8005fc8 <SDMMC_GetCmdResp7+0x94>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	0a5b      	lsrs	r3, r3, #9
 8005f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005f50:	4623      	mov	r3, r4
 8005f52:	1e5c      	subs	r4, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f5c:	e02c      	b.n	8005fb8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f62:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <SDMMC_GetCmdResp7+0x1c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1eb      	bne.n	8005f50 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d004      	beq.n	8005f8e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2204      	movs	r2, #4
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f8a:	2304      	movs	r3, #4
 8005f8c:	e014      	b.n	8005fb8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e009      	b.n	8005fb8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2240      	movs	r2, #64	; 0x40
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fb6:	2300      	movs	r3, #0
  
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc90      	pop	{r4, r7}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000000 	.word	0x20000000
 8005fc8:	10624dd3 	.word	0x10624dd3

08005fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 001c 	add.w	r0, r7, #28
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d120      	bne.n	8006026 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	4b20      	ldr	r3, [pc, #128]	; (8006078 <USB_CoreInit+0xac>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d105      	bne.n	800601a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa52 	bl	80064c4 <USB_CoreReset>
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]
 8006024:	e010      	b.n	8006048 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fa46 	bl	80064c4 <USB_CoreReset>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	2b01      	cmp	r3, #1
 800604c:	d10b      	bne.n	8006066 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f043 0206 	orr.w	r2, r3, #6
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f043 0220 	orr.w	r2, r3, #32
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006072:	b004      	add	sp, #16
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	ffbdffbf 	.word	0xffbdffbf

0800607c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f023 0201 	bic.w	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d106      	bne.n	80060ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	60da      	str	r2, [r3, #12]
 80060c8:	e00b      	b.n	80060e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60da      	str	r2, [r3, #12]
 80060dc:	e001      	b.n	80060e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e003      	b.n	80060ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80060e2:	2032      	movs	r0, #50	; 0x32
 80060e4:	f7fb f87a 	bl	80011dc <HAL_Delay>

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060f4:	b084      	sub	sp, #16
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	e009      	b.n	8006128 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3340      	adds	r3, #64	; 0x40
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3301      	adds	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b0e      	cmp	r3, #14
 800612c:	d9f2      	bls.n	8006114 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11c      	bne.n	800616e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006142:	f043 0302 	orr.w	r3, r3, #2
 8006146:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e005      	b.n	800617a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	4619      	mov	r1, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	461a      	mov	r2, r3
 8006196:	680b      	ldr	r3, [r1, #0]
 8006198:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10c      	bne.n	80061ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061a6:	2100      	movs	r1, #0
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f959 	bl	8006460 <USB_SetDevSpeed>
 80061ae:	e018      	b.n	80061e2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061b0:	2101      	movs	r1, #1
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f954 	bl	8006460 <USB_SetDevSpeed>
 80061b8:	e013      	b.n	80061e2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d10c      	bne.n	80061da <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061c6:	2100      	movs	r1, #0
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f949 	bl	8006460 <USB_SetDevSpeed>
 80061ce:	e008      	b.n	80061e2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061d0:	2101      	movs	r1, #1
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f944 	bl	8006460 <USB_SetDevSpeed>
 80061d8:	e003      	b.n	80061e2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061da:	2103      	movs	r1, #3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f93f 	bl	8006460 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061e2:	2110      	movs	r1, #16
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f8f3 	bl	80063d0 <USB_FlushTxFifo>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f911 	bl	800641c <USB_FlushRxFifo>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	461a      	mov	r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	461a      	mov	r2, r3
 8006218:	2300      	movs	r3, #0
 800621a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	461a      	mov	r2, r3
 8006224:	2300      	movs	r3, #0
 8006226:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	e043      	b.n	80062b6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006244:	d118      	bne.n	8006278 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	461a      	mov	r2, r3
 800625a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	e013      	b.n	800628a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626e:	461a      	mov	r2, r3
 8006270:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e008      	b.n	800628a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006284:	461a      	mov	r2, r3
 8006286:	2300      	movs	r3, #0
 8006288:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006296:	461a      	mov	r2, r3
 8006298:	2300      	movs	r3, #0
 800629a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	461a      	mov	r2, r3
 80062aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	3301      	adds	r3, #1
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3b7      	bcc.n	800622e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e043      	b.n	800634c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062da:	d118      	bne.n	800630e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	461a      	mov	r2, r3
 80062f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	e013      	b.n	8006320 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006304:	461a      	mov	r2, r3
 8006306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e008      	b.n	8006320 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	461a      	mov	r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	461a      	mov	r2, r3
 800632e:	2300      	movs	r3, #0
 8006330:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	461a      	mov	r2, r3
 8006340:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006344:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3301      	adds	r3, #1
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	429a      	cmp	r2, r3
 8006352:	d3b7      	bcc.n	80062c4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006366:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006374:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f043 0210 	orr.w	r2, r3, #16
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <USB_DevInit+0x2d4>)
 800638e:	4313      	orrs	r3, r2
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f043 0208 	orr.w	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d105      	bne.n	80063b8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <USB_DevInit+0x2d8>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063c4:	b004      	add	sp, #16
 80063c6:	4770      	bx	lr
 80063c8:	803c3800 	.word	0x803c3800
 80063cc:	40000004 	.word	0x40000004

080063d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	019b      	lsls	r3, r3, #6
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a09      	ldr	r2, [pc, #36]	; (8006418 <USB_FlushTxFifo+0x48>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d901      	bls.n	80063fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e006      	b.n	800640a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b20      	cmp	r3, #32
 8006406:	d0f0      	beq.n	80063ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	00030d40 	.word	0x00030d40

0800641c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2210      	movs	r2, #16
 800642c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4a09      	ldr	r2, [pc, #36]	; (800645c <USB_FlushRxFifo+0x40>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d901      	bls.n	8006440 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e006      	b.n	800644e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d0f0      	beq.n	800642e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	00030d40 	.word	0x00030d40

08006460 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	68f9      	ldr	r1, [r7, #12]
 800647c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006480:	4313      	orrs	r3, r2
 8006482:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ac:	f043 0302 	orr.w	r3, r3, #2
 80064b0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80064b2:	2003      	movs	r0, #3
 80064b4:	f7fa fe92 	bl	80011dc <HAL_Delay>

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a13      	ldr	r2, [pc, #76]	; (8006528 <USB_CoreReset+0x64>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e01b      	b.n	800651a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	daf2      	bge.n	80064d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f043 0201 	orr.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a09      	ldr	r2, [pc, #36]	; (8006528 <USB_CoreReset+0x64>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d901      	bls.n	800650c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e006      	b.n	800651a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b01      	cmp	r3, #1
 8006516:	d0f0      	beq.n	80064fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	00030d40 	.word	0x00030d40

0800652c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006532:	4b8c      	ldr	r3, [pc, #560]	; (8006764 <MX_LWIP_Init+0x238>)
 8006534:	22c0      	movs	r2, #192	; 0xc0
 8006536:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006538:	4b8a      	ldr	r3, [pc, #552]	; (8006764 <MX_LWIP_Init+0x238>)
 800653a:	22a8      	movs	r2, #168	; 0xa8
 800653c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 800653e:	4b89      	ldr	r3, [pc, #548]	; (8006764 <MX_LWIP_Init+0x238>)
 8006540:	2207      	movs	r2, #7
 8006542:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8006544:	4b87      	ldr	r3, [pc, #540]	; (8006764 <MX_LWIP_Init+0x238>)
 8006546:	2202      	movs	r2, #2
 8006548:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800654a:	4b87      	ldr	r3, [pc, #540]	; (8006768 <MX_LWIP_Init+0x23c>)
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006550:	4b85      	ldr	r3, [pc, #532]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006552:	22ff      	movs	r2, #255	; 0xff
 8006554:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006556:	4b84      	ldr	r3, [pc, #528]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006558:	22ff      	movs	r2, #255	; 0xff
 800655a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800655c:	4b82      	ldr	r3, [pc, #520]	; (8006768 <MX_LWIP_Init+0x23c>)
 800655e:	2200      	movs	r2, #0
 8006560:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006562:	4b82      	ldr	r3, [pc, #520]	; (800676c <MX_LWIP_Init+0x240>)
 8006564:	22c0      	movs	r2, #192	; 0xc0
 8006566:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006568:	4b80      	ldr	r3, [pc, #512]	; (800676c <MX_LWIP_Init+0x240>)
 800656a:	22a8      	movs	r2, #168	; 0xa8
 800656c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 7;
 800656e:	4b7f      	ldr	r3, [pc, #508]	; (800676c <MX_LWIP_Init+0x240>)
 8006570:	2207      	movs	r2, #7
 8006572:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006574:	4b7d      	ldr	r3, [pc, #500]	; (800676c <MX_LWIP_Init+0x240>)
 8006576:	2201      	movs	r2, #1
 8006578:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800657a:	2100      	movs	r1, #0
 800657c:	2000      	movs	r0, #0
 800657e:	f003 fcd1 	bl	8009f24 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006582:	4b78      	ldr	r3, [pc, #480]	; (8006764 <MX_LWIP_Init+0x238>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	061a      	lsls	r2, r3, #24
 8006588:	4b76      	ldr	r3, [pc, #472]	; (8006764 <MX_LWIP_Init+0x238>)
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	041b      	lsls	r3, r3, #16
 800658e:	431a      	orrs	r2, r3
 8006590:	4b74      	ldr	r3, [pc, #464]	; (8006764 <MX_LWIP_Init+0x238>)
 8006592:	789b      	ldrb	r3, [r3, #2]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	4313      	orrs	r3, r2
 8006598:	4a72      	ldr	r2, [pc, #456]	; (8006764 <MX_LWIP_Init+0x238>)
 800659a:	78d2      	ldrb	r2, [r2, #3]
 800659c:	4313      	orrs	r3, r2
 800659e:	061a      	lsls	r2, r3, #24
 80065a0:	4b70      	ldr	r3, [pc, #448]	; (8006764 <MX_LWIP_Init+0x238>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	0619      	lsls	r1, r3, #24
 80065a6:	4b6f      	ldr	r3, [pc, #444]	; (8006764 <MX_LWIP_Init+0x238>)
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	041b      	lsls	r3, r3, #16
 80065ac:	4319      	orrs	r1, r3
 80065ae:	4b6d      	ldr	r3, [pc, #436]	; (8006764 <MX_LWIP_Init+0x238>)
 80065b0:	789b      	ldrb	r3, [r3, #2]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	430b      	orrs	r3, r1
 80065b6:	496b      	ldr	r1, [pc, #428]	; (8006764 <MX_LWIP_Init+0x238>)
 80065b8:	78c9      	ldrb	r1, [r1, #3]
 80065ba:	430b      	orrs	r3, r1
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065c2:	431a      	orrs	r2, r3
 80065c4:	4b67      	ldr	r3, [pc, #412]	; (8006764 <MX_LWIP_Init+0x238>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	0619      	lsls	r1, r3, #24
 80065ca:	4b66      	ldr	r3, [pc, #408]	; (8006764 <MX_LWIP_Init+0x238>)
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	4319      	orrs	r1, r3
 80065d2:	4b64      	ldr	r3, [pc, #400]	; (8006764 <MX_LWIP_Init+0x238>)
 80065d4:	789b      	ldrb	r3, [r3, #2]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	430b      	orrs	r3, r1
 80065da:	4962      	ldr	r1, [pc, #392]	; (8006764 <MX_LWIP_Init+0x238>)
 80065dc:	78c9      	ldrb	r1, [r1, #3]
 80065de:	430b      	orrs	r3, r1
 80065e0:	0a1b      	lsrs	r3, r3, #8
 80065e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80065e6:	431a      	orrs	r2, r3
 80065e8:	4b5e      	ldr	r3, [pc, #376]	; (8006764 <MX_LWIP_Init+0x238>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	0619      	lsls	r1, r3, #24
 80065ee:	4b5d      	ldr	r3, [pc, #372]	; (8006764 <MX_LWIP_Init+0x238>)
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	041b      	lsls	r3, r3, #16
 80065f4:	4319      	orrs	r1, r3
 80065f6:	4b5b      	ldr	r3, [pc, #364]	; (8006764 <MX_LWIP_Init+0x238>)
 80065f8:	789b      	ldrb	r3, [r3, #2]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	430b      	orrs	r3, r1
 80065fe:	4959      	ldr	r1, [pc, #356]	; (8006764 <MX_LWIP_Init+0x238>)
 8006600:	78c9      	ldrb	r1, [r1, #3]
 8006602:	430b      	orrs	r3, r1
 8006604:	0e1b      	lsrs	r3, r3, #24
 8006606:	4313      	orrs	r3, r2
 8006608:	4a59      	ldr	r2, [pc, #356]	; (8006770 <MX_LWIP_Init+0x244>)
 800660a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800660c:	4b56      	ldr	r3, [pc, #344]	; (8006768 <MX_LWIP_Init+0x23c>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	061a      	lsls	r2, r3, #24
 8006612:	4b55      	ldr	r3, [pc, #340]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	041b      	lsls	r3, r3, #16
 8006618:	431a      	orrs	r2, r3
 800661a:	4b53      	ldr	r3, [pc, #332]	; (8006768 <MX_LWIP_Init+0x23c>)
 800661c:	789b      	ldrb	r3, [r3, #2]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	4313      	orrs	r3, r2
 8006622:	4a51      	ldr	r2, [pc, #324]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006624:	78d2      	ldrb	r2, [r2, #3]
 8006626:	4313      	orrs	r3, r2
 8006628:	061a      	lsls	r2, r3, #24
 800662a:	4b4f      	ldr	r3, [pc, #316]	; (8006768 <MX_LWIP_Init+0x23c>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	0619      	lsls	r1, r3, #24
 8006630:	4b4d      	ldr	r3, [pc, #308]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	041b      	lsls	r3, r3, #16
 8006636:	4319      	orrs	r1, r3
 8006638:	4b4b      	ldr	r3, [pc, #300]	; (8006768 <MX_LWIP_Init+0x23c>)
 800663a:	789b      	ldrb	r3, [r3, #2]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	430b      	orrs	r3, r1
 8006640:	4949      	ldr	r1, [pc, #292]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006642:	78c9      	ldrb	r1, [r1, #3]
 8006644:	430b      	orrs	r3, r1
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800664c:	431a      	orrs	r2, r3
 800664e:	4b46      	ldr	r3, [pc, #280]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	0619      	lsls	r1, r3, #24
 8006654:	4b44      	ldr	r3, [pc, #272]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	041b      	lsls	r3, r3, #16
 800665a:	4319      	orrs	r1, r3
 800665c:	4b42      	ldr	r3, [pc, #264]	; (8006768 <MX_LWIP_Init+0x23c>)
 800665e:	789b      	ldrb	r3, [r3, #2]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	430b      	orrs	r3, r1
 8006664:	4940      	ldr	r1, [pc, #256]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006666:	78c9      	ldrb	r1, [r1, #3]
 8006668:	430b      	orrs	r3, r1
 800666a:	0a1b      	lsrs	r3, r3, #8
 800666c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006670:	431a      	orrs	r2, r3
 8006672:	4b3d      	ldr	r3, [pc, #244]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	0619      	lsls	r1, r3, #24
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <MX_LWIP_Init+0x23c>)
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	4319      	orrs	r1, r3
 8006680:	4b39      	ldr	r3, [pc, #228]	; (8006768 <MX_LWIP_Init+0x23c>)
 8006682:	789b      	ldrb	r3, [r3, #2]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	430b      	orrs	r3, r1
 8006688:	4937      	ldr	r1, [pc, #220]	; (8006768 <MX_LWIP_Init+0x23c>)
 800668a:	78c9      	ldrb	r1, [r1, #3]
 800668c:	430b      	orrs	r3, r1
 800668e:	0e1b      	lsrs	r3, r3, #24
 8006690:	4313      	orrs	r3, r2
 8006692:	4a38      	ldr	r2, [pc, #224]	; (8006774 <MX_LWIP_Init+0x248>)
 8006694:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006696:	4b35      	ldr	r3, [pc, #212]	; (800676c <MX_LWIP_Init+0x240>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	061a      	lsls	r2, r3, #24
 800669c:	4b33      	ldr	r3, [pc, #204]	; (800676c <MX_LWIP_Init+0x240>)
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	431a      	orrs	r2, r3
 80066a4:	4b31      	ldr	r3, [pc, #196]	; (800676c <MX_LWIP_Init+0x240>)
 80066a6:	789b      	ldrb	r3, [r3, #2]
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	4313      	orrs	r3, r2
 80066ac:	4a2f      	ldr	r2, [pc, #188]	; (800676c <MX_LWIP_Init+0x240>)
 80066ae:	78d2      	ldrb	r2, [r2, #3]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	061a      	lsls	r2, r3, #24
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <MX_LWIP_Init+0x240>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	0619      	lsls	r1, r3, #24
 80066ba:	4b2c      	ldr	r3, [pc, #176]	; (800676c <MX_LWIP_Init+0x240>)
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	4319      	orrs	r1, r3
 80066c2:	4b2a      	ldr	r3, [pc, #168]	; (800676c <MX_LWIP_Init+0x240>)
 80066c4:	789b      	ldrb	r3, [r3, #2]
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	430b      	orrs	r3, r1
 80066ca:	4928      	ldr	r1, [pc, #160]	; (800676c <MX_LWIP_Init+0x240>)
 80066cc:	78c9      	ldrb	r1, [r1, #3]
 80066ce:	430b      	orrs	r3, r1
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066d6:	431a      	orrs	r2, r3
 80066d8:	4b24      	ldr	r3, [pc, #144]	; (800676c <MX_LWIP_Init+0x240>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	0619      	lsls	r1, r3, #24
 80066de:	4b23      	ldr	r3, [pc, #140]	; (800676c <MX_LWIP_Init+0x240>)
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	4319      	orrs	r1, r3
 80066e6:	4b21      	ldr	r3, [pc, #132]	; (800676c <MX_LWIP_Init+0x240>)
 80066e8:	789b      	ldrb	r3, [r3, #2]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	430b      	orrs	r3, r1
 80066ee:	491f      	ldr	r1, [pc, #124]	; (800676c <MX_LWIP_Init+0x240>)
 80066f0:	78c9      	ldrb	r1, [r1, #3]
 80066f2:	430b      	orrs	r3, r1
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066fa:	431a      	orrs	r2, r3
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <MX_LWIP_Init+0x240>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	0619      	lsls	r1, r3, #24
 8006702:	4b1a      	ldr	r3, [pc, #104]	; (800676c <MX_LWIP_Init+0x240>)
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	4319      	orrs	r1, r3
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <MX_LWIP_Init+0x240>)
 800670c:	789b      	ldrb	r3, [r3, #2]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	430b      	orrs	r3, r1
 8006712:	4916      	ldr	r1, [pc, #88]	; (800676c <MX_LWIP_Init+0x240>)
 8006714:	78c9      	ldrb	r1, [r1, #3]
 8006716:	430b      	orrs	r3, r1
 8006718:	0e1b      	lsrs	r3, r3, #24
 800671a:	4313      	orrs	r3, r2
 800671c:	4a16      	ldr	r2, [pc, #88]	; (8006778 <MX_LWIP_Init+0x24c>)
 800671e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006720:	4b16      	ldr	r3, [pc, #88]	; (800677c <MX_LWIP_Init+0x250>)
 8006722:	9302      	str	r3, [sp, #8]
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <MX_LWIP_Init+0x254>)
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	2300      	movs	r3, #0
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	4b12      	ldr	r3, [pc, #72]	; (8006778 <MX_LWIP_Init+0x24c>)
 800672e:	4a11      	ldr	r2, [pc, #68]	; (8006774 <MX_LWIP_Init+0x248>)
 8006730:	490f      	ldr	r1, [pc, #60]	; (8006770 <MX_LWIP_Init+0x244>)
 8006732:	4814      	ldr	r0, [pc, #80]	; (8006784 <MX_LWIP_Init+0x258>)
 8006734:	f004 f97a 	bl	800aa2c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006738:	4812      	ldr	r0, [pc, #72]	; (8006784 <MX_LWIP_Init+0x258>)
 800673a:	f004 fb27 	bl	800ad8c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <MX_LWIP_Init+0x258>)
 8006740:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006744:	089b      	lsrs	r3, r3, #2
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006750:	480c      	ldr	r0, [pc, #48]	; (8006784 <MX_LWIP_Init+0x258>)
 8006752:	f004 fb2b 	bl	800adac <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006756:	e002      	b.n	800675e <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8006758:	480a      	ldr	r0, [pc, #40]	; (8006784 <MX_LWIP_Init+0x258>)
 800675a:	f004 fb93 	bl	800ae84 <netif_set_down>
}
 800675e:	bf00      	nop
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	2000f6c8 	.word	0x2000f6c8
 8006768:	2000f6c4 	.word	0x2000f6c4
 800676c:	2000f68c 	.word	0x2000f68c
 8006770:	2000f6c0 	.word	0x2000f6c0
 8006774:	2000f6cc 	.word	0x2000f6cc
 8006778:	2000f6d0 	.word	0x2000f6d0
 800677c:	08009e61 	.word	0x08009e61
 8006780:	08006dcd 	.word	0x08006dcd
 8006784:	2000f690 	.word	0x2000f690

08006788 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08e      	sub	sp, #56	; 0x38
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	609a      	str	r2, [r3, #8]
 800679c:	60da      	str	r2, [r3, #12]
 800679e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a52      	ldr	r2, [pc, #328]	; (80068f0 <HAL_ETH_MspInit+0x168>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	f040 809e 	bne.w	80068e8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80067ac:	4b51      	ldr	r3, [pc, #324]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	4a50      	ldr	r2, [pc, #320]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067b6:	6313      	str	r3, [r2, #48]	; 0x30
 80067b8:	4b4e      	ldr	r3, [pc, #312]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	4b4b      	ldr	r3, [pc, #300]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	4a4a      	ldr	r2, [pc, #296]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067ce:	6313      	str	r3, [r2, #48]	; 0x30
 80067d0:	4b48      	ldr	r3, [pc, #288]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4b45      	ldr	r3, [pc, #276]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	4a44      	ldr	r2, [pc, #272]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067e6:	6313      	str	r3, [r2, #48]	; 0x30
 80067e8:	4b42      	ldr	r3, [pc, #264]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067f4:	4b3f      	ldr	r3, [pc, #252]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	4a3e      	ldr	r2, [pc, #248]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 80067fa:	f043 0304 	orr.w	r3, r3, #4
 80067fe:	6313      	str	r3, [r2, #48]	; 0x30
 8006800:	4b3c      	ldr	r3, [pc, #240]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800680c:	4b39      	ldr	r3, [pc, #228]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	4a38      	ldr	r2, [pc, #224]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	6313      	str	r3, [r2, #48]	; 0x30
 8006818:	4b36      	ldr	r3, [pc, #216]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006824:	4b33      	ldr	r3, [pc, #204]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	4a32      	ldr	r2, [pc, #200]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 800682a:	f043 0302 	orr.w	r3, r3, #2
 800682e:	6313      	str	r3, [r2, #48]	; 0x30
 8006830:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800683c:	4b2d      	ldr	r3, [pc, #180]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	4a2c      	ldr	r2, [pc, #176]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 8006842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006846:	6313      	str	r3, [r2, #48]	; 0x30
 8006848:	4b2a      	ldr	r3, [pc, #168]	; (80068f4 <HAL_ETH_MspInit+0x16c>)
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006854:	2332      	movs	r3, #50	; 0x32
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006858:	2302      	movs	r3, #2
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685c:	2300      	movs	r3, #0
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006860:	2303      	movs	r3, #3
 8006862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006864:	230b      	movs	r3, #11
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686c:	4619      	mov	r1, r3
 800686e:	4822      	ldr	r0, [pc, #136]	; (80068f8 <HAL_ETH_MspInit+0x170>)
 8006870:	f7fb fdcc 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006874:	2386      	movs	r3, #134	; 0x86
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006878:	2302      	movs	r3, #2
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687c:	2300      	movs	r3, #0
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006880:	2303      	movs	r3, #3
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006884:	230b      	movs	r3, #11
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800688c:	4619      	mov	r1, r3
 800688e:	481b      	ldr	r0, [pc, #108]	; (80068fc <HAL_ETH_MspInit+0x174>)
 8006890:	f7fb fdbc 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006894:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800689a:	2302      	movs	r3, #2
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068a2:	2303      	movs	r3, #3
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068a6:	230b      	movs	r3, #11
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ae:	4619      	mov	r1, r3
 80068b0:	4813      	ldr	r0, [pc, #76]	; (8006900 <HAL_ETH_MspInit+0x178>)
 80068b2:	f7fb fdab 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80068b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068bc:	2302      	movs	r3, #2
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c4:	2303      	movs	r3, #3
 80068c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068c8:	230b      	movs	r3, #11
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80068cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d0:	4619      	mov	r1, r3
 80068d2:	480c      	ldr	r0, [pc, #48]	; (8006904 <HAL_ETH_MspInit+0x17c>)
 80068d4:	f7fb fd9a 	bl	800240c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80068d8:	2200      	movs	r2, #0
 80068da:	2105      	movs	r1, #5
 80068dc:	203d      	movs	r0, #61	; 0x3d
 80068de:	f7fa fd57 	bl	8001390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80068e2:	203d      	movs	r0, #61	; 0x3d
 80068e4:	f7fa fd70 	bl	80013c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80068e8:	bf00      	nop
 80068ea:	3738      	adds	r7, #56	; 0x38
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40028000 	.word	0x40028000
 80068f4:	40023800 	.word	0x40023800
 80068f8:	40020800 	.word	0x40020800
 80068fc:	40020000 	.word	0x40020000
 8006900:	40020400 	.word	0x40020400
 8006904:	40021800 	.word	0x40021800

08006908 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006910:	4b04      	ldr	r3, [pc, #16]	; (8006924 <HAL_ETH_RxCpltCallback+0x1c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fc4d 	bl	80071b4 <osSemaphoreRelease>
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200002f4 	.word	0x200002f4

08006928 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8006928:	b5b0      	push	{r4, r5, r7, lr}
 800692a:	b090      	sub	sp, #64	; 0x40
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006934:	4b5c      	ldr	r3, [pc, #368]	; (8006aa8 <low_level_init+0x180>)
 8006936:	4a5d      	ldr	r2, [pc, #372]	; (8006aac <low_level_init+0x184>)
 8006938:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800693a:	4b5b      	ldr	r3, [pc, #364]	; (8006aa8 <low_level_init+0x180>)
 800693c:	2201      	movs	r2, #1
 800693e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006940:	4b59      	ldr	r3, [pc, #356]	; (8006aa8 <low_level_init+0x180>)
 8006942:	2201      	movs	r2, #1
 8006944:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8006952:	23e1      	movs	r3, #225	; 0xe1
 8006954:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8006958:	2300      	movs	r3, #0
 800695a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800695e:	2300      	movs	r3, #0
 8006960:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800696a:	4a4f      	ldr	r2, [pc, #316]	; (8006aa8 <low_level_init+0x180>)
 800696c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006970:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006972:	4b4d      	ldr	r3, [pc, #308]	; (8006aa8 <low_level_init+0x180>)
 8006974:	2201      	movs	r2, #1
 8006976:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006978:	4b4b      	ldr	r3, [pc, #300]	; (8006aa8 <low_level_init+0x180>)
 800697a:	2200      	movs	r2, #0
 800697c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800697e:	4b4a      	ldr	r3, [pc, #296]	; (8006aa8 <low_level_init+0x180>)
 8006980:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006984:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006986:	4848      	ldr	r0, [pc, #288]	; (8006aa8 <low_level_init+0x180>)
 8006988:	f7fa fd4e 	bl	8001428 <HAL_ETH_Init>
 800698c:	4603      	mov	r3, r0
 800698e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006992:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006996:	2b00      	cmp	r3, #0
 8006998:	d108      	bne.n	80069ac <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80069a0:	f043 0304 	orr.w	r3, r3, #4
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80069ac:	2304      	movs	r3, #4
 80069ae:	4a40      	ldr	r2, [pc, #256]	; (8006ab0 <low_level_init+0x188>)
 80069b0:	4940      	ldr	r1, [pc, #256]	; (8006ab4 <low_level_init+0x18c>)
 80069b2:	483d      	ldr	r0, [pc, #244]	; (8006aa8 <low_level_init+0x180>)
 80069b4:	f7fa fed4 	bl	8001760 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80069b8:	2304      	movs	r3, #4
 80069ba:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <low_level_init+0x190>)
 80069bc:	493f      	ldr	r1, [pc, #252]	; (8006abc <low_level_init+0x194>)
 80069be:	483a      	ldr	r0, [pc, #232]	; (8006aa8 <low_level_init+0x180>)
 80069c0:	f7fa ff37 	bl	8001832 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2206      	movs	r2, #6
 80069c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80069cc:	4b36      	ldr	r3, [pc, #216]	; (8006aa8 <low_level_init+0x180>)
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	781a      	ldrb	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80069d8:	4b33      	ldr	r3, [pc, #204]	; (8006aa8 <low_level_init+0x180>)
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	785a      	ldrb	r2, [r3, #1]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80069e4:	4b30      	ldr	r3, [pc, #192]	; (8006aa8 <low_level_init+0x180>)
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	789a      	ldrb	r2, [r3, #2]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80069f0:	4b2d      	ldr	r3, [pc, #180]	; (8006aa8 <low_level_init+0x180>)
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	78da      	ldrb	r2, [r3, #3]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80069fc:	4b2a      	ldr	r3, [pc, #168]	; (8006aa8 <low_level_init+0x180>)
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	791a      	ldrb	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006a08:	4b27      	ldr	r3, [pc, #156]	; (8006aa8 <low_level_init+0x180>)
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	795a      	ldrb	r2, [r3, #5]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006a1a:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006a22:	f043 030a 	orr.w	r3, r3, #10
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a32:	2300      	movs	r3, #0
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fb37 	bl	80070b0 <osSemaphoreCreate>
 8006a42:	4602      	mov	r2, r0
 8006a44:	4b1e      	ldr	r3, [pc, #120]	; (8006ac0 <low_level_init+0x198>)
 8006a46:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <low_level_init+0x19c>)
 8006a4a:	f107 040c 	add.w	r4, r7, #12
 8006a4e:	461d      	mov	r5, r3
 8006a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006a5c:	f107 030c 	add.w	r3, r7, #12
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fa28 	bl	8006eb8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006a68:	480f      	ldr	r0, [pc, #60]	; (8006aa8 <low_level_init+0x180>)
 8006a6a:	f7fb fa0a 	bl	8001e82 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a72:	461a      	mov	r2, r3
 8006a74:	211d      	movs	r1, #29
 8006a76:	480c      	ldr	r0, [pc, #48]	; (8006aa8 <low_level_init+0x180>)
 8006a78:	f7fb f935 	bl	8001ce6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	f043 030b 	orr.w	r3, r3, #11
 8006a82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	461a      	mov	r2, r3
 8006a88:	211d      	movs	r1, #29
 8006a8a:	4807      	ldr	r0, [pc, #28]	; (8006aa8 <low_level_init+0x180>)
 8006a8c:	f7fb f993 	bl	8001db6 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006a90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a94:	461a      	mov	r2, r3
 8006a96:	211d      	movs	r1, #29
 8006a98:	4803      	ldr	r0, [pc, #12]	; (8006aa8 <low_level_init+0x180>)
 8006a9a:	f7fb f924 	bl	8001ce6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8006a9e:	bf00      	nop
 8006aa0:	3740      	adds	r7, #64	; 0x40
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20010fa4 	.word	0x20010fa4
 8006aac:	40028000 	.word	0x40028000
 8006ab0:	20010fec 	.word	0x20010fec
 8006ab4:	2000f6d4 	.word	0x2000f6d4
 8006ab8:	2000f754 	.word	0x2000f754
 8006abc:	20010f24 	.word	0x20010f24
 8006ac0:	200002f4 	.word	0x200002f4
 8006ac4:	08014b1c 	.word	0x08014b1c

08006ac8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08a      	sub	sp, #40	; 0x28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006ad2:	4b4b      	ldr	r3, [pc, #300]	; (8006c00 <low_level_output+0x138>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006aea:	4b45      	ldr	r3, [pc, #276]	; (8006c00 <low_level_output+0x138>)
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	e05a      	b.n	8006bb0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da03      	bge.n	8006b0a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006b02:	23f8      	movs	r3, #248	; 0xf8
 8006b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006b08:	e05c      	b.n	8006bc4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	895b      	ldrh	r3, [r3, #10]
 8006b0e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006b14:	e02f      	b.n	8006b76 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	18d0      	adds	r0, r2, r3
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	18d1      	adds	r1, r2, r3
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f00d f89e 	bl	8013c6e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	da03      	bge.n	8006b48 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006b40:	23f8      	movs	r3, #248	; 0xf8
 8006b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006b46:	e03d      	b.n	8006bc4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006b58:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006b64:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006b70:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d8c8      	bhi.n	8006b16 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	18d0      	adds	r0, r2, r3
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4413      	add	r3, r2
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4619      	mov	r1, r3
 8006b96:	f00d f86a 	bl	8013c6e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	623b      	str	r3, [r7, #32]
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1a1      	bne.n	8006afa <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006bb6:	6979      	ldr	r1, [r7, #20]
 8006bb8:	4811      	ldr	r0, [pc, #68]	; (8006c00 <low_level_output+0x138>)
 8006bba:	f7fa fea7 	bl	800190c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <low_level_output+0x138>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	f241 0314 	movw	r3, #4116	; 0x1014
 8006bcc:	4413      	add	r3, r2
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00d      	beq.n	8006bf4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <low_level_output+0x138>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	f241 0314 	movw	r3, #4116	; 0x1014
 8006be0:	4413      	add	r3, r2
 8006be2:	2220      	movs	r2, #32
 8006be4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <low_level_output+0x138>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	f241 0304 	movw	r3, #4100	; 0x1004
 8006bee:	4413      	add	r3, r2
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006bf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3728      	adds	r7, #40	; 0x28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20010fa4 	.word	0x20010fa4

08006c04 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08c      	sub	sp, #48	; 0x30
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006c28:	484f      	ldr	r0, [pc, #316]	; (8006d68 <low_level_input+0x164>)
 8006c2a:	f7fa ff59 	bl	8001ae0 <HAL_ETH_GetReceivedFrame_IT>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <low_level_input+0x34>
  
    return NULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e092      	b.n	8006d5e <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006c38:	4b4b      	ldr	r3, [pc, #300]	; (8006d68 <low_level_input+0x164>)
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006c3e:	4b4a      	ldr	r3, [pc, #296]	; (8006d68 <low_level_input+0x164>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8006c44:	89fb      	ldrh	r3, [r7, #14]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006c4a:	89fb      	ldrh	r3, [r7, #14]
 8006c4c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006c50:	4619      	mov	r1, r3
 8006c52:	2000      	movs	r0, #0
 8006c54:	f004 fa00 	bl	800b058 <pbuf_alloc>
 8006c58:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d04b      	beq.n	8006cf8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006c60:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <low_level_input+0x164>)
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c6e:	e040      	b.n	8006cf2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	895b      	ldrh	r3, [r3, #10]
 8006c74:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006c7a:	e021      	b.n	8006cc0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	18d0      	adds	r0, r2, r3
 8006c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	18d1      	adds	r1, r2, r3
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	461a      	mov	r2, r3
 8006c94:	f00c ffeb 	bl	8013c6e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006cae:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006cba:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d8d6      	bhi.n	8006c7c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	18d0      	adds	r0, r2, r3
 8006cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f00c ffc5 	bl	8013c6e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	4413      	add	r3, r2
 8006cea:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1bb      	bne.n	8006c70 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <low_level_input+0x164>)
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	e00b      	b.n	8006d1c <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <low_level_input+0x164>)
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d3ee      	bcc.n	8006d04 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8006d26:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <low_level_input+0x164>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <low_level_input+0x164>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	f241 0314 	movw	r3, #4116	; 0x1014
 8006d34:	4413      	add	r3, r2
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00d      	beq.n	8006d5c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006d40:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <low_level_input+0x164>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	f241 0314 	movw	r3, #4116	; 0x1014
 8006d48:	4413      	add	r3, r2
 8006d4a:	2280      	movs	r2, #128	; 0x80
 8006d4c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <low_level_input+0x164>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	f241 0308 	movw	r3, #4104	; 0x1008
 8006d56:	4413      	add	r3, r2
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3730      	adds	r7, #48	; 0x30
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20010fa4 	.word	0x20010fa4

08006d6c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006d78:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <ethernetif_input+0x58>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 f9c9 	bl	8007118 <osSemaphoreWait>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f5      	bne.n	8006d78 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8006d8c:	480e      	ldr	r0, [pc, #56]	; (8006dc8 <ethernetif_input+0x5c>)
 8006d8e:	f00c fedb 	bl	8013b48 <sys_mutex_lock>
        p = low_level_input( netif );
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff ff36 	bl	8006c04 <low_level_input>
 8006d98:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	68b8      	ldr	r0, [r7, #8]
 8006da8:	4798      	blx	r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006db0:	68b8      	ldr	r0, [r7, #8]
 8006db2:	f004 fc31 	bl	800b618 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006db6:	4804      	ldr	r0, [pc, #16]	; (8006dc8 <ethernetif_input+0x5c>)
 8006db8:	f00c fed5 	bl	8013b66 <sys_mutex_unlock>
      } while(p!=NULL);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e4      	bne.n	8006d8c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006dc2:	e7d9      	b.n	8006d78 <ethernetif_input+0xc>
 8006dc4:	200002f4 	.word	0x200002f4
 8006dc8:	200127bc 	.word	0x200127bc

08006dcc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <ethernetif_init+0x1c>
 8006dda:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <ethernetif_init+0x48>)
 8006ddc:	f240 2235 	movw	r2, #565	; 0x235
 8006de0:	490d      	ldr	r1, [pc, #52]	; (8006e18 <ethernetif_init+0x4c>)
 8006de2:	480e      	ldr	r0, [pc, #56]	; (8006e1c <ethernetif_init+0x50>)
 8006de4:	f00c ff56 	bl	8013c94 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2273      	movs	r2, #115	; 0x73
 8006dec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2274      	movs	r2, #116	; 0x74
 8006df4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <ethernetif_init+0x54>)
 8006dfc:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a08      	ldr	r2, [pc, #32]	; (8006e24 <ethernetif_init+0x58>)
 8006e02:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fd8f 	bl	8006928 <low_level_init>

  return ERR_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	08014b38 	.word	0x08014b38
 8006e18:	08014b54 	.word	0x08014b54
 8006e1c:	08014b64 	.word	0x08014b64
 8006e20:	08011d01 	.word	0x08011d01
 8006e24:	08006ac9 	.word	0x08006ac9

08006e28 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006e2c:	f7fa f9ca 	bl	80011c4 <HAL_GetTick>
 8006e30:	4603      	mov	r3, r0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b085      	sub	sp, #20
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e48:	2b84      	cmp	r3, #132	; 0x84
 8006e4a:	d005      	beq.n	8006e58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	3303      	adds	r3, #3
 8006e56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e58:	68fb      	ldr	r3, [r7, #12]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e6c:	f3ef 8305 	mrs	r3, IPSR
 8006e70:	607b      	str	r3, [r7, #4]
  return(result);
 8006e72:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bf14      	ite	ne
 8006e78:	2301      	movne	r3, #1
 8006e7a:	2300      	moveq	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e8e:	f001 fc87 	bl	80087a0 <vTaskStartScheduler>
  
  return osOK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006e9c:	f7ff ffe3 	bl	8006e66 <inHandlerMode>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006ea6:	f001 fd99 	bl	80089dc <xTaskGetTickCountFromISR>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	e002      	b.n	8006eb4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006eae:	f001 fd85 	bl	80089bc <xTaskGetTickCount>
 8006eb2:	4603      	mov	r3, r0
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eba:	b089      	sub	sp, #36	; 0x24
 8006ebc:	af04      	add	r7, sp, #16
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d020      	beq.n	8006f0c <osThreadCreate+0x54>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01c      	beq.n	8006f0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685c      	ldr	r4, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681d      	ldr	r5, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691e      	ldr	r6, [r3, #16]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff ffa6 	bl	8006e36 <makeFreeRtosPriority>
 8006eea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ef4:	9202      	str	r2, [sp, #8]
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	9100      	str	r1, [sp, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	4632      	mov	r2, r6
 8006efe:	4629      	mov	r1, r5
 8006f00:	4620      	mov	r0, r4
 8006f02:	f001 fa80 	bl	8008406 <xTaskCreateStatic>
 8006f06:	4603      	mov	r3, r0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	e01c      	b.n	8006f46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685c      	ldr	r4, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f18:	b29e      	uxth	r6, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff ff88 	bl	8006e36 <makeFreeRtosPriority>
 8006f26:	4602      	mov	r2, r0
 8006f28:	f107 030c 	add.w	r3, r7, #12
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	9200      	str	r2, [sp, #0]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	4632      	mov	r2, r6
 8006f34:	4629      	mov	r1, r5
 8006f36:	4620      	mov	r0, r4
 8006f38:	f001 fac5 	bl	80084c6 <xTaskCreate>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d001      	beq.n	8006f46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e000      	b.n	8006f48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f46:	68fb      	ldr	r3, [r7, #12]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <osDelay+0x16>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	e000      	b.n	8006f68 <osDelay+0x18>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 fbe3 	bl	8008734 <vTaskDelay>
  
  return osOK;
 8006f6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	2001      	movs	r0, #1
 8006f90:	f000 fc51 	bl	8007836 <xQueueCreateMutexStatic>
 8006f94:	4603      	mov	r3, r0
 8006f96:	e003      	b.n	8006fa0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006f98:	2001      	movs	r0, #1
 8006f9a:	f000 fc34 	bl	8007806 <xQueueCreateMutex>
 8006f9e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <osMutexWait+0x18>
    return osErrorParameter;
 8006fbc:	2380      	movs	r3, #128	; 0x80
 8006fbe:	e03a      	b.n	8007036 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d103      	bne.n	8006fd4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e009      	b.n	8006fe8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d006      	beq.n	8006fe8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <osMutexWait+0x40>
      ticks = 1;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006fe8:	f7ff ff3d 	bl	8006e66 <inHandlerMode>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d017      	beq.n	8007022 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006ff2:	f107 0308 	add.w	r3, r7, #8
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f858 	bl	80080b0 <xQueueReceiveFromISR>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d001      	beq.n	800700a <osMutexWait+0x62>
      return osErrorOS;
 8007006:	23ff      	movs	r3, #255	; 0xff
 8007008:	e015      	b.n	8007036 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d011      	beq.n	8007034 <osMutexWait+0x8c>
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <osMutexWait+0x98>)
 8007012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	e008      	b.n	8007034 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 ff33 	bl	8007e90 <xQueueSemaphoreTake>
 800702a:	4603      	mov	r3, r0
 800702c:	2b01      	cmp	r3, #1
 800702e:	d001      	beq.n	8007034 <osMutexWait+0x8c>
    return osErrorOS;
 8007030:	23ff      	movs	r3, #255	; 0xff
 8007032:	e000      	b.n	8007036 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007050:	2300      	movs	r3, #0
 8007052:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007054:	f7ff ff07 	bl	8006e66 <inHandlerMode>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d016      	beq.n	800708c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800705e:	f107 0308 	add.w	r3, r7, #8
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fd9f 	bl	8007ba8 <xQueueGiveFromISR>
 800706a:	4603      	mov	r3, r0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d001      	beq.n	8007074 <osMutexRelease+0x30>
      return osErrorOS;
 8007070:	23ff      	movs	r3, #255	; 0xff
 8007072:	e017      	b.n	80070a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d013      	beq.n	80070a2 <osMutexRelease+0x5e>
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <osMutexRelease+0x68>)
 800707c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	e00a      	b.n	80070a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800708c:	2300      	movs	r3, #0
 800708e:	2200      	movs	r2, #0
 8007090:	2100      	movs	r1, #0
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fbea 	bl	800786c <xQueueGenericSend>
 8007098:	4603      	mov	r3, r0
 800709a:	2b01      	cmp	r3, #1
 800709c:	d001      	beq.n	80070a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800709e:	23ff      	movs	r3, #255	; 0xff
 80070a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	e000ed04 	.word	0xe000ed04

080070b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d010      	beq.n	80070e4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d10b      	bne.n	80070e0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	2303      	movs	r3, #3
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	2001      	movs	r0, #1
 80070d8:	f000 fa9e 	bl	8007618 <xQueueGenericCreateStatic>
 80070dc:	4603      	mov	r3, r0
 80070de:	e016      	b.n	800710e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	e014      	b.n	800710e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d110      	bne.n	800710c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80070ea:	2203      	movs	r2, #3
 80070ec:	2100      	movs	r1, #0
 80070ee:	2001      	movs	r0, #1
 80070f0:	f000 fb0f 	bl	8007712 <xQueueGenericCreate>
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <osSemaphoreCreate+0x58>
 80070fc:	2300      	movs	r3, #0
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fbb2 	bl	800786c <xQueueGenericSend>
      return sema;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	e000      	b.n	800710e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800710c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	e03a      	b.n	80071a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d103      	bne.n	8007144 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800713c:	f04f 33ff 	mov.w	r3, #4294967295
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e009      	b.n	8007158 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d006      	beq.n	8007158 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <osSemaphoreWait+0x40>
      ticks = 1;
 8007154:	2301      	movs	r3, #1
 8007156:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007158:	f7ff fe85 	bl	8006e66 <inHandlerMode>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d017      	beq.n	8007192 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007162:	f107 0308 	add.w	r3, r7, #8
 8007166:	461a      	mov	r2, r3
 8007168:	2100      	movs	r1, #0
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 ffa0 	bl	80080b0 <xQueueReceiveFromISR>
 8007170:	4603      	mov	r3, r0
 8007172:	2b01      	cmp	r3, #1
 8007174:	d001      	beq.n	800717a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007176:	23ff      	movs	r3, #255	; 0xff
 8007178:	e015      	b.n	80071a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d011      	beq.n	80071a4 <osSemaphoreWait+0x8c>
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <osSemaphoreWait+0x98>)
 8007182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	e008      	b.n	80071a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fe7b 	bl	8007e90 <xQueueSemaphoreTake>
 800719a:	4603      	mov	r3, r0
 800719c:	2b01      	cmp	r3, #1
 800719e:	d001      	beq.n	80071a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80071a0:	23ff      	movs	r3, #255	; 0xff
 80071a2:	e000      	b.n	80071a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80071c4:	f7ff fe4f 	bl	8006e66 <inHandlerMode>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d016      	beq.n	80071fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fce7 	bl	8007ba8 <xQueueGiveFromISR>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d001      	beq.n	80071e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80071e0:	23ff      	movs	r3, #255	; 0xff
 80071e2:	e017      	b.n	8007214 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d013      	beq.n	8007212 <osSemaphoreRelease+0x5e>
 80071ea:	4b0c      	ldr	r3, [pc, #48]	; (800721c <osSemaphoreRelease+0x68>)
 80071ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	e00a      	b.n	8007212 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80071fc:	2300      	movs	r3, #0
 80071fe:	2200      	movs	r2, #0
 8007200:	2100      	movs	r1, #0
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fb32 	bl	800786c <xQueueGenericSend>
 8007208:	4603      	mov	r3, r0
 800720a:	2b01      	cmp	r3, #1
 800720c:	d001      	beq.n	8007212 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800720e:	23ff      	movs	r3, #255	; 0xff
 8007210:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007212:	68fb      	ldr	r3, [r7, #12]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b085      	sub	sp, #20
 8007224:	af02      	add	r7, sp, #8
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d012      	beq.n	8007258 <osMessageCreate+0x38>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00e      	beq.n	8007258 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6859      	ldr	r1, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68dc      	ldr	r4, [r3, #12]
 800724a:	2300      	movs	r3, #0
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	4623      	mov	r3, r4
 8007250:	f000 f9e2 	bl	8007618 <xQueueGenericCreateStatic>
 8007254:	4603      	mov	r3, r0
 8007256:	e008      	b.n	800726a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	4619      	mov	r1, r3
 8007264:	f000 fa55 	bl	8007712 <xQueueGenericCreate>
 8007268:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	bd90      	pop	{r4, r7, pc}
	...

08007274 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <osMessagePut+0x1e>
    ticks = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007292:	f7ff fde8 	bl	8006e66 <inHandlerMode>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d018      	beq.n	80072ce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800729c:	f107 0210 	add.w	r2, r7, #16
 80072a0:	f107 0108 	add.w	r1, r7, #8
 80072a4:	2300      	movs	r3, #0
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 fbe2 	bl	8007a70 <xQueueGenericSendFromISR>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d001      	beq.n	80072b6 <osMessagePut+0x42>
      return osErrorOS;
 80072b2:	23ff      	movs	r3, #255	; 0xff
 80072b4:	e018      	b.n	80072e8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d014      	beq.n	80072e6 <osMessagePut+0x72>
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <osMessagePut+0x7c>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	e00b      	b.n	80072e6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80072ce:	f107 0108 	add.w	r1, r7, #8
 80072d2:	2300      	movs	r3, #0
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fac8 	bl	800786c <xQueueGenericSend>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d001      	beq.n	80072e6 <osMessagePut+0x72>
      return osErrorOS;
 80072e2:	23ff      	movs	r3, #255	; 0xff
 80072e4:	e000      	b.n	80072e8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	e000ed04 	.word	0xe000ed04

080072f4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b08b      	sub	sp, #44	; 0x2c
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800730e:	2380      	movs	r3, #128	; 0x80
 8007310:	617b      	str	r3, [r7, #20]
    return event;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	461c      	mov	r4, r3
 8007316:	f107 0314 	add.w	r3, r7, #20
 800731a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800731e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007322:	e054      	b.n	80073ce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007324:	2300      	movs	r3, #0
 8007326:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d103      	bne.n	800733c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007334:	f04f 33ff 	mov.w	r3, #4294967295
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
 800733a:	e009      	b.n	8007350 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d006      	beq.n	8007350 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <osMessageGet+0x5c>
      ticks = 1;
 800734c:	2301      	movs	r3, #1
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007350:	f7ff fd89 	bl	8006e66 <inHandlerMode>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01c      	beq.n	8007394 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800735a:	f107 0220 	add.w	r2, r7, #32
 800735e:	f107 0314 	add.w	r3, r7, #20
 8007362:	3304      	adds	r3, #4
 8007364:	4619      	mov	r1, r3
 8007366:	68b8      	ldr	r0, [r7, #8]
 8007368:	f000 fea2 	bl	80080b0 <xQueueReceiveFromISR>
 800736c:	4603      	mov	r3, r0
 800736e:	2b01      	cmp	r3, #1
 8007370:	d102      	bne.n	8007378 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007372:	2310      	movs	r3, #16
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	e001      	b.n	800737c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d01d      	beq.n	80073be <osMessageGet+0xca>
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <osMessageGet+0xe4>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	e014      	b.n	80073be <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007394:	f107 0314 	add.w	r3, r7, #20
 8007398:	3304      	adds	r3, #4
 800739a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739c:	4619      	mov	r1, r3
 800739e:	68b8      	ldr	r0, [r7, #8]
 80073a0:	f000 fc94 	bl	8007ccc <xQueueReceive>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d102      	bne.n	80073b0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80073aa:	2310      	movs	r3, #16
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	e006      	b.n	80073be <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <osMessageGet+0xc6>
 80073b6:	2300      	movs	r3, #0
 80073b8:	e000      	b.n	80073bc <osMessageGet+0xc8>
 80073ba:	2340      	movs	r3, #64	; 0x40
 80073bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	461c      	mov	r4, r3
 80073c2:	f107 0314 	add.w	r3, r7, #20
 80073c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	372c      	adds	r7, #44	; 0x2c
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd90      	pop	{r4, r7, pc}
 80073d6:	bf00      	nop
 80073d8:	e000ed04 	.word	0xe000ed04

080073dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f103 0208 	add.w	r2, r3, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295
 80073f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f103 0208 	add.w	r2, r3, #8
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f103 0208 	add.w	r2, r3, #8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	601a      	str	r2, [r3, #0]
}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007494:	d103      	bne.n	800749e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e00c      	b.n	80074b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3308      	adds	r3, #8
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e002      	b.n	80074ac <vListInsert+0x2e>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d2f6      	bcs.n	80074a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6892      	ldr	r2, [r2, #8]
 8007506:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6852      	ldr	r2, [r2, #4]
 8007510:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	429a      	cmp	r2, r3
 800751a:	d103      	bne.n	8007524 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	1e5a      	subs	r2, r3, #1
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10b      	bne.n	8007570 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	b672      	cpsid	i
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	b662      	cpsie	i
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	e7fe      	b.n	800756e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007570:	f002 f882 	bl	8009678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757c:	68f9      	ldr	r1, [r7, #12]
 800757e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	441a      	add	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a0:	3b01      	subs	r3, #1
 80075a2:	68f9      	ldr	r1, [r7, #12]
 80075a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075a6:	fb01 f303 	mul.w	r3, r1, r3
 80075aa:	441a      	add	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	22ff      	movs	r2, #255	; 0xff
 80075b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	22ff      	movs	r2, #255	; 0xff
 80075bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d114      	bne.n	80075f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d01a      	beq.n	8007604 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3310      	adds	r3, #16
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 fb50 	bl	8008c78 <xTaskRemoveFromEventList>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d012      	beq.n	8007604 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075de:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <xQueueGenericReset+0xd0>)
 80075e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	e009      	b.n	8007604 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3310      	adds	r3, #16
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fef1 	bl	80073dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3324      	adds	r3, #36	; 0x24
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff feec 	bl	80073dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007604:	f002 f86a 	bl	80096dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007608:	2301      	movs	r3, #1
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	; 0x38
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10b      	bne.n	8007644 <xQueueGenericCreateStatic+0x2c>
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	b672      	cpsid	i
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	b662      	cpsie	i
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28
 8007642:	e7fe      	b.n	8007642 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10b      	bne.n	8007662 <xQueueGenericCreateStatic+0x4a>
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	b672      	cpsid	i
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	b662      	cpsie	i
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
 8007660:	e7fe      	b.n	8007660 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <xQueueGenericCreateStatic+0x56>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <xQueueGenericCreateStatic+0x5a>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <xQueueGenericCreateStatic+0x5c>
 8007672:	2300      	movs	r3, #0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <xQueueGenericCreateStatic+0x78>
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	b672      	cpsid	i
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	b662      	cpsie	i
 800768c:	623b      	str	r3, [r7, #32]
 800768e:	e7fe      	b.n	800768e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <xQueueGenericCreateStatic+0x84>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <xQueueGenericCreateStatic+0x88>
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <xQueueGenericCreateStatic+0x8a>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <xQueueGenericCreateStatic+0xa6>
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	b672      	cpsid	i
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	b662      	cpsie	i
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	e7fe      	b.n	80076bc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076be:	2348      	movs	r3, #72	; 0x48
 80076c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b48      	cmp	r3, #72	; 0x48
 80076c6:	d00b      	beq.n	80076e0 <xQueueGenericCreateStatic+0xc8>
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	b672      	cpsid	i
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	b662      	cpsie	i
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	e7fe      	b.n	80076de <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00d      	beq.n	8007708 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	4613      	mov	r3, r2
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f846 	bl	8007794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800770a:	4618      	mov	r0, r3
 800770c:	3730      	adds	r7, #48	; 0x30
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007712:	b580      	push	{r7, lr}
 8007714:	b08a      	sub	sp, #40	; 0x28
 8007716:	af02      	add	r7, sp, #8
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	4613      	mov	r3, r2
 800771e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10b      	bne.n	800773e <xQueueGenericCreate+0x2c>
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	b672      	cpsid	i
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	b662      	cpsie	i
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	e7fe      	b.n	800773c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	e004      	b.n	8007754 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	fb02 f303 	mul.w	r3, r2, r3
 8007752:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	3348      	adds	r3, #72	; 0x48
 8007758:	4618      	mov	r0, r3
 800775a:	f002 f8af 	bl	80098bc <pvPortMalloc>
 800775e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d011      	beq.n	800778a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	3348      	adds	r3, #72	; 0x48
 800776e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007778:	79fa      	ldrb	r2, [r7, #7]
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	4613      	mov	r3, r2
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f805 	bl	8007794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800778a:	69bb      	ldr	r3, [r7, #24]
	}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077c2:	2101      	movs	r1, #1
 80077c4:	69b8      	ldr	r0, [r7, #24]
 80077c6:	f7ff febd 	bl	8007544 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077ca:	bf00      	nop
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00e      	beq.n	80077fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077f2:	2300      	movs	r3, #0
 80077f4:	2200      	movs	r2, #0
 80077f6:	2100      	movs	r1, #0
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f837 	bl	800786c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	4603      	mov	r3, r0
 800780e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007810:	2301      	movs	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	2300      	movs	r3, #0
 8007816:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	461a      	mov	r2, r3
 800781c:	6939      	ldr	r1, [r7, #16]
 800781e:	6978      	ldr	r0, [r7, #20]
 8007820:	f7ff ff77 	bl	8007712 <xQueueGenericCreate>
 8007824:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff ffd3 	bl	80077d2 <prvInitialiseMutex>

		return xNewQueue;
 800782c:	68fb      	ldr	r3, [r7, #12]
	}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007836:	b580      	push	{r7, lr}
 8007838:	b088      	sub	sp, #32
 800783a:	af02      	add	r7, sp, #8
 800783c:	4603      	mov	r3, r0
 800783e:	6039      	str	r1, [r7, #0]
 8007840:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007842:	2301      	movs	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2200      	movs	r2, #0
 8007852:	6939      	ldr	r1, [r7, #16]
 8007854:	6978      	ldr	r0, [r7, #20]
 8007856:	f7ff fedf 	bl	8007618 <xQueueGenericCreateStatic>
 800785a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff ffb8 	bl	80077d2 <prvInitialiseMutex>

		return xNewQueue;
 8007862:	68fb      	ldr	r3, [r7, #12]
	}
 8007864:	4618      	mov	r0, r3
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08e      	sub	sp, #56	; 0x38
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800787a:	2300      	movs	r3, #0
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10b      	bne.n	80078a0 <xQueueGenericSend+0x34>
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	b672      	cpsid	i
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	b662      	cpsie	i
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
 800789e:	e7fe      	b.n	800789e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <xQueueGenericSend+0x42>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <xQueueGenericSend+0x46>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <xQueueGenericSend+0x48>
 80078b2:	2300      	movs	r3, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10b      	bne.n	80078d0 <xQueueGenericSend+0x64>
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	b672      	cpsid	i
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	b662      	cpsie	i
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
 80078ce:	e7fe      	b.n	80078ce <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d103      	bne.n	80078de <xQueueGenericSend+0x72>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <xQueueGenericSend+0x76>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <xQueueGenericSend+0x78>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10b      	bne.n	8007900 <xQueueGenericSend+0x94>
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	b672      	cpsid	i
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	b662      	cpsie	i
 80078fc:	623b      	str	r3, [r7, #32]
 80078fe:	e7fe      	b.n	80078fe <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007900:	f001 fb78 	bl	8008ff4 <xTaskGetSchedulerState>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <xQueueGenericSend+0xa4>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <xQueueGenericSend+0xa8>
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <xQueueGenericSend+0xaa>
 8007914:	2300      	movs	r3, #0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10b      	bne.n	8007932 <xQueueGenericSend+0xc6>
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	b672      	cpsid	i
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	b662      	cpsie	i
 800792e:	61fb      	str	r3, [r7, #28]
 8007930:	e7fe      	b.n	8007930 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007932:	f001 fea1 	bl	8009678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793e:	429a      	cmp	r2, r3
 8007940:	d302      	bcc.n	8007948 <xQueueGenericSend+0xdc>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d129      	bne.n	800799c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800794e:	f000 fc4a 	bl	80081e6 <prvCopyDataToQueue>
 8007952:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	d010      	beq.n	800797e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	3324      	adds	r3, #36	; 0x24
 8007960:	4618      	mov	r0, r3
 8007962:	f001 f989 	bl	8008c78 <xTaskRemoveFromEventList>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d013      	beq.n	8007994 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800796c:	4b3f      	ldr	r3, [pc, #252]	; (8007a6c <xQueueGenericSend+0x200>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	e00a      	b.n	8007994 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d007      	beq.n	8007994 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007984:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <xQueueGenericSend+0x200>)
 8007986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007994:	f001 fea2 	bl	80096dc <vPortExitCritical>
				return pdPASS;
 8007998:	2301      	movs	r3, #1
 800799a:	e063      	b.n	8007a64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d103      	bne.n	80079aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079a2:	f001 fe9b 	bl	80096dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e05c      	b.n	8007a64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 f9c3 	bl	8008d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079ba:	2301      	movs	r3, #1
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079be:	f001 fe8d 	bl	80096dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079c2:	f000 ff4f 	bl	8008864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079c6:	f001 fe57 	bl	8009678 <vPortEnterCritical>
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079d0:	b25b      	sxtb	r3, r3
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d6:	d103      	bne.n	80079e0 <xQueueGenericSend+0x174>
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079e6:	b25b      	sxtb	r3, r3
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d103      	bne.n	80079f6 <xQueueGenericSend+0x18a>
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079f6:	f001 fe71 	bl	80096dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079fa:	1d3a      	adds	r2, r7, #4
 80079fc:	f107 0314 	add.w	r3, r7, #20
 8007a00:	4611      	mov	r1, r2
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 f9b2 	bl	8008d6c <xTaskCheckForTimeOut>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d124      	bne.n	8007a58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a10:	f000 fce1 	bl	80083d6 <prvIsQueueFull>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d018      	beq.n	8007a4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	3310      	adds	r3, #16
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 f902 	bl	8008c2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a2a:	f000 fc6c 	bl	8008306 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a2e:	f000 ff27 	bl	8008880 <xTaskResumeAll>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f47f af7c 	bne.w	8007932 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007a3a:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <xQueueGenericSend+0x200>)
 8007a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	e772      	b.n	8007932 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a4e:	f000 fc5a 	bl	8008306 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a52:	f000 ff15 	bl	8008880 <xTaskResumeAll>
 8007a56:	e76c      	b.n	8007932 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a5a:	f000 fc54 	bl	8008306 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a5e:	f000 ff0f 	bl	8008880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3738      	adds	r7, #56	; 0x38
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	e000ed04 	.word	0xe000ed04

08007a70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b08e      	sub	sp, #56	; 0x38
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10b      	bne.n	8007aa0 <xQueueGenericSendFromISR+0x30>
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	b672      	cpsid	i
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	b662      	cpsie	i
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a9e:	e7fe      	b.n	8007a9e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <xQueueGenericSendFromISR+0x3e>
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <xQueueGenericSendFromISR+0x42>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <xQueueGenericSendFromISR+0x44>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10b      	bne.n	8007ad0 <xQueueGenericSendFromISR+0x60>
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	b672      	cpsid	i
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	b662      	cpsie	i
 8007acc:	623b      	str	r3, [r7, #32]
 8007ace:	e7fe      	b.n	8007ace <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d103      	bne.n	8007ade <xQueueGenericSendFromISR+0x6e>
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <xQueueGenericSendFromISR+0x72>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueGenericSendFromISR+0x74>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <xQueueGenericSendFromISR+0x90>
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	b672      	cpsid	i
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	b662      	cpsie	i
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	e7fe      	b.n	8007afe <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b00:	f001 fe9a 	bl	8009838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b04:	f3ef 8211 	mrs	r2, BASEPRI
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	b672      	cpsid	i
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	b662      	cpsie	i
 8007b1c:	61ba      	str	r2, [r7, #24]
 8007b1e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b22:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d302      	bcc.n	8007b36 <xQueueGenericSendFromISR+0xc6>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d12c      	bne.n	8007b90 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b46:	f000 fb4e 	bl	80081e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b52:	d112      	bne.n	8007b7a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d016      	beq.n	8007b8a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 f889 	bl	8008c78 <xTaskRemoveFromEventList>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00e      	beq.n	8007b8a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e007      	b.n	8007b8a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b7e:	3301      	adds	r3, #1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	b25a      	sxtb	r2, r3
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007b8e:	e001      	b.n	8007b94 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	637b      	str	r3, [r7, #52]	; 0x34
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3738      	adds	r7, #56	; 0x38
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08e      	sub	sp, #56	; 0x38
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	b672      	cpsid	i
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	b662      	cpsie	i
 8007bd0:	623b      	str	r3, [r7, #32]
 8007bd2:	e7fe      	b.n	8007bd2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <xQueueGiveFromISR+0x4c>
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	b672      	cpsid	i
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	b662      	cpsie	i
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d103      	bne.n	8007c04 <xQueueGiveFromISR+0x5c>
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <xQueueGiveFromISR+0x60>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <xQueueGiveFromISR+0x62>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10b      	bne.n	8007c26 <xQueueGiveFromISR+0x7e>
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	b672      	cpsid	i
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	b662      	cpsie	i
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	e7fe      	b.n	8007c24 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c26:	f001 fe07 	bl	8009838 <vPortValidateInterruptPriority>
	__asm volatile
 8007c2a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	b672      	cpsid	i
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	b662      	cpsie	i
 8007c42:	617a      	str	r2, [r7, #20]
 8007c44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007c46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d22b      	bcs.n	8007cb2 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c74:	d112      	bne.n	8007c9c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d016      	beq.n	8007cac <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	3324      	adds	r3, #36	; 0x24
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fff8 	bl	8008c78 <xTaskRemoveFromEventList>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00e      	beq.n	8007cac <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2201      	movs	r2, #1
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	e007      	b.n	8007cac <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	b25a      	sxtb	r2, r3
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007cac:	2301      	movs	r3, #1
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb0:	e001      	b.n	8007cb6 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3738      	adds	r7, #56	; 0x38
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08c      	sub	sp, #48	; 0x30
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <xQueueReceive+0x32>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	b672      	cpsid	i
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	b662      	cpsie	i
 8007cfa:	623b      	str	r3, [r7, #32]
 8007cfc:	e7fe      	b.n	8007cfc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <xQueueReceive+0x40>
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <xQueueReceive+0x44>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <xQueueReceive+0x46>
 8007d10:	2300      	movs	r3, #0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <xQueueReceive+0x62>
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	b672      	cpsid	i
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	b662      	cpsie	i
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	e7fe      	b.n	8007d2c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d2e:	f001 f961 	bl	8008ff4 <xTaskGetSchedulerState>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <xQueueReceive+0x72>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <xQueueReceive+0x76>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <xQueueReceive+0x78>
 8007d42:	2300      	movs	r3, #0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10b      	bne.n	8007d60 <xQueueReceive+0x94>
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	b672      	cpsid	i
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	b662      	cpsie	i
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	e7fe      	b.n	8007d5e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d60:	f001 fc8a 	bl	8009678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01f      	beq.n	8007db0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d74:	f000 faa1 	bl	80082ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	1e5a      	subs	r2, r3, #1
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00f      	beq.n	8007da8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	3310      	adds	r3, #16
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 ff73 	bl	8008c78 <xTaskRemoveFromEventList>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d98:	4b3c      	ldr	r3, [pc, #240]	; (8007e8c <xQueueReceive+0x1c0>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007da8:	f001 fc98 	bl	80096dc <vPortExitCritical>
				return pdPASS;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e069      	b.n	8007e84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d103      	bne.n	8007dbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007db6:	f001 fc91 	bl	80096dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e062      	b.n	8007e84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d106      	bne.n	8007dd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dc4:	f107 0310 	add.w	r3, r7, #16
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 ffb9 	bl	8008d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dd2:	f001 fc83 	bl	80096dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dd6:	f000 fd45 	bl	8008864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dda:	f001 fc4d 	bl	8009678 <vPortEnterCritical>
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007de4:	b25b      	sxtb	r3, r3
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	d103      	bne.n	8007df4 <xQueueReceive+0x128>
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dfa:	b25b      	sxtb	r3, r3
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e00:	d103      	bne.n	8007e0a <xQueueReceive+0x13e>
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e0a:	f001 fc67 	bl	80096dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e0e:	1d3a      	adds	r2, r7, #4
 8007e10:	f107 0310 	add.w	r3, r7, #16
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 ffa8 	bl	8008d6c <xTaskCheckForTimeOut>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d123      	bne.n	8007e6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e24:	f000 fac1 	bl	80083aa <prvIsQueueEmpty>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d017      	beq.n	8007e5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	3324      	adds	r3, #36	; 0x24
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fef8 	bl	8008c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e3e:	f000 fa62 	bl	8008306 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e42:	f000 fd1d 	bl	8008880 <xTaskResumeAll>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d189      	bne.n	8007d60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007e4c:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <xQueueReceive+0x1c0>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	e780      	b.n	8007d60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e60:	f000 fa51 	bl	8008306 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e64:	f000 fd0c 	bl	8008880 <xTaskResumeAll>
 8007e68:	e77a      	b.n	8007d60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6c:	f000 fa4b 	bl	8008306 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e70:	f000 fd06 	bl	8008880 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e76:	f000 fa98 	bl	80083aa <prvIsQueueEmpty>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f43f af6f 	beq.w	8007d60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3730      	adds	r7, #48	; 0x30
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08e      	sub	sp, #56	; 0x38
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10b      	bne.n	8007ec4 <xQueueSemaphoreTake+0x34>
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	b672      	cpsid	i
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	b662      	cpsie	i
 8007ec0:	623b      	str	r3, [r7, #32]
 8007ec2:	e7fe      	b.n	8007ec2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <xQueueSemaphoreTake+0x54>
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	b672      	cpsid	i
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	b662      	cpsie	i
 8007ee0:	61fb      	str	r3, [r7, #28]
 8007ee2:	e7fe      	b.n	8007ee2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ee4:	f001 f886 	bl	8008ff4 <xTaskGetSchedulerState>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d102      	bne.n	8007ef4 <xQueueSemaphoreTake+0x64>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <xQueueSemaphoreTake+0x68>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e000      	b.n	8007efa <xQueueSemaphoreTake+0x6a>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10b      	bne.n	8007f16 <xQueueSemaphoreTake+0x86>
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	b672      	cpsid	i
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	b662      	cpsie	i
 8007f12:	61bb      	str	r3, [r7, #24]
 8007f14:	e7fe      	b.n	8007f14 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f16:	f001 fbaf 	bl	8009678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d024      	beq.n	8007f70 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	1e5a      	subs	r2, r3, #1
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007f36:	f001 fa1f 	bl	8009378 <pvTaskIncrementMutexHeldCount>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00f      	beq.n	8007f68 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	3310      	adds	r3, #16
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 fe93 	bl	8008c78 <xTaskRemoveFromEventList>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f58:	4b54      	ldr	r3, [pc, #336]	; (80080ac <xQueueSemaphoreTake+0x21c>)
 8007f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f68:	f001 fbb8 	bl	80096dc <vPortExitCritical>
				return pdPASS;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e098      	b.n	80080a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d112      	bne.n	8007f9c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <xQueueSemaphoreTake+0x104>
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	b672      	cpsid	i
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	b662      	cpsie	i
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e7fe      	b.n	8007f92 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f94:	f001 fba2 	bl	80096dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e082      	b.n	80080a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fa2:	f107 030c 	add.w	r3, r7, #12
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 feca 	bl	8008d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fac:	2301      	movs	r3, #1
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fb0:	f001 fb94 	bl	80096dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fb4:	f000 fc56 	bl	8008864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fb8:	f001 fb5e 	bl	8009678 <vPortEnterCritical>
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d103      	bne.n	8007fd2 <xQueueSemaphoreTake+0x142>
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd8:	b25b      	sxtb	r3, r3
 8007fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fde:	d103      	bne.n	8007fe8 <xQueueSemaphoreTake+0x158>
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe8:	f001 fb78 	bl	80096dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fec:	463a      	mov	r2, r7
 8007fee:	f107 030c 	add.w	r3, r7, #12
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 feb9 	bl	8008d6c <xTaskCheckForTimeOut>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d132      	bne.n	8008066 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008002:	f000 f9d2 	bl	80083aa <prvIsQueueEmpty>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d026      	beq.n	800805a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008014:	f001 fb30 	bl	8009678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	4618      	mov	r0, r3
 800801e:	f001 f807 	bl	8009030 <xTaskPriorityInherit>
 8008022:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008024:	f001 fb5a 	bl	80096dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	3324      	adds	r3, #36	; 0x24
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	4611      	mov	r1, r2
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fdfb 	bl	8008c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008038:	f000 f965 	bl	8008306 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800803c:	f000 fc20 	bl	8008880 <xTaskResumeAll>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	f47f af67 	bne.w	8007f16 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008048:	4b18      	ldr	r3, [pc, #96]	; (80080ac <xQueueSemaphoreTake+0x21c>)
 800804a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	e75d      	b.n	8007f16 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800805a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800805c:	f000 f953 	bl	8008306 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008060:	f000 fc0e 	bl	8008880 <xTaskResumeAll>
 8008064:	e757      	b.n	8007f16 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008068:	f000 f94d 	bl	8008306 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800806c:	f000 fc08 	bl	8008880 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008072:	f000 f99a 	bl	80083aa <prvIsQueueEmpty>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	f43f af4c 	beq.w	8007f16 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00d      	beq.n	80080a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008084:	f001 faf8 	bl	8009678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800808a:	f000 f894 	bl	80081b6 <prvGetDisinheritPriorityAfterTimeout>
 800808e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008096:	4618      	mov	r0, r3
 8008098:	f001 f8d2 	bl	8009240 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800809c:	f001 fb1e 	bl	80096dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3738      	adds	r7, #56	; 0x38
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08e      	sub	sp, #56	; 0x38
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <xQueueReceiveFromISR+0x2e>
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	b672      	cpsid	i
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	b662      	cpsie	i
 80080da:	623b      	str	r3, [r7, #32]
 80080dc:	e7fe      	b.n	80080dc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d103      	bne.n	80080ec <xQueueReceiveFromISR+0x3c>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <xQueueReceiveFromISR+0x40>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e000      	b.n	80080f2 <xQueueReceiveFromISR+0x42>
 80080f0:	2300      	movs	r3, #0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <xQueueReceiveFromISR+0x5e>
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	b672      	cpsid	i
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	b662      	cpsie	i
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	e7fe      	b.n	800810c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800810e:	f001 fb93 	bl	8009838 <vPortValidateInterruptPriority>
	__asm volatile
 8008112:	f3ef 8211 	mrs	r2, BASEPRI
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	b672      	cpsid	i
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	b662      	cpsie	i
 800812a:	61ba      	str	r2, [r7, #24]
 800812c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800812e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008130:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	d02f      	beq.n	800819e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008148:	68b9      	ldr	r1, [r7, #8]
 800814a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800814c:	f000 f8b5 	bl	80082ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	1e5a      	subs	r2, r3, #1
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008158:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d112      	bne.n	8008188 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d016      	beq.n	8008198 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	3310      	adds	r3, #16
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fd82 	bl	8008c78 <xTaskRemoveFromEventList>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00e      	beq.n	8008198 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	e007      	b.n	8008198 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800818c:	3301      	adds	r3, #1
 800818e:	b2db      	uxtb	r3, r3
 8008190:	b25a      	sxtb	r2, r3
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008198:	2301      	movs	r3, #1
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
 800819c:	e001      	b.n	80081a2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800819e:	2300      	movs	r3, #0
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3738      	adds	r7, #56	; 0x38
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d006      	beq.n	80081d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f1c3 0307 	rsb	r3, r3, #7
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	e001      	b.n	80081d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081d8:	68fb      	ldr	r3, [r7, #12]
	}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b086      	sub	sp, #24
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10d      	bne.n	8008220 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d14d      	bne.n	80082a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	4618      	mov	r0, r3
 8008212:	f000 ff8d 	bl	8009130 <xTaskPriorityDisinherit>
 8008216:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	609a      	str	r2, [r3, #8]
 800821e:	e043      	b.n	80082a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d119      	bne.n	800825a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6858      	ldr	r0, [r3, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	461a      	mov	r2, r3
 8008230:	68b9      	ldr	r1, [r7, #8]
 8008232:	f00b fd1c 	bl	8013c6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	441a      	add	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	429a      	cmp	r2, r3
 800824e:	d32b      	bcc.n	80082a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	605a      	str	r2, [r3, #4]
 8008258:	e026      	b.n	80082a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68d8      	ldr	r0, [r3, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	461a      	mov	r2, r3
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	f00b fd02 	bl	8013c6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	425b      	negs	r3, r3
 8008274:	441a      	add	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d207      	bcs.n	8008296 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	425b      	negs	r3, r3
 8008290:	441a      	add	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d105      	bne.n	80082a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082b0:	697b      	ldr	r3, [r7, #20]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d018      	beq.n	80082fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68da      	ldr	r2, [r3, #12]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	441a      	add	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d303      	bcc.n	80082ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68d9      	ldr	r1, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	461a      	mov	r2, r3
 80082f8:	6838      	ldr	r0, [r7, #0]
 80082fa:	f00b fcb8 	bl	8013c6e <memcpy>
	}
}
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800830e:	f001 f9b3 	bl	8009678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008318:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800831a:	e011      	b.n	8008340 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	d012      	beq.n	800834a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3324      	adds	r3, #36	; 0x24
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fca5 	bl	8008c78 <xTaskRemoveFromEventList>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008334:	f000 fd7e 	bl	8008e34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	3b01      	subs	r3, #1
 800833c:	b2db      	uxtb	r3, r3
 800833e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	dce9      	bgt.n	800831c <prvUnlockQueue+0x16>
 8008348:	e000      	b.n	800834c <prvUnlockQueue+0x46>
					break;
 800834a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	22ff      	movs	r2, #255	; 0xff
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008354:	f001 f9c2 	bl	80096dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008358:	f001 f98e 	bl	8009678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008362:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008364:	e011      	b.n	800838a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d012      	beq.n	8008394 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3310      	adds	r3, #16
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fc80 	bl	8008c78 <xTaskRemoveFromEventList>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800837e:	f000 fd59 	bl	8008e34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	3b01      	subs	r3, #1
 8008386:	b2db      	uxtb	r3, r3
 8008388:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800838a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	dce9      	bgt.n	8008366 <prvUnlockQueue+0x60>
 8008392:	e000      	b.n	8008396 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008394:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	22ff      	movs	r2, #255	; 0xff
 800839a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800839e:	f001 f99d 	bl	80096dc <vPortExitCritical>
}
 80083a2:	bf00      	nop
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083b2:	f001 f961 	bl	8009678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083be:	2301      	movs	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e001      	b.n	80083c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083c8:	f001 f988 	bl	80096dc <vPortExitCritical>

	return xReturn;
 80083cc:	68fb      	ldr	r3, [r7, #12]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083de:	f001 f94b 	bl	8009678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d102      	bne.n	80083f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083ee:	2301      	movs	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	e001      	b.n	80083f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083f8:	f001 f970 	bl	80096dc <vPortExitCritical>

	return xReturn;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008406:	b580      	push	{r7, lr}
 8008408:	b08e      	sub	sp, #56	; 0x38
 800840a:	af04      	add	r7, sp, #16
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
 8008412:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <xTaskCreateStatic+0x2c>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	b672      	cpsid	i
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	b662      	cpsie	i
 800842e:	623b      	str	r3, [r7, #32]
 8008430:	e7fe      	b.n	8008430 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10b      	bne.n	8008450 <xTaskCreateStatic+0x4a>
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	b672      	cpsid	i
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	b662      	cpsie	i
 800844c:	61fb      	str	r3, [r7, #28]
 800844e:	e7fe      	b.n	800844e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008450:	2354      	movs	r3, #84	; 0x54
 8008452:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	2b54      	cmp	r3, #84	; 0x54
 8008458:	d00b      	beq.n	8008472 <xTaskCreateStatic+0x6c>
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	b672      	cpsid	i
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	b662      	cpsie	i
 800846e:	61bb      	str	r3, [r7, #24]
 8008470:	e7fe      	b.n	8008470 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008472:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	2b00      	cmp	r3, #0
 8008478:	d01e      	beq.n	80084b8 <xTaskCreateStatic+0xb2>
 800847a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01b      	beq.n	80084b8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008488:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	2202      	movs	r2, #2
 800848e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008492:	2300      	movs	r3, #0
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	9302      	str	r3, [sp, #8]
 800849a:	f107 0314 	add.w	r3, r7, #20
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f850 	bl	8008550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084b2:	f000 f8d5 	bl	8008660 <prvAddNewTaskToReadyList>
 80084b6:	e001      	b.n	80084bc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80084b8:	2300      	movs	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084bc:	697b      	ldr	r3, [r7, #20]
	}
 80084be:	4618      	mov	r0, r3
 80084c0:	3728      	adds	r7, #40	; 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b08c      	sub	sp, #48	; 0x30
 80084ca:	af04      	add	r7, sp, #16
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	603b      	str	r3, [r7, #0]
 80084d2:	4613      	mov	r3, r2
 80084d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 f9ee 	bl	80098bc <pvPortMalloc>
 80084e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00e      	beq.n	8008506 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084e8:	2054      	movs	r0, #84	; 0x54
 80084ea:	f001 f9e7 	bl	80098bc <pvPortMalloc>
 80084ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
 80084fc:	e005      	b.n	800850a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084fe:	6978      	ldr	r0, [r7, #20]
 8008500:	f001 faa4 	bl	8009a4c <vPortFree>
 8008504:	e001      	b.n	800850a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d017      	beq.n	8008540 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008518:	88fa      	ldrh	r2, [r7, #6]
 800851a:	2300      	movs	r3, #0
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	9302      	str	r3, [sp, #8]
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f80e 	bl	8008550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008534:	69f8      	ldr	r0, [r7, #28]
 8008536:	f000 f893 	bl	8008660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800853a:	2301      	movs	r3, #1
 800853c:	61bb      	str	r3, [r7, #24]
 800853e:	e002      	b.n	8008546 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008540:	f04f 33ff 	mov.w	r3, #4294967295
 8008544:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008546:	69bb      	ldr	r3, [r7, #24]
	}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008568:	440b      	add	r3, r1
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	f023 0307 	bic.w	r3, r3, #7
 8008576:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <prvInitialiseNewTask+0x4a>
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	b672      	cpsid	i
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	b662      	cpsie	i
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	e7fe      	b.n	8008598 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01f      	beq.n	80085e0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085a0:	2300      	movs	r3, #0
 80085a2:	61fb      	str	r3, [r7, #28]
 80085a4:	e012      	b.n	80085cc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	7819      	ldrb	r1, [r3, #0]
 80085ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	3334      	adds	r3, #52	; 0x34
 80085b6:	460a      	mov	r2, r1
 80085b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	4413      	add	r3, r2
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d006      	beq.n	80085d4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	3301      	adds	r3, #1
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	2b0f      	cmp	r3, #15
 80085d0:	d9e9      	bls.n	80085a6 <prvInitialiseNewTask+0x56>
 80085d2:	e000      	b.n	80085d6 <prvInitialiseNewTask+0x86>
			{
				break;
 80085d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085de:	e003      	b.n	80085e8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ea:	2b06      	cmp	r3, #6
 80085ec:	d901      	bls.n	80085f2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085ee:	2306      	movs	r3, #6
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	2200      	movs	r2, #0
 8008602:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	3304      	adds	r3, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7fe ff07 	bl	800741c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	3318      	adds	r3, #24
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe ff02 	bl	800741c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	f1c3 0207 	rsb	r2, r3, #7
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	2200      	movs	r2, #0
 8008632:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	69b8      	ldr	r0, [r7, #24]
 8008642:	f000 ff13 	bl	800946c <pxPortInitialiseStack>
 8008646:	4602      	mov	r2, r0
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008656:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008658:	bf00      	nop
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008668:	f001 f806 	bl	8009678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800866c:	4b2a      	ldr	r3, [pc, #168]	; (8008718 <prvAddNewTaskToReadyList+0xb8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	4a29      	ldr	r2, [pc, #164]	; (8008718 <prvAddNewTaskToReadyList+0xb8>)
 8008674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008676:	4b29      	ldr	r3, [pc, #164]	; (800871c <prvAddNewTaskToReadyList+0xbc>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800867e:	4a27      	ldr	r2, [pc, #156]	; (800871c <prvAddNewTaskToReadyList+0xbc>)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008684:	4b24      	ldr	r3, [pc, #144]	; (8008718 <prvAddNewTaskToReadyList+0xb8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d110      	bne.n	80086ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800868c:	f000 fbf6 	bl	8008e7c <prvInitialiseTaskLists>
 8008690:	e00d      	b.n	80086ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008692:	4b23      	ldr	r3, [pc, #140]	; (8008720 <prvAddNewTaskToReadyList+0xc0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d109      	bne.n	80086ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800869a:	4b20      	ldr	r3, [pc, #128]	; (800871c <prvAddNewTaskToReadyList+0xbc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d802      	bhi.n	80086ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086a8:	4a1c      	ldr	r2, [pc, #112]	; (800871c <prvAddNewTaskToReadyList+0xbc>)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086ae:	4b1d      	ldr	r3, [pc, #116]	; (8008724 <prvAddNewTaskToReadyList+0xc4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	4a1b      	ldr	r2, [pc, #108]	; (8008724 <prvAddNewTaskToReadyList+0xc4>)
 80086b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	2201      	movs	r2, #1
 80086be:	409a      	lsls	r2, r3
 80086c0:	4b19      	ldr	r3, [pc, #100]	; (8008728 <prvAddNewTaskToReadyList+0xc8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	4a18      	ldr	r2, [pc, #96]	; (8008728 <prvAddNewTaskToReadyList+0xc8>)
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4a15      	ldr	r2, [pc, #84]	; (800872c <prvAddNewTaskToReadyList+0xcc>)
 80086d8:	441a      	add	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3304      	adds	r3, #4
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f7fe fea8 	bl	8007436 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086e6:	f000 fff9 	bl	80096dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086ea:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <prvAddNewTaskToReadyList+0xc0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00e      	beq.n	8008710 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086f2:	4b0a      	ldr	r3, [pc, #40]	; (800871c <prvAddNewTaskToReadyList+0xbc>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d207      	bcs.n	8008710 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <prvAddNewTaskToReadyList+0xd0>)
 8008702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008710:	bf00      	nop
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	200003f8 	.word	0x200003f8
 800871c:	200002f8 	.word	0x200002f8
 8008720:	20000404 	.word	0x20000404
 8008724:	20000414 	.word	0x20000414
 8008728:	20000400 	.word	0x20000400
 800872c:	200002fc 	.word	0x200002fc
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d018      	beq.n	8008778 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008746:	4b14      	ldr	r3, [pc, #80]	; (8008798 <vTaskDelay+0x64>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <vTaskDelay+0x32>
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	b672      	cpsid	i
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	b662      	cpsie	i
 8008762:	60bb      	str	r3, [r7, #8]
 8008764:	e7fe      	b.n	8008764 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008766:	f000 f87d 	bl	8008864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800876a:	2100      	movs	r1, #0
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fe17 	bl	80093a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008772:	f000 f885 	bl	8008880 <xTaskResumeAll>
 8008776:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d107      	bne.n	800878e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800877e:	4b07      	ldr	r3, [pc, #28]	; (800879c <vTaskDelay+0x68>)
 8008780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20000420 	.word	0x20000420
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087ae:	463a      	mov	r2, r7
 80087b0:	1d39      	adds	r1, r7, #4
 80087b2:	f107 0308 	add.w	r3, r7, #8
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f7 fefa 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	9202      	str	r2, [sp, #8]
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	2300      	movs	r3, #0
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	2300      	movs	r3, #0
 80087cc:	460a      	mov	r2, r1
 80087ce:	491f      	ldr	r1, [pc, #124]	; (800884c <vTaskStartScheduler+0xac>)
 80087d0:	481f      	ldr	r0, [pc, #124]	; (8008850 <vTaskStartScheduler+0xb0>)
 80087d2:	f7ff fe18 	bl	8008406 <xTaskCreateStatic>
 80087d6:	4602      	mov	r2, r0
 80087d8:	4b1e      	ldr	r3, [pc, #120]	; (8008854 <vTaskStartScheduler+0xb4>)
 80087da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087dc:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <vTaskStartScheduler+0xb4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087e4:	2301      	movs	r3, #1
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	e001      	b.n	80087ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d117      	bne.n	8008824 <vTaskStartScheduler+0x84>
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	b672      	cpsid	i
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	b662      	cpsie	i
 8008808:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800880a:	4b13      	ldr	r3, [pc, #76]	; (8008858 <vTaskStartScheduler+0xb8>)
 800880c:	f04f 32ff 	mov.w	r2, #4294967295
 8008810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008812:	4b12      	ldr	r3, [pc, #72]	; (800885c <vTaskStartScheduler+0xbc>)
 8008814:	2201      	movs	r2, #1
 8008816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008818:	4b11      	ldr	r3, [pc, #68]	; (8008860 <vTaskStartScheduler+0xc0>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800881e:	f000 feaf 	bl	8009580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008822:	e00f      	b.n	8008844 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d10b      	bne.n	8008844 <vTaskStartScheduler+0xa4>
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	b672      	cpsid	i
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	b662      	cpsie	i
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	e7fe      	b.n	8008842 <vTaskStartScheduler+0xa2>
}
 8008844:	bf00      	nop
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	08014b8c 	.word	0x08014b8c
 8008850:	08008e4d 	.word	0x08008e4d
 8008854:	2000041c 	.word	0x2000041c
 8008858:	20000418 	.word	0x20000418
 800885c:	20000404 	.word	0x20000404
 8008860:	200003fc 	.word	0x200003fc

08008864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008868:	4b04      	ldr	r3, [pc, #16]	; (800887c <vTaskSuspendAll+0x18>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3301      	adds	r3, #1
 800886e:	4a03      	ldr	r2, [pc, #12]	; (800887c <vTaskSuspendAll+0x18>)
 8008870:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008872:	bf00      	nop
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	20000420 	.word	0x20000420

08008880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800888a:	2300      	movs	r3, #0
 800888c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800888e:	4b42      	ldr	r3, [pc, #264]	; (8008998 <xTaskResumeAll+0x118>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <xTaskResumeAll+0x2e>
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	b672      	cpsid	i
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	b662      	cpsie	i
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	e7fe      	b.n	80088ac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088ae:	f000 fee3 	bl	8009678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088b2:	4b39      	ldr	r3, [pc, #228]	; (8008998 <xTaskResumeAll+0x118>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4a37      	ldr	r2, [pc, #220]	; (8008998 <xTaskResumeAll+0x118>)
 80088ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088bc:	4b36      	ldr	r3, [pc, #216]	; (8008998 <xTaskResumeAll+0x118>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d161      	bne.n	8008988 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088c4:	4b35      	ldr	r3, [pc, #212]	; (800899c <xTaskResumeAll+0x11c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d05d      	beq.n	8008988 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088cc:	e02e      	b.n	800892c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ce:	4b34      	ldr	r3, [pc, #208]	; (80089a0 <xTaskResumeAll+0x120>)
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3318      	adds	r3, #24
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fe08 	bl	80074f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fe03 	bl	80074f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	2201      	movs	r2, #1
 80088f0:	409a      	lsls	r2, r3
 80088f2:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <xTaskResumeAll+0x124>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	4a2a      	ldr	r2, [pc, #168]	; (80089a4 <xTaskResumeAll+0x124>)
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4a27      	ldr	r2, [pc, #156]	; (80089a8 <xTaskResumeAll+0x128>)
 800890a:	441a      	add	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3304      	adds	r3, #4
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f7fe fd8f 	bl	8007436 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	4b23      	ldr	r3, [pc, #140]	; (80089ac <xTaskResumeAll+0x12c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	429a      	cmp	r2, r3
 8008924:	d302      	bcc.n	800892c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008926:	4b22      	ldr	r3, [pc, #136]	; (80089b0 <xTaskResumeAll+0x130>)
 8008928:	2201      	movs	r2, #1
 800892a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800892c:	4b1c      	ldr	r3, [pc, #112]	; (80089a0 <xTaskResumeAll+0x120>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1cc      	bne.n	80088ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800893a:	f000 fb3b 	bl	8008fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800893e:	4b1d      	ldr	r3, [pc, #116]	; (80089b4 <xTaskResumeAll+0x134>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d010      	beq.n	800896c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800894a:	f000 f859 	bl	8008a00 <xTaskIncrementTick>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008954:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <xTaskResumeAll+0x130>)
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3b01      	subs	r3, #1
 800895e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f1      	bne.n	800894a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008966:	4b13      	ldr	r3, [pc, #76]	; (80089b4 <xTaskResumeAll+0x134>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800896c:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <xTaskResumeAll+0x130>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d009      	beq.n	8008988 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008978:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <xTaskResumeAll+0x138>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008988:	f000 fea8 	bl	80096dc <vPortExitCritical>

	return xAlreadyYielded;
 800898c:	68bb      	ldr	r3, [r7, #8]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000420 	.word	0x20000420
 800899c:	200003f8 	.word	0x200003f8
 80089a0:	200003b8 	.word	0x200003b8
 80089a4:	20000400 	.word	0x20000400
 80089a8:	200002fc 	.word	0x200002fc
 80089ac:	200002f8 	.word	0x200002f8
 80089b0:	2000040c 	.word	0x2000040c
 80089b4:	20000408 	.word	0x20000408
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <xTaskGetTickCount+0x1c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089c8:	687b      	ldr	r3, [r7, #4]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	200003fc 	.word	0x200003fc

080089dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089e2:	f000 ff29 	bl	8009838 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80089e6:	2300      	movs	r3, #0
 80089e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80089ea:	4b04      	ldr	r3, [pc, #16]	; (80089fc <xTaskGetTickCountFromISR+0x20>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089f0:	683b      	ldr	r3, [r7, #0]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200003fc 	.word	0x200003fc

08008a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a06:	2300      	movs	r3, #0
 8008a08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0a:	4b4f      	ldr	r3, [pc, #316]	; (8008b48 <xTaskIncrementTick+0x148>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 8089 	bne.w	8008b26 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a14:	4b4d      	ldr	r3, [pc, #308]	; (8008b4c <xTaskIncrementTick+0x14c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a1c:	4a4b      	ldr	r2, [pc, #300]	; (8008b4c <xTaskIncrementTick+0x14c>)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d121      	bne.n	8008a6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a28:	4b49      	ldr	r3, [pc, #292]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00b      	beq.n	8008a4a <xTaskIncrementTick+0x4a>
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	b672      	cpsid	i
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	b662      	cpsie	i
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	e7fe      	b.n	8008a48 <xTaskIncrementTick+0x48>
 8008a4a:	4b41      	ldr	r3, [pc, #260]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	4b40      	ldr	r3, [pc, #256]	; (8008b54 <xTaskIncrementTick+0x154>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a3e      	ldr	r2, [pc, #248]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	4a3e      	ldr	r2, [pc, #248]	; (8008b54 <xTaskIncrementTick+0x154>)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	4b3e      	ldr	r3, [pc, #248]	; (8008b58 <xTaskIncrementTick+0x158>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3301      	adds	r3, #1
 8008a64:	4a3c      	ldr	r2, [pc, #240]	; (8008b58 <xTaskIncrementTick+0x158>)
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	f000 faa4 	bl	8008fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a6c:	4b3b      	ldr	r3, [pc, #236]	; (8008b5c <xTaskIncrementTick+0x15c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d348      	bcc.n	8008b08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a76:	4b36      	ldr	r3, [pc, #216]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a80:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <xTaskIncrementTick+0x15c>)
 8008a82:	f04f 32ff 	mov.w	r2, #4294967295
 8008a86:	601a      	str	r2, [r3, #0]
					break;
 8008a88:	e03e      	b.n	8008b08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a8a:	4b31      	ldr	r3, [pc, #196]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d203      	bcs.n	8008aaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008aa2:	4a2e      	ldr	r2, [pc, #184]	; (8008b5c <xTaskIncrementTick+0x15c>)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008aa8:	e02e      	b.n	8008b08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fd1e 	bl	80074f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	3318      	adds	r3, #24
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fd15 	bl	80074f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	2201      	movs	r2, #1
 8008acc:	409a      	lsls	r2, r3
 8008ace:	4b24      	ldr	r3, [pc, #144]	; (8008b60 <xTaskIncrementTick+0x160>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	4a22      	ldr	r2, [pc, #136]	; (8008b60 <xTaskIncrementTick+0x160>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4a1f      	ldr	r2, [pc, #124]	; (8008b64 <xTaskIncrementTick+0x164>)
 8008ae6:	441a      	add	r2, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fe fca1 	bl	8007436 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af8:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <xTaskIncrementTick+0x168>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d3b9      	bcc.n	8008a76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b02:	2301      	movs	r3, #1
 8008b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b06:	e7b6      	b.n	8008a76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b08:	4b17      	ldr	r3, [pc, #92]	; (8008b68 <xTaskIncrementTick+0x168>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0e:	4915      	ldr	r1, [pc, #84]	; (8008b64 <xTaskIncrementTick+0x164>)
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d907      	bls.n	8008b30 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	e004      	b.n	8008b30 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b26:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <xTaskIncrementTick+0x16c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	4a0f      	ldr	r2, [pc, #60]	; (8008b6c <xTaskIncrementTick+0x16c>)
 8008b2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b30:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <xTaskIncrementTick+0x170>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b3c:	697b      	ldr	r3, [r7, #20]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000420 	.word	0x20000420
 8008b4c:	200003fc 	.word	0x200003fc
 8008b50:	200003b0 	.word	0x200003b0
 8008b54:	200003b4 	.word	0x200003b4
 8008b58:	20000410 	.word	0x20000410
 8008b5c:	20000418 	.word	0x20000418
 8008b60:	20000400 	.word	0x20000400
 8008b64:	200002fc 	.word	0x200002fc
 8008b68:	200002f8 	.word	0x200002f8
 8008b6c:	20000408 	.word	0x20000408
 8008b70:	2000040c 	.word	0x2000040c

08008b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b7a:	4b27      	ldr	r3, [pc, #156]	; (8008c18 <vTaskSwitchContext+0xa4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b82:	4b26      	ldr	r3, [pc, #152]	; (8008c1c <vTaskSwitchContext+0xa8>)
 8008b84:	2201      	movs	r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b88:	e040      	b.n	8008c0c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008b8a:	4b24      	ldr	r3, [pc, #144]	; (8008c1c <vTaskSwitchContext+0xa8>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b90:	4b23      	ldr	r3, [pc, #140]	; (8008c20 <vTaskSwitchContext+0xac>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	fab3 f383 	clz	r3, r3
 8008b9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	f1c3 031f 	rsb	r3, r3, #31
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	491f      	ldr	r1, [pc, #124]	; (8008c24 <vTaskSwitchContext+0xb0>)
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	440b      	add	r3, r1
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	b672      	cpsid	i
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	b662      	cpsie	i
 8008bce:	607b      	str	r3, [r7, #4]
 8008bd0:	e7fe      	b.n	8008bd0 <vTaskSwitchContext+0x5c>
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4a11      	ldr	r2, [pc, #68]	; (8008c24 <vTaskSwitchContext+0xb0>)
 8008bde:	4413      	add	r3, r2
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	605a      	str	r2, [r3, #4]
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d104      	bne.n	8008c02 <vTaskSwitchContext+0x8e>
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	605a      	str	r2, [r3, #4]
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	4a07      	ldr	r2, [pc, #28]	; (8008c28 <vTaskSwitchContext+0xb4>)
 8008c0a:	6013      	str	r3, [r2, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	371c      	adds	r7, #28
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	20000420 	.word	0x20000420
 8008c1c:	2000040c 	.word	0x2000040c
 8008c20:	20000400 	.word	0x20000400
 8008c24:	200002fc 	.word	0x200002fc
 8008c28:	200002f8 	.word	0x200002f8

08008c2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10b      	bne.n	8008c54 <vTaskPlaceOnEventList+0x28>
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	b672      	cpsid	i
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	b662      	cpsie	i
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e7fe      	b.n	8008c52 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c54:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <vTaskPlaceOnEventList+0x48>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3318      	adds	r3, #24
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7fe fc0e 	bl	800747e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c62:	2101      	movs	r1, #1
 8008c64:	6838      	ldr	r0, [r7, #0]
 8008c66:	f000 fb9b 	bl	80093a0 <prvAddCurrentTaskToDelayedList>
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	200002f8 	.word	0x200002f8

08008c78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10b      	bne.n	8008ca6 <xTaskRemoveFromEventList+0x2e>
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	b672      	cpsid	i
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	b662      	cpsie	i
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	e7fe      	b.n	8008ca4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	3318      	adds	r3, #24
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe fc20 	bl	80074f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cb0:	4b1d      	ldr	r3, [pc, #116]	; (8008d28 <xTaskRemoveFromEventList+0xb0>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d11c      	bne.n	8008cf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fc17 	bl	80074f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	409a      	lsls	r2, r3
 8008cca:	4b18      	ldr	r3, [pc, #96]	; (8008d2c <xTaskRemoveFromEventList+0xb4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	4a16      	ldr	r2, [pc, #88]	; (8008d2c <xTaskRemoveFromEventList+0xb4>)
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4a13      	ldr	r2, [pc, #76]	; (8008d30 <xTaskRemoveFromEventList+0xb8>)
 8008ce2:	441a      	add	r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f7fe fba3 	bl	8007436 <vListInsertEnd>
 8008cf0:	e005      	b.n	8008cfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	3318      	adds	r3, #24
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	480e      	ldr	r0, [pc, #56]	; (8008d34 <xTaskRemoveFromEventList+0xbc>)
 8008cfa:	f7fe fb9c 	bl	8007436 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d02:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <xTaskRemoveFromEventList+0xc0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d905      	bls.n	8008d18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <xTaskRemoveFromEventList+0xc4>)
 8008d12:	2201      	movs	r2, #1
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e001      	b.n	8008d1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d1c:	697b      	ldr	r3, [r7, #20]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20000420 	.word	0x20000420
 8008d2c:	20000400 	.word	0x20000400
 8008d30:	200002fc 	.word	0x200002fc
 8008d34:	200003b8 	.word	0x200003b8
 8008d38:	200002f8 	.word	0x200002f8
 8008d3c:	2000040c 	.word	0x2000040c

08008d40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d48:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <vTaskInternalSetTimeOutState+0x24>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <vTaskInternalSetTimeOutState+0x28>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	605a      	str	r2, [r3, #4]
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	20000410 	.word	0x20000410
 8008d68:	200003fc 	.word	0x200003fc

08008d6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10b      	bne.n	8008d94 <xTaskCheckForTimeOut+0x28>
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	e7fe      	b.n	8008d92 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10b      	bne.n	8008db2 <xTaskCheckForTimeOut+0x46>
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	b672      	cpsid	i
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	b662      	cpsie	i
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	e7fe      	b.n	8008db0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008db2:	f000 fc61 	bl	8009678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008db6:	4b1d      	ldr	r3, [pc, #116]	; (8008e2c <xTaskCheckForTimeOut+0xc0>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d102      	bne.n	8008dd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	e023      	b.n	8008e1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	4b15      	ldr	r3, [pc, #84]	; (8008e30 <xTaskCheckForTimeOut+0xc4>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d007      	beq.n	8008df2 <xTaskCheckForTimeOut+0x86>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d302      	bcc.n	8008df2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dec:	2301      	movs	r3, #1
 8008dee:	61fb      	str	r3, [r7, #28]
 8008df0:	e015      	b.n	8008e1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d20b      	bcs.n	8008e14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	1ad2      	subs	r2, r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7ff ff99 	bl	8008d40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	e004      	b.n	8008e1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e1e:	f000 fc5d 	bl	80096dc <vPortExitCritical>

	return xReturn;
 8008e22:	69fb      	ldr	r3, [r7, #28]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3720      	adds	r7, #32
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	200003fc 	.word	0x200003fc
 8008e30:	20000410 	.word	0x20000410

08008e34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e38:	4b03      	ldr	r3, [pc, #12]	; (8008e48 <vTaskMissedYield+0x14>)
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]
}
 8008e3e:	bf00      	nop
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	2000040c 	.word	0x2000040c

08008e4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e54:	f000 f852 	bl	8008efc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e58:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <prvIdleTask+0x28>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d9f9      	bls.n	8008e54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e60:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <prvIdleTask+0x2c>)
 8008e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e70:	e7f0      	b.n	8008e54 <prvIdleTask+0x8>
 8008e72:	bf00      	nop
 8008e74:	200002fc 	.word	0x200002fc
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
 8008e86:	e00c      	b.n	8008ea2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4a12      	ldr	r2, [pc, #72]	; (8008edc <prvInitialiseTaskLists+0x60>)
 8008e94:	4413      	add	r3, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe faa0 	bl	80073dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	607b      	str	r3, [r7, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b06      	cmp	r3, #6
 8008ea6:	d9ef      	bls.n	8008e88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ea8:	480d      	ldr	r0, [pc, #52]	; (8008ee0 <prvInitialiseTaskLists+0x64>)
 8008eaa:	f7fe fa97 	bl	80073dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eae:	480d      	ldr	r0, [pc, #52]	; (8008ee4 <prvInitialiseTaskLists+0x68>)
 8008eb0:	f7fe fa94 	bl	80073dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008eb4:	480c      	ldr	r0, [pc, #48]	; (8008ee8 <prvInitialiseTaskLists+0x6c>)
 8008eb6:	f7fe fa91 	bl	80073dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008eba:	480c      	ldr	r0, [pc, #48]	; (8008eec <prvInitialiseTaskLists+0x70>)
 8008ebc:	f7fe fa8e 	bl	80073dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ec0:	480b      	ldr	r0, [pc, #44]	; (8008ef0 <prvInitialiseTaskLists+0x74>)
 8008ec2:	f7fe fa8b 	bl	80073dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <prvInitialiseTaskLists+0x78>)
 8008ec8:	4a05      	ldr	r2, [pc, #20]	; (8008ee0 <prvInitialiseTaskLists+0x64>)
 8008eca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <prvInitialiseTaskLists+0x7c>)
 8008ece:	4a05      	ldr	r2, [pc, #20]	; (8008ee4 <prvInitialiseTaskLists+0x68>)
 8008ed0:	601a      	str	r2, [r3, #0]
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	200002fc 	.word	0x200002fc
 8008ee0:	20000388 	.word	0x20000388
 8008ee4:	2000039c 	.word	0x2000039c
 8008ee8:	200003b8 	.word	0x200003b8
 8008eec:	200003cc 	.word	0x200003cc
 8008ef0:	200003e4 	.word	0x200003e4
 8008ef4:	200003b0 	.word	0x200003b0
 8008ef8:	200003b4 	.word	0x200003b4

08008efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f02:	e019      	b.n	8008f38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f04:	f000 fbb8 	bl	8009678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f08:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <prvCheckTasksWaitingTermination+0x4c>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe faeb 	bl	80074f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <prvCheckTasksWaitingTermination+0x50>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <prvCheckTasksWaitingTermination+0x50>)
 8008f22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f24:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <prvCheckTasksWaitingTermination+0x54>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <prvCheckTasksWaitingTermination+0x54>)
 8008f2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f2e:	f000 fbd5 	bl	80096dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f80e 	bl	8008f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <prvCheckTasksWaitingTermination+0x54>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e1      	bne.n	8008f04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	200003cc 	.word	0x200003cc
 8008f4c:	200003f8 	.word	0x200003f8
 8008f50:	200003e0 	.word	0x200003e0

08008f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d108      	bne.n	8008f78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fd6e 	bl	8009a4c <vPortFree>
				vPortFree( pxTCB );
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fd6b 	bl	8009a4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f76:	e019      	b.n	8008fac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d103      	bne.n	8008f8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fd62 	bl	8009a4c <vPortFree>
	}
 8008f88:	e010      	b.n	8008fac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d00b      	beq.n	8008fac <prvDeleteTCB+0x58>
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	b672      	cpsid	i
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	b662      	cpsie	i
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	e7fe      	b.n	8008faa <prvDeleteTCB+0x56>
	}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fba:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <prvResetNextTaskUnblockTime+0x38>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d104      	bne.n	8008fce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8008fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fcc:	e008      	b.n	8008fe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fce:	4b07      	ldr	r3, [pc, #28]	; (8008fec <prvResetNextTaskUnblockTime+0x38>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	4a04      	ldr	r2, [pc, #16]	; (8008ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8008fde:	6013      	str	r3, [r2, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	200003b0 	.word	0x200003b0
 8008ff0:	20000418 	.word	0x20000418

08008ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <xTaskGetSchedulerState+0x34>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d102      	bne.n	8009008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009002:	2301      	movs	r3, #1
 8009004:	607b      	str	r3, [r7, #4]
 8009006:	e008      	b.n	800901a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009008:	4b08      	ldr	r3, [pc, #32]	; (800902c <xTaskGetSchedulerState+0x38>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d102      	bne.n	8009016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009010:	2302      	movs	r3, #2
 8009012:	607b      	str	r3, [r7, #4]
 8009014:	e001      	b.n	800901a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009016:	2300      	movs	r3, #0
 8009018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800901a:	687b      	ldr	r3, [r7, #4]
	}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	20000404 	.word	0x20000404
 800902c:	20000420 	.word	0x20000420

08009030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d069      	beq.n	800911a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904a:	4b36      	ldr	r3, [pc, #216]	; (8009124 <xTaskPriorityInherit+0xf4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	429a      	cmp	r2, r3
 8009052:	d259      	bcs.n	8009108 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	db06      	blt.n	800906a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800905c:	4b31      	ldr	r3, [pc, #196]	; (8009124 <xTaskPriorityInherit+0xf4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009062:	f1c3 0207 	rsb	r2, r3, #7
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6959      	ldr	r1, [r3, #20]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4a2b      	ldr	r2, [pc, #172]	; (8009128 <xTaskPriorityInherit+0xf8>)
 800907c:	4413      	add	r3, r2
 800907e:	4299      	cmp	r1, r3
 8009080:	d13a      	bne.n	80090f8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	3304      	adds	r3, #4
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe fa32 	bl	80074f0 <uxListRemove>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d115      	bne.n	80090be <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009096:	4924      	ldr	r1, [pc, #144]	; (8009128 <xTaskPriorityInherit+0xf8>)
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <xTaskPriorityInherit+0x8e>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	2201      	movs	r2, #1
 80090ae:	fa02 f303 	lsl.w	r3, r2, r3
 80090b2:	43da      	mvns	r2, r3
 80090b4:	4b1d      	ldr	r3, [pc, #116]	; (800912c <xTaskPriorityInherit+0xfc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4013      	ands	r3, r2
 80090ba:	4a1c      	ldr	r2, [pc, #112]	; (800912c <xTaskPriorityInherit+0xfc>)
 80090bc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090be:	4b19      	ldr	r3, [pc, #100]	; (8009124 <xTaskPriorityInherit+0xf4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	2201      	movs	r2, #1
 80090ce:	409a      	lsls	r2, r3
 80090d0:	4b16      	ldr	r3, [pc, #88]	; (800912c <xTaskPriorityInherit+0xfc>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	4a15      	ldr	r2, [pc, #84]	; (800912c <xTaskPriorityInherit+0xfc>)
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4a10      	ldr	r2, [pc, #64]	; (8009128 <xTaskPriorityInherit+0xf8>)
 80090e8:	441a      	add	r2, r3
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f7fe f9a0 	bl	8007436 <vListInsertEnd>
 80090f6:	e004      	b.n	8009102 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <xTaskPriorityInherit+0xf4>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009102:	2301      	movs	r3, #1
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	e008      	b.n	800911a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <xTaskPriorityInherit+0xf4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	429a      	cmp	r2, r3
 8009114:	d201      	bcs.n	800911a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009116:	2301      	movs	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800911a:	68fb      	ldr	r3, [r7, #12]
	}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	200002f8 	.word	0x200002f8
 8009128:	200002fc 	.word	0x200002fc
 800912c:	20000400 	.word	0x20000400

08009130 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800913c:	2300      	movs	r3, #0
 800913e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d070      	beq.n	8009228 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009146:	4b3b      	ldr	r3, [pc, #236]	; (8009234 <xTaskPriorityDisinherit+0x104>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	429a      	cmp	r2, r3
 800914e:	d00b      	beq.n	8009168 <xTaskPriorityDisinherit+0x38>
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	b672      	cpsid	i
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	b662      	cpsie	i
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e7fe      	b.n	8009166 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10b      	bne.n	8009188 <xTaskPriorityDisinherit+0x58>
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	b672      	cpsid	i
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	b662      	cpsie	i
 8009184:	60bb      	str	r3, [r7, #8]
 8009186:	e7fe      	b.n	8009186 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800919a:	429a      	cmp	r2, r3
 800919c:	d044      	beq.n	8009228 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d140      	bne.n	8009228 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe f9a0 	bl	80074f0 <uxListRemove>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d115      	bne.n	80091e2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ba:	491f      	ldr	r1, [pc, #124]	; (8009238 <xTaskPriorityDisinherit+0x108>)
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <xTaskPriorityDisinherit+0xb2>
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	2201      	movs	r2, #1
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	43da      	mvns	r2, r3
 80091d8:	4b18      	ldr	r3, [pc, #96]	; (800923c <xTaskPriorityDisinherit+0x10c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4013      	ands	r3, r2
 80091de:	4a17      	ldr	r2, [pc, #92]	; (800923c <xTaskPriorityDisinherit+0x10c>)
 80091e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	f1c3 0207 	rsb	r2, r3, #7
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	2201      	movs	r2, #1
 80091fc:	409a      	lsls	r2, r3
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <xTaskPriorityDisinherit+0x10c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4313      	orrs	r3, r2
 8009204:	4a0d      	ldr	r2, [pc, #52]	; (800923c <xTaskPriorityDisinherit+0x10c>)
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4a08      	ldr	r2, [pc, #32]	; (8009238 <xTaskPriorityDisinherit+0x108>)
 8009216:	441a      	add	r2, r3
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7fe f909 	bl	8007436 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009228:	697b      	ldr	r3, [r7, #20]
	}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	200002f8 	.word	0x200002f8
 8009238:	200002fc 	.word	0x200002fc
 800923c:	20000400 	.word	0x20000400

08009240 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800924e:	2301      	movs	r3, #1
 8009250:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 8085 	beq.w	8009364 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10b      	bne.n	800927a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	b672      	cpsid	i
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	b662      	cpsie	i
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	e7fe      	b.n	8009278 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d902      	bls.n	800928a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	61fb      	str	r3, [r7, #28]
 8009288:	e002      	b.n	8009290 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	429a      	cmp	r2, r3
 8009298:	d064      	beq.n	8009364 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d15f      	bne.n	8009364 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092a4:	4b31      	ldr	r3, [pc, #196]	; (800936c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d10b      	bne.n	80092c6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	b672      	cpsid	i
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	b662      	cpsie	i
 80092c2:	60bb      	str	r3, [r7, #8]
 80092c4:	e7fe      	b.n	80092c4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	db04      	blt.n	80092e4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	f1c3 0207 	rsb	r2, r3, #7
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	6959      	ldr	r1, [r3, #20]
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4a1f      	ldr	r2, [pc, #124]	; (8009370 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80092f4:	4413      	add	r3, r2
 80092f6:	4299      	cmp	r1, r3
 80092f8:	d134      	bne.n	8009364 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe f8f6 	bl	80074f0 <uxListRemove>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d115      	bne.n	8009336 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930e:	4918      	ldr	r1, [pc, #96]	; (8009370 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	2201      	movs	r2, #1
 8009326:	fa02 f303 	lsl.w	r3, r2, r3
 800932a:	43da      	mvns	r2, r3
 800932c:	4b11      	ldr	r3, [pc, #68]	; (8009374 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4013      	ands	r3, r2
 8009332:	4a10      	ldr	r2, [pc, #64]	; (8009374 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009334:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933a:	2201      	movs	r2, #1
 800933c:	409a      	lsls	r2, r3
 800933e:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4313      	orrs	r3, r2
 8009344:	4a0b      	ldr	r2, [pc, #44]	; (8009374 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934c:	4613      	mov	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4a06      	ldr	r2, [pc, #24]	; (8009370 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009356:	441a      	add	r2, r3
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	3304      	adds	r3, #4
 800935c:	4619      	mov	r1, r3
 800935e:	4610      	mov	r0, r2
 8009360:	f7fe f869 	bl	8007436 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009364:	bf00      	nop
 8009366:	3720      	adds	r7, #32
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	200002f8 	.word	0x200002f8
 8009370:	200002fc 	.word	0x200002fc
 8009374:	20000400 	.word	0x20000400

08009378 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800937c:	4b07      	ldr	r3, [pc, #28]	; (800939c <pvTaskIncrementMutexHeldCount+0x24>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009384:	4b05      	ldr	r3, [pc, #20]	; (800939c <pvTaskIncrementMutexHeldCount+0x24>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800938a:	3201      	adds	r2, #1
 800938c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800938e:	4b03      	ldr	r3, [pc, #12]	; (800939c <pvTaskIncrementMutexHeldCount+0x24>)
 8009390:	681b      	ldr	r3, [r3, #0]
	}
 8009392:	4618      	mov	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	200002f8 	.word	0x200002f8

080093a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093aa:	4b29      	ldr	r3, [pc, #164]	; (8009450 <prvAddCurrentTaskToDelayedList+0xb0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093b0:	4b28      	ldr	r3, [pc, #160]	; (8009454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe f89a 	bl	80074f0 <uxListRemove>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10b      	bne.n	80093da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	2201      	movs	r2, #1
 80093ca:	fa02 f303 	lsl.w	r3, r2, r3
 80093ce:	43da      	mvns	r2, r3
 80093d0:	4b21      	ldr	r3, [pc, #132]	; (8009458 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4013      	ands	r3, r2
 80093d6:	4a20      	ldr	r2, [pc, #128]	; (8009458 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e0:	d10a      	bne.n	80093f8 <prvAddCurrentTaskToDelayedList+0x58>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d007      	beq.n	80093f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093e8:	4b1a      	ldr	r3, [pc, #104]	; (8009454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4619      	mov	r1, r3
 80093f0:	481a      	ldr	r0, [pc, #104]	; (800945c <prvAddCurrentTaskToDelayedList+0xbc>)
 80093f2:	f7fe f820 	bl	8007436 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093f6:	e026      	b.n	8009446 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009400:	4b14      	ldr	r3, [pc, #80]	; (8009454 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	429a      	cmp	r2, r3
 800940e:	d209      	bcs.n	8009424 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009410:	4b13      	ldr	r3, [pc, #76]	; (8009460 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3304      	adds	r3, #4
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7fe f82e 	bl	800747e <vListInsert>
}
 8009422:	e010      	b.n	8009446 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009424:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7fe f824 	bl	800747e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009436:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	429a      	cmp	r2, r3
 800943e:	d202      	bcs.n	8009446 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009440:	4a09      	ldr	r2, [pc, #36]	; (8009468 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	6013      	str	r3, [r2, #0]
}
 8009446:	bf00      	nop
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	200003fc 	.word	0x200003fc
 8009454:	200002f8 	.word	0x200002f8
 8009458:	20000400 	.word	0x20000400
 800945c:	200003e4 	.word	0x200003e4
 8009460:	200003b4 	.word	0x200003b4
 8009464:	200003b0 	.word	0x200003b0
 8009468:	20000418 	.word	0x20000418

0800946c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3b04      	subs	r3, #4
 800947c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3b04      	subs	r3, #4
 800948a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f023 0201 	bic.w	r2, r3, #1
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3b04      	subs	r3, #4
 800949a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800949c:	4a0c      	ldr	r2, [pc, #48]	; (80094d0 <pxPortInitialiseStack+0x64>)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3b14      	subs	r3, #20
 80094a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3b04      	subs	r3, #4
 80094b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f06f 0202 	mvn.w	r2, #2
 80094ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3b20      	subs	r3, #32
 80094c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094c2:	68fb      	ldr	r3, [r7, #12]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	080094d5 	.word	0x080094d5

080094d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094de:	4b13      	ldr	r3, [pc, #76]	; (800952c <prvTaskExitError+0x58>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e6:	d00b      	beq.n	8009500 <prvTaskExitError+0x2c>
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	b672      	cpsid	i
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	b662      	cpsie	i
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e7fe      	b.n	80094fe <prvTaskExitError+0x2a>
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	b672      	cpsid	i
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	b662      	cpsie	i
 8009514:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009516:	bf00      	nop
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0fc      	beq.n	8009518 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	2000000c 	.word	0x2000000c

08009530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009530:	4b07      	ldr	r3, [pc, #28]	; (8009550 <pxCurrentTCBConst2>)
 8009532:	6819      	ldr	r1, [r3, #0]
 8009534:	6808      	ldr	r0, [r1, #0]
 8009536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953a:	f380 8809 	msr	PSP, r0
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f04f 0000 	mov.w	r0, #0
 8009546:	f380 8811 	msr	BASEPRI, r0
 800954a:	4770      	bx	lr
 800954c:	f3af 8000 	nop.w

08009550 <pxCurrentTCBConst2>:
 8009550:	200002f8 	.word	0x200002f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop

08009558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009558:	4808      	ldr	r0, [pc, #32]	; (800957c <prvPortStartFirstTask+0x24>)
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	6800      	ldr	r0, [r0, #0]
 800955e:	f380 8808 	msr	MSP, r0
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8814 	msr	CONTROL, r0
 800956a:	b662      	cpsie	i
 800956c:	b661      	cpsie	f
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	df00      	svc	0
 8009578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800957a:	bf00      	nop
 800957c:	e000ed08 	.word	0xe000ed08

08009580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009586:	4b36      	ldr	r3, [pc, #216]	; (8009660 <xPortStartScheduler+0xe0>)
 8009588:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	22ff      	movs	r2, #255	; 0xff
 8009596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	4b2e      	ldr	r3, [pc, #184]	; (8009664 <xPortStartScheduler+0xe4>)
 80095ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095ae:	4b2e      	ldr	r3, [pc, #184]	; (8009668 <xPortStartScheduler+0xe8>)
 80095b0:	2207      	movs	r2, #7
 80095b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095b4:	e009      	b.n	80095ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80095b6:	4b2c      	ldr	r3, [pc, #176]	; (8009668 <xPortStartScheduler+0xe8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	4a2a      	ldr	r2, [pc, #168]	; (8009668 <xPortStartScheduler+0xe8>)
 80095be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d2:	2b80      	cmp	r3, #128	; 0x80
 80095d4:	d0ef      	beq.n	80095b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <xPortStartScheduler+0xe8>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f1c3 0307 	rsb	r3, r3, #7
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d00b      	beq.n	80095fa <xPortStartScheduler+0x7a>
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	b672      	cpsid	i
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	b662      	cpsie	i
 80095f6:	60bb      	str	r3, [r7, #8]
 80095f8:	e7fe      	b.n	80095f8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095fa:	4b1b      	ldr	r3, [pc, #108]	; (8009668 <xPortStartScheduler+0xe8>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	021b      	lsls	r3, r3, #8
 8009600:	4a19      	ldr	r2, [pc, #100]	; (8009668 <xPortStartScheduler+0xe8>)
 8009602:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009604:	4b18      	ldr	r3, [pc, #96]	; (8009668 <xPortStartScheduler+0xe8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800960c:	4a16      	ldr	r2, [pc, #88]	; (8009668 <xPortStartScheduler+0xe8>)
 800960e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	b2da      	uxtb	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009618:	4b14      	ldr	r3, [pc, #80]	; (800966c <xPortStartScheduler+0xec>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a13      	ldr	r2, [pc, #76]	; (800966c <xPortStartScheduler+0xec>)
 800961e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009622:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009624:	4b11      	ldr	r3, [pc, #68]	; (800966c <xPortStartScheduler+0xec>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a10      	ldr	r2, [pc, #64]	; (800966c <xPortStartScheduler+0xec>)
 800962a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800962e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009630:	f000 f8d4 	bl	80097dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009634:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <xPortStartScheduler+0xf0>)
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800963a:	f000 f8f3 	bl	8009824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800963e:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <xPortStartScheduler+0xf4>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a0c      	ldr	r2, [pc, #48]	; (8009674 <xPortStartScheduler+0xf4>)
 8009644:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009648:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800964a:	f7ff ff85 	bl	8009558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800964e:	f7ff fa91 	bl	8008b74 <vTaskSwitchContext>
	prvTaskExitError();
 8009652:	f7ff ff3f 	bl	80094d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	e000e400 	.word	0xe000e400
 8009664:	20000424 	.word	0x20000424
 8009668:	20000428 	.word	0x20000428
 800966c:	e000ed20 	.word	0xe000ed20
 8009670:	2000000c 	.word	0x2000000c
 8009674:	e000ef34 	.word	0xe000ef34

08009678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	b672      	cpsid	i
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	b662      	cpsie	i
 8009692:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009694:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <vPortEnterCritical+0x5c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3301      	adds	r3, #1
 800969a:	4a0e      	ldr	r2, [pc, #56]	; (80096d4 <vPortEnterCritical+0x5c>)
 800969c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800969e:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <vPortEnterCritical+0x5c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d110      	bne.n	80096c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096a6:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <vPortEnterCritical+0x60>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <vPortEnterCritical+0x50>
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	b672      	cpsid	i
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	b662      	cpsie	i
 80096c4:	603b      	str	r3, [r7, #0]
 80096c6:	e7fe      	b.n	80096c6 <vPortEnterCritical+0x4e>
	}
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	2000000c 	.word	0x2000000c
 80096d8:	e000ed04 	.word	0xe000ed04

080096dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096e2:	4b12      	ldr	r3, [pc, #72]	; (800972c <vPortExitCritical+0x50>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10b      	bne.n	8009702 <vPortExitCritical+0x26>
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	b672      	cpsid	i
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	b662      	cpsie	i
 80096fe:	607b      	str	r3, [r7, #4]
 8009700:	e7fe      	b.n	8009700 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <vPortExitCritical+0x50>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3b01      	subs	r3, #1
 8009708:	4a08      	ldr	r2, [pc, #32]	; (800972c <vPortExitCritical+0x50>)
 800970a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800970c:	4b07      	ldr	r3, [pc, #28]	; (800972c <vPortExitCritical+0x50>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <vPortExitCritical+0x42>
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	2000000c 	.word	0x2000000c

08009730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009730:	f3ef 8009 	mrs	r0, PSP
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	4b15      	ldr	r3, [pc, #84]	; (8009790 <pxCurrentTCBConst>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	f01e 0f10 	tst.w	lr, #16
 8009740:	bf08      	it	eq
 8009742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	6010      	str	r0, [r2, #0]
 800974c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009754:	b672      	cpsid	i
 8009756:	f380 8811 	msr	BASEPRI, r0
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	b662      	cpsie	i
 8009764:	f7ff fa06 	bl	8008b74 <vTaskSwitchContext>
 8009768:	f04f 0000 	mov.w	r0, #0
 800976c:	f380 8811 	msr	BASEPRI, r0
 8009770:	bc09      	pop	{r0, r3}
 8009772:	6819      	ldr	r1, [r3, #0]
 8009774:	6808      	ldr	r0, [r1, #0]
 8009776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977a:	f01e 0f10 	tst.w	lr, #16
 800977e:	bf08      	it	eq
 8009780:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009784:	f380 8809 	msr	PSP, r0
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop

08009790 <pxCurrentTCBConst>:
 8009790:	200002f8 	.word	0x200002f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop

08009798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	b672      	cpsid	i
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	b662      	cpsie	i
 80097b2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097b4:	f7ff f924 	bl	8008a00 <xTaskIncrementTick>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097be:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <SysTick_Handler+0x40>)
 80097c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	2300      	movs	r3, #0
 80097c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	e000ed04 	.word	0xe000ed04

080097dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <vPortSetupTimerInterrupt+0x34>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097e6:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <vPortSetupTimerInterrupt+0x38>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ec:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <vPortSetupTimerInterrupt+0x3c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a0a      	ldr	r2, [pc, #40]	; (800981c <vPortSetupTimerInterrupt+0x40>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	099b      	lsrs	r3, r3, #6
 80097f8:	4a09      	ldr	r2, [pc, #36]	; (8009820 <vPortSetupTimerInterrupt+0x44>)
 80097fa:	3b01      	subs	r3, #1
 80097fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097fe:	4b04      	ldr	r3, [pc, #16]	; (8009810 <vPortSetupTimerInterrupt+0x34>)
 8009800:	2207      	movs	r2, #7
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	e000e010 	.word	0xe000e010
 8009814:	e000e018 	.word	0xe000e018
 8009818:	20000000 	.word	0x20000000
 800981c:	10624dd3 	.word	0x10624dd3
 8009820:	e000e014 	.word	0xe000e014

08009824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009834 <vPortEnableVFP+0x10>
 8009828:	6801      	ldr	r1, [r0, #0]
 800982a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800982e:	6001      	str	r1, [r0, #0]
 8009830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009832:	bf00      	nop
 8009834:	e000ed88 	.word	0xe000ed88

08009838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800983e:	f3ef 8305 	mrs	r3, IPSR
 8009842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b0f      	cmp	r3, #15
 8009848:	d915      	bls.n	8009876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800984a:	4a18      	ldr	r2, [pc, #96]	; (80098ac <vPortValidateInterruptPriority+0x74>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4413      	add	r3, r2
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009854:	4b16      	ldr	r3, [pc, #88]	; (80098b0 <vPortValidateInterruptPriority+0x78>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	7afa      	ldrb	r2, [r7, #11]
 800985a:	429a      	cmp	r2, r3
 800985c:	d20b      	bcs.n	8009876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	b672      	cpsid	i
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	b662      	cpsie	i
 8009872:	607b      	str	r3, [r7, #4]
 8009874:	e7fe      	b.n	8009874 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009876:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <vPortValidateInterruptPriority+0x7c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800987e:	4b0e      	ldr	r3, [pc, #56]	; (80098b8 <vPortValidateInterruptPriority+0x80>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d90b      	bls.n	800989e <vPortValidateInterruptPriority+0x66>
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	b672      	cpsid	i
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	b662      	cpsie	i
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	e7fe      	b.n	800989c <vPortValidateInterruptPriority+0x64>
	}
 800989e:	bf00      	nop
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	e000e3f0 	.word	0xe000e3f0
 80098b0:	20000424 	.word	0x20000424
 80098b4:	e000ed0c 	.word	0xe000ed0c
 80098b8:	20000428 	.word	0x20000428

080098bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08a      	sub	sp, #40	; 0x28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098c8:	f7fe ffcc 	bl	8008864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098cc:	4b5a      	ldr	r3, [pc, #360]	; (8009a38 <pvPortMalloc+0x17c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098d4:	f000 f916 	bl	8009b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098d8:	4b58      	ldr	r3, [pc, #352]	; (8009a3c <pvPortMalloc+0x180>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4013      	ands	r3, r2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f040 8090 	bne.w	8009a06 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d01e      	beq.n	800992a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80098ec:	2208      	movs	r2, #8
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4413      	add	r3, r2
 80098f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d015      	beq.n	800992a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f023 0307 	bic.w	r3, r3, #7
 8009904:	3308      	adds	r3, #8
 8009906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <pvPortMalloc+0x6e>
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	b672      	cpsid	i
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	b662      	cpsie	i
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e7fe      	b.n	8009928 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d06a      	beq.n	8009a06 <pvPortMalloc+0x14a>
 8009930:	4b43      	ldr	r3, [pc, #268]	; (8009a40 <pvPortMalloc+0x184>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	429a      	cmp	r2, r3
 8009938:	d865      	bhi.n	8009a06 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800993a:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <pvPortMalloc+0x188>)
 800993c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800993e:	4b41      	ldr	r3, [pc, #260]	; (8009a44 <pvPortMalloc+0x188>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009944:	e004      	b.n	8009950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	d903      	bls.n	8009962 <pvPortMalloc+0xa6>
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1f1      	bne.n	8009946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009962:	4b35      	ldr	r3, [pc, #212]	; (8009a38 <pvPortMalloc+0x17c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009968:	429a      	cmp	r2, r3
 800996a:	d04c      	beq.n	8009a06 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2208      	movs	r2, #8
 8009972:	4413      	add	r3, r2
 8009974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	1ad2      	subs	r2, r2, r3
 8009986:	2308      	movs	r3, #8
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	429a      	cmp	r2, r3
 800998c:	d920      	bls.n	80099d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800998e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4413      	add	r3, r2
 8009994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <pvPortMalloc+0xfc>
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	b672      	cpsid	i
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	b662      	cpsie	i
 80099b4:	613b      	str	r3, [r7, #16]
 80099b6:	e7fe      	b.n	80099b6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099ca:	69b8      	ldr	r0, [r7, #24]
 80099cc:	f000 f8fc 	bl	8009bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099d0:	4b1b      	ldr	r3, [pc, #108]	; (8009a40 <pvPortMalloc+0x184>)
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	4a19      	ldr	r2, [pc, #100]	; (8009a40 <pvPortMalloc+0x184>)
 80099dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099de:	4b18      	ldr	r3, [pc, #96]	; (8009a40 <pvPortMalloc+0x184>)
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	4b19      	ldr	r3, [pc, #100]	; (8009a48 <pvPortMalloc+0x18c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d203      	bcs.n	80099f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099ea:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <pvPortMalloc+0x184>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a16      	ldr	r2, [pc, #88]	; (8009a48 <pvPortMalloc+0x18c>)
 80099f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <pvPortMalloc+0x180>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	431a      	orrs	r2, r3
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a06:	f7fe ff3b 	bl	8008880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	f003 0307 	and.w	r3, r3, #7
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <pvPortMalloc+0x170>
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	b672      	cpsid	i
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	b662      	cpsie	i
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e7fe      	b.n	8009a2a <pvPortMalloc+0x16e>
	return pvReturn;
 8009a2c:	69fb      	ldr	r3, [r7, #28]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3728      	adds	r7, #40	; 0x28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	2000ee94 	.word	0x2000ee94
 8009a3c:	2000eea0 	.word	0x2000eea0
 8009a40:	2000ee98 	.word	0x2000ee98
 8009a44:	2000ee8c 	.word	0x2000ee8c
 8009a48:	2000ee9c 	.word	0x2000ee9c

08009a4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d04a      	beq.n	8009af4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a5e:	2308      	movs	r3, #8
 8009a60:	425b      	negs	r3, r3
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	4413      	add	r3, r2
 8009a66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	4b22      	ldr	r3, [pc, #136]	; (8009afc <vPortFree+0xb0>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4013      	ands	r3, r2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <vPortFree+0x46>
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	b672      	cpsid	i
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	b662      	cpsie	i
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	e7fe      	b.n	8009a90 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00b      	beq.n	8009ab2 <vPortFree+0x66>
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	b672      	cpsid	i
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	b662      	cpsie	i
 8009aae:	60bb      	str	r3, [r7, #8]
 8009ab0:	e7fe      	b.n	8009ab0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	4b11      	ldr	r3, [pc, #68]	; (8009afc <vPortFree+0xb0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d019      	beq.n	8009af4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d115      	bne.n	8009af4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <vPortFree+0xb0>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ad8:	f7fe fec4 	bl	8008864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <vPortFree+0xb4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	4a06      	ldr	r2, [pc, #24]	; (8009b00 <vPortFree+0xb4>)
 8009ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009aea:	6938      	ldr	r0, [r7, #16]
 8009aec:	f000 f86c 	bl	8009bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009af0:	f7fe fec6 	bl	8008880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009af4:	bf00      	nop
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	2000eea0 	.word	0x2000eea0
 8009b00:	2000ee98 	.word	0x2000ee98

08009b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b10:	4b27      	ldr	r3, [pc, #156]	; (8009bb0 <prvHeapInit+0xac>)
 8009b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00c      	beq.n	8009b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3307      	adds	r3, #7
 8009b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	4a1f      	ldr	r2, [pc, #124]	; (8009bb0 <prvHeapInit+0xac>)
 8009b34:	4413      	add	r3, r2
 8009b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b3c:	4a1d      	ldr	r2, [pc, #116]	; (8009bb4 <prvHeapInit+0xb0>)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b42:	4b1c      	ldr	r3, [pc, #112]	; (8009bb4 <prvHeapInit+0xb0>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b50:	2208      	movs	r2, #8
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0307 	bic.w	r3, r3, #7
 8009b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4a15      	ldr	r2, [pc, #84]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b66:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b6e:	4b12      	ldr	r3, [pc, #72]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b84:	4b0c      	ldr	r3, [pc, #48]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	4a0a      	ldr	r2, [pc, #40]	; (8009bbc <prvHeapInit+0xb8>)
 8009b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <prvHeapInit+0xbc>)
 8009b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b9c:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <prvHeapInit+0xc0>)
 8009b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ba2:	601a      	str	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	2000042c 	.word	0x2000042c
 8009bb4:	2000ee8c 	.word	0x2000ee8c
 8009bb8:	2000ee94 	.word	0x2000ee94
 8009bbc:	2000ee9c 	.word	0x2000ee9c
 8009bc0:	2000ee98 	.word	0x2000ee98
 8009bc4:	2000eea0 	.word	0x2000eea0

08009bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bd0:	4b28      	ldr	r3, [pc, #160]	; (8009c74 <prvInsertBlockIntoFreeList+0xac>)
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e002      	b.n	8009bdc <prvInsertBlockIntoFreeList+0x14>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d8f7      	bhi.n	8009bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d108      	bne.n	8009c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	441a      	add	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	441a      	add	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d118      	bne.n	8009c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <prvInsertBlockIntoFreeList+0xb0>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d00d      	beq.n	8009c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	441a      	add	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	e008      	b.n	8009c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <prvInsertBlockIntoFreeList+0xb0>)
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	e003      	b.n	8009c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d002      	beq.n	8009c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c66:	bf00      	nop
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	2000ee8c 	.word	0x2000ee8c
 8009c78:	2000ee94 	.word	0x2000ee94

08009c7c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009c86:	f007 f9fd 	bl	8011084 <sys_timeouts_sleeptime>
 8009c8a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c92:	d10b      	bne.n	8009cac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009c94:	4813      	ldr	r0, [pc, #76]	; (8009ce4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c96:	f009 ff66 	bl	8013b66 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f009 fed8 	bl	8013a54 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009ca4:	480f      	ldr	r0, [pc, #60]	; (8009ce4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009ca6:	f009 ff4f 	bl	8013b48 <sys_mutex_lock>
    return;
 8009caa:	e018      	b.n	8009cde <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d102      	bne.n	8009cb8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009cb2:	f007 f9ad 	bl	8011010 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009cb6:	e7e6      	b.n	8009c86 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009cb8:	480a      	ldr	r0, [pc, #40]	; (8009ce4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009cba:	f009 ff54 	bl	8013b66 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f009 fec6 	bl	8013a54 <sys_arch_mbox_fetch>
 8009cc8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009cca:	4806      	ldr	r0, [pc, #24]	; (8009ce4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009ccc:	f009 ff3c 	bl	8013b48 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd6:	d102      	bne.n	8009cde <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009cd8:	f007 f99a 	bl	8011010 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009cdc:	e7d3      	b.n	8009c86 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	200127bc 	.word	0x200127bc

08009ce8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009cf0:	4810      	ldr	r0, [pc, #64]	; (8009d34 <tcpip_thread+0x4c>)
 8009cf2:	f009 ff29 	bl	8013b48 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009cf6:	4b10      	ldr	r3, [pc, #64]	; (8009d38 <tcpip_thread+0x50>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d005      	beq.n	8009d0a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009cfe:	4b0e      	ldr	r3, [pc, #56]	; (8009d38 <tcpip_thread+0x50>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a0e      	ldr	r2, [pc, #56]	; (8009d3c <tcpip_thread+0x54>)
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	4610      	mov	r0, r2
 8009d08:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009d0a:	f107 030c 	add.w	r3, r7, #12
 8009d0e:	4619      	mov	r1, r3
 8009d10:	480b      	ldr	r0, [pc, #44]	; (8009d40 <tcpip_thread+0x58>)
 8009d12:	f7ff ffb3 	bl	8009c7c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d1c:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <tcpip_thread+0x5c>)
 8009d1e:	2291      	movs	r2, #145	; 0x91
 8009d20:	4909      	ldr	r1, [pc, #36]	; (8009d48 <tcpip_thread+0x60>)
 8009d22:	480a      	ldr	r0, [pc, #40]	; (8009d4c <tcpip_thread+0x64>)
 8009d24:	f009 ffb6 	bl	8013c94 <iprintf>
      continue;
 8009d28:	e003      	b.n	8009d32 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 f80f 	bl	8009d50 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009d32:	e7ea      	b.n	8009d0a <tcpip_thread+0x22>
 8009d34:	200127bc 	.word	0x200127bc
 8009d38:	2000eea4 	.word	0x2000eea4
 8009d3c:	2000eea8 	.word	0x2000eea8
 8009d40:	2000eeac 	.word	0x2000eeac
 8009d44:	08014b94 	.word	0x08014b94
 8009d48:	08014bc4 	.word	0x08014bc4
 8009d4c:	08014be4 	.word	0x08014be4

08009d50 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d018      	beq.n	8009d92 <tcpip_thread_handle_msg+0x42>
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d021      	beq.n	8009da8 <tcpip_thread_handle_msg+0x58>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d126      	bne.n	8009db6 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	6850      	ldr	r0, [r2, #4]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	6892      	ldr	r2, [r2, #8]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4798      	blx	r3
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d004      	beq.n	8009d88 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f001 fc48 	bl	800b618 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d88:	6879      	ldr	r1, [r7, #4]
 8009d8a:	2009      	movs	r0, #9
 8009d8c:	f000 fe1c 	bl	800a9c8 <memp_free>
      break;
 8009d90:	e018      	b.n	8009dc4 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6892      	ldr	r2, [r2, #8]
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	2008      	movs	r0, #8
 8009da2:	f000 fe11 	bl	800a9c8 <memp_free>
      break;
 8009da6:	e00d      	b.n	8009dc4 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6892      	ldr	r2, [r2, #8]
 8009db0:	4610      	mov	r0, r2
 8009db2:	4798      	blx	r3
      break;
 8009db4:	e006      	b.n	8009dc4 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <tcpip_thread_handle_msg+0x7c>)
 8009db8:	22cf      	movs	r2, #207	; 0xcf
 8009dba:	4905      	ldr	r1, [pc, #20]	; (8009dd0 <tcpip_thread_handle_msg+0x80>)
 8009dbc:	4805      	ldr	r0, [pc, #20]	; (8009dd4 <tcpip_thread_handle_msg+0x84>)
 8009dbe:	f009 ff69 	bl	8013c94 <iprintf>
      break;
 8009dc2:	bf00      	nop
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	08014b94 	.word	0x08014b94
 8009dd0:	08014bc4 	.word	0x08014bc4
 8009dd4:	08014be4 	.word	0x08014be4

08009dd8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009de4:	481a      	ldr	r0, [pc, #104]	; (8009e50 <tcpip_inpkt+0x78>)
 8009de6:	f009 fe74 	bl	8013ad2 <sys_mbox_valid>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d105      	bne.n	8009dfc <tcpip_inpkt+0x24>
 8009df0:	4b18      	ldr	r3, [pc, #96]	; (8009e54 <tcpip_inpkt+0x7c>)
 8009df2:	22fc      	movs	r2, #252	; 0xfc
 8009df4:	4918      	ldr	r1, [pc, #96]	; (8009e58 <tcpip_inpkt+0x80>)
 8009df6:	4819      	ldr	r0, [pc, #100]	; (8009e5c <tcpip_inpkt+0x84>)
 8009df8:	f009 ff4c 	bl	8013c94 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009dfc:	2009      	movs	r0, #9
 8009dfe:	f000 fd91 	bl	800a924 <memp_malloc>
 8009e02:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0e:	e01a      	b.n	8009e46 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e28:	6979      	ldr	r1, [r7, #20]
 8009e2a:	4809      	ldr	r0, [pc, #36]	; (8009e50 <tcpip_inpkt+0x78>)
 8009e2c:	f009 fdf8 	bl	8013a20 <sys_mbox_trypost>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d006      	beq.n	8009e44 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e36:	6979      	ldr	r1, [r7, #20]
 8009e38:	2009      	movs	r0, #9
 8009e3a:	f000 fdc5 	bl	800a9c8 <memp_free>
    return ERR_MEM;
 8009e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e42:	e000      	b.n	8009e46 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009e44:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3718      	adds	r7, #24
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	2000eeac 	.word	0x2000eeac
 8009e54:	08014b94 	.word	0x08014b94
 8009e58:	08014c0c 	.word	0x08014c0c
 8009e5c:	08014be4 	.word	0x08014be4

08009e60 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009e70:	f003 0318 	and.w	r3, r3, #24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d006      	beq.n	8009e86 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009e78:	4a08      	ldr	r2, [pc, #32]	; (8009e9c <tcpip_input+0x3c>)
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff ffab 	bl	8009dd8 <tcpip_inpkt>
 8009e82:	4603      	mov	r3, r0
 8009e84:	e005      	b.n	8009e92 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009e86:	4a06      	ldr	r2, [pc, #24]	; (8009ea0 <tcpip_input+0x40>)
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff ffa4 	bl	8009dd8 <tcpip_inpkt>
 8009e90:	4603      	mov	r3, r0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	08013831 	.word	0x08013831
 8009ea0:	08012751 	.word	0x08012751

08009ea4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009eae:	4819      	ldr	r0, [pc, #100]	; (8009f14 <tcpip_try_callback+0x70>)
 8009eb0:	f009 fe0f 	bl	8013ad2 <sys_mbox_valid>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <tcpip_try_callback+0x24>
 8009eba:	4b17      	ldr	r3, [pc, #92]	; (8009f18 <tcpip_try_callback+0x74>)
 8009ebc:	f240 125d 	movw	r2, #349	; 0x15d
 8009ec0:	4916      	ldr	r1, [pc, #88]	; (8009f1c <tcpip_try_callback+0x78>)
 8009ec2:	4817      	ldr	r0, [pc, #92]	; (8009f20 <tcpip_try_callback+0x7c>)
 8009ec4:	f009 fee6 	bl	8013c94 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009ec8:	2008      	movs	r0, #8
 8009eca:	f000 fd2b 	bl	800a924 <memp_malloc>
 8009ece:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d102      	bne.n	8009edc <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eda:	e017      	b.n	8009f0c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009eee:	68f9      	ldr	r1, [r7, #12]
 8009ef0:	4808      	ldr	r0, [pc, #32]	; (8009f14 <tcpip_try_callback+0x70>)
 8009ef2:	f009 fd95 	bl	8013a20 <sys_mbox_trypost>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d006      	beq.n	8009f0a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009efc:	68f9      	ldr	r1, [r7, #12]
 8009efe:	2008      	movs	r0, #8
 8009f00:	f000 fd62 	bl	800a9c8 <memp_free>
    return ERR_MEM;
 8009f04:	f04f 33ff 	mov.w	r3, #4294967295
 8009f08:	e000      	b.n	8009f0c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2000eeac 	.word	0x2000eeac
 8009f18:	08014b94 	.word	0x08014b94
 8009f1c:	08014c0c 	.word	0x08014c0c
 8009f20:	08014be4 	.word	0x08014be4

08009f24 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009f2e:	f000 f871 	bl	800a014 <lwip_init>

  tcpip_init_done = initfunc;
 8009f32:	4a17      	ldr	r2, [pc, #92]	; (8009f90 <tcpip_init+0x6c>)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009f38:	4a16      	ldr	r2, [pc, #88]	; (8009f94 <tcpip_init+0x70>)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009f3e:	2106      	movs	r1, #6
 8009f40:	4815      	ldr	r0, [pc, #84]	; (8009f98 <tcpip_init+0x74>)
 8009f42:	f009 fd4b 	bl	80139dc <sys_mbox_new>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d006      	beq.n	8009f5a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009f4c:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <tcpip_init+0x78>)
 8009f4e:	f240 2261 	movw	r2, #609	; 0x261
 8009f52:	4913      	ldr	r1, [pc, #76]	; (8009fa0 <tcpip_init+0x7c>)
 8009f54:	4813      	ldr	r0, [pc, #76]	; (8009fa4 <tcpip_init+0x80>)
 8009f56:	f009 fe9d 	bl	8013c94 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009f5a:	4813      	ldr	r0, [pc, #76]	; (8009fa8 <tcpip_init+0x84>)
 8009f5c:	f009 fdd8 	bl	8013b10 <sys_mutex_new>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d006      	beq.n	8009f74 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009f66:	4b0d      	ldr	r3, [pc, #52]	; (8009f9c <tcpip_init+0x78>)
 8009f68:	f240 2265 	movw	r2, #613	; 0x265
 8009f6c:	490f      	ldr	r1, [pc, #60]	; (8009fac <tcpip_init+0x88>)
 8009f6e:	480d      	ldr	r0, [pc, #52]	; (8009fa4 <tcpip_init+0x80>)
 8009f70:	f009 fe90 	bl	8013c94 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009f74:	2300      	movs	r3, #0
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	490c      	ldr	r1, [pc, #48]	; (8009fb0 <tcpip_init+0x8c>)
 8009f80:	480c      	ldr	r0, [pc, #48]	; (8009fb4 <tcpip_init+0x90>)
 8009f82:	f009 fdfd 	bl	8013b80 <sys_thread_new>
}
 8009f86:	bf00      	nop
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	2000eea4 	.word	0x2000eea4
 8009f94:	2000eea8 	.word	0x2000eea8
 8009f98:	2000eeac 	.word	0x2000eeac
 8009f9c:	08014b94 	.word	0x08014b94
 8009fa0:	08014c1c 	.word	0x08014c1c
 8009fa4:	08014be4 	.word	0x08014be4
 8009fa8:	200127bc 	.word	0x200127bc
 8009fac:	08014c40 	.word	0x08014c40
 8009fb0:	08009ce9 	.word	0x08009ce9
 8009fb4:	08014c64 	.word	0x08014c64

08009fb8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009fc2:	88fb      	ldrh	r3, [r7, #6]
 8009fc4:	021b      	lsls	r3, r3, #8
 8009fc6:	b21a      	sxth	r2, r3
 8009fc8:	88fb      	ldrh	r3, [r7, #6]
 8009fca:	0a1b      	lsrs	r3, r3, #8
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	b21b      	sxth	r3, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	b21b      	sxth	r3, r3
 8009fd4:	b29b      	uxth	r3, r3
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	061a      	lsls	r2, r3, #24
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	021b      	lsls	r3, r3, #8
 8009ff2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	0a1b      	lsrs	r3, r3, #8
 8009ffc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	0e1b      	lsrs	r3, r3, #24
 800a006:	4313      	orrs	r3, r2
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a01e:	f009 fd69 	bl	8013af4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a022:	f000 f8d5 	bl	800a1d0 <mem_init>
  memp_init();
 800a026:	f000 fc31 	bl	800a88c <memp_init>
  pbuf_init();
  netif_init();
 800a02a:	f000 fcf7 	bl	800aa1c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a02e:	f007 f861 	bl	80110f4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a032:	f001 fd8b 	bl	800bb4c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a036:	f006 ffa5 	bl	8010f84 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a04e:	4b05      	ldr	r3, [pc, #20]	; (800a064 <ptr_to_mem+0x20>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	88fb      	ldrh	r3, [r7, #6]
 800a054:	4413      	add	r3, r2
}
 800a056:	4618      	mov	r0, r3
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	2000eeb0 	.word	0x2000eeb0

0800a068 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a05      	ldr	r2, [pc, #20]	; (800a088 <mem_to_ptr+0x20>)
 800a074:	6812      	ldr	r2, [r2, #0]
 800a076:	1a9b      	subs	r3, r3, r2
 800a078:	b29b      	uxth	r3, r3
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	2000eeb0 	.word	0x2000eeb0

0800a08c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a08c:	b590      	push	{r4, r7, lr}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a094:	4b45      	ldr	r3, [pc, #276]	; (800a1ac <plug_holes+0x120>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d206      	bcs.n	800a0ac <plug_holes+0x20>
 800a09e:	4b44      	ldr	r3, [pc, #272]	; (800a1b0 <plug_holes+0x124>)
 800a0a0:	f240 12df 	movw	r2, #479	; 0x1df
 800a0a4:	4943      	ldr	r1, [pc, #268]	; (800a1b4 <plug_holes+0x128>)
 800a0a6:	4844      	ldr	r0, [pc, #272]	; (800a1b8 <plug_holes+0x12c>)
 800a0a8:	f009 fdf4 	bl	8013c94 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a0ac:	4b43      	ldr	r3, [pc, #268]	; (800a1bc <plug_holes+0x130>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d306      	bcc.n	800a0c4 <plug_holes+0x38>
 800a0b6:	4b3e      	ldr	r3, [pc, #248]	; (800a1b0 <plug_holes+0x124>)
 800a0b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a0bc:	4940      	ldr	r1, [pc, #256]	; (800a1c0 <plug_holes+0x134>)
 800a0be:	483e      	ldr	r0, [pc, #248]	; (800a1b8 <plug_holes+0x12c>)
 800a0c0:	f009 fde8 	bl	8013c94 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	791b      	ldrb	r3, [r3, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d006      	beq.n	800a0da <plug_holes+0x4e>
 800a0cc:	4b38      	ldr	r3, [pc, #224]	; (800a1b0 <plug_holes+0x124>)
 800a0ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a0d2:	493c      	ldr	r1, [pc, #240]	; (800a1c4 <plug_holes+0x138>)
 800a0d4:	4838      	ldr	r0, [pc, #224]	; (800a1b8 <plug_holes+0x12c>)
 800a0d6:	f009 fddd 	bl	8013c94 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0e2:	d906      	bls.n	800a0f2 <plug_holes+0x66>
 800a0e4:	4b32      	ldr	r3, [pc, #200]	; (800a1b0 <plug_holes+0x124>)
 800a0e6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a0ea:	4937      	ldr	r1, [pc, #220]	; (800a1c8 <plug_holes+0x13c>)
 800a0ec:	4832      	ldr	r0, [pc, #200]	; (800a1b8 <plug_holes+0x12c>)
 800a0ee:	f009 fdd1 	bl	8013c94 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff ffa4 	bl	800a044 <ptr_to_mem>
 800a0fc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	429a      	cmp	r2, r3
 800a104:	d024      	beq.n	800a150 <plug_holes+0xc4>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	791b      	ldrb	r3, [r3, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d120      	bne.n	800a150 <plug_holes+0xc4>
 800a10e:	4b2b      	ldr	r3, [pc, #172]	; (800a1bc <plug_holes+0x130>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	429a      	cmp	r2, r3
 800a116:	d01b      	beq.n	800a150 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a118:	4b2c      	ldr	r3, [pc, #176]	; (800a1cc <plug_holes+0x140>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d102      	bne.n	800a128 <plug_holes+0x9c>
      lfree = mem;
 800a122:	4a2a      	ldr	r2, [pc, #168]	; (800a1cc <plug_holes+0x140>)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	881a      	ldrh	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a138:	d00a      	beq.n	800a150 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff ff80 	bl	800a044 <ptr_to_mem>
 800a144:	4604      	mov	r4, r0
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff ff8e 	bl	800a068 <mem_to_ptr>
 800a14c:	4603      	mov	r3, r0
 800a14e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	885b      	ldrh	r3, [r3, #2]
 800a154:	4618      	mov	r0, r3
 800a156:	f7ff ff75 	bl	800a044 <ptr_to_mem>
 800a15a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d01f      	beq.n	800a1a4 <plug_holes+0x118>
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	791b      	ldrb	r3, [r3, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d11b      	bne.n	800a1a4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a16c:	4b17      	ldr	r3, [pc, #92]	; (800a1cc <plug_holes+0x140>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	429a      	cmp	r2, r3
 800a174:	d102      	bne.n	800a17c <plug_holes+0xf0>
      lfree = pmem;
 800a176:	4a15      	ldr	r2, [pc, #84]	; (800a1cc <plug_holes+0x140>)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	881a      	ldrh	r2, [r3, #0]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a18c:	d00a      	beq.n	800a1a4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff ff56 	bl	800a044 <ptr_to_mem>
 800a198:	4604      	mov	r4, r0
 800a19a:	68b8      	ldr	r0, [r7, #8]
 800a19c:	f7ff ff64 	bl	800a068 <mem_to_ptr>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a1a4:	bf00      	nop
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd90      	pop	{r4, r7, pc}
 800a1ac:	2000eeb0 	.word	0x2000eeb0
 800a1b0:	08014c74 	.word	0x08014c74
 800a1b4:	08014ca4 	.word	0x08014ca4
 800a1b8:	08014cbc 	.word	0x08014cbc
 800a1bc:	2000eeb4 	.word	0x2000eeb4
 800a1c0:	08014ce4 	.word	0x08014ce4
 800a1c4:	08014d00 	.word	0x08014d00
 800a1c8:	08014d1c 	.word	0x08014d1c
 800a1cc:	2000eebc 	.word	0x2000eebc

0800a1d0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a1d6:	4b1f      	ldr	r3, [pc, #124]	; (800a254 <mem_init+0x84>)
 800a1d8:	3303      	adds	r3, #3
 800a1da:	f023 0303 	bic.w	r3, r3, #3
 800a1de:	461a      	mov	r2, r3
 800a1e0:	4b1d      	ldr	r3, [pc, #116]	; (800a258 <mem_init+0x88>)
 800a1e2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a1e4:	4b1c      	ldr	r3, [pc, #112]	; (800a258 <mem_init+0x88>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a1f0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a1fe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a202:	f7ff ff1f 	bl	800a044 <ptr_to_mem>
 800a206:	4602      	mov	r2, r0
 800a208:	4b14      	ldr	r3, [pc, #80]	; (800a25c <mem_init+0x8c>)
 800a20a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800a20c:	4b13      	ldr	r3, [pc, #76]	; (800a25c <mem_init+0x8c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2201      	movs	r2, #1
 800a212:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a214:	4b11      	ldr	r3, [pc, #68]	; (800a25c <mem_init+0x8c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a21c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a21e:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <mem_init+0x8c>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a226:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a228:	4b0b      	ldr	r3, [pc, #44]	; (800a258 <mem_init+0x88>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a0c      	ldr	r2, [pc, #48]	; (800a260 <mem_init+0x90>)
 800a22e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a230:	480c      	ldr	r0, [pc, #48]	; (800a264 <mem_init+0x94>)
 800a232:	f009 fc6d 	bl	8013b10 <sys_mutex_new>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a23c:	4b0a      	ldr	r3, [pc, #40]	; (800a268 <mem_init+0x98>)
 800a23e:	f240 221f 	movw	r2, #543	; 0x21f
 800a242:	490a      	ldr	r1, [pc, #40]	; (800a26c <mem_init+0x9c>)
 800a244:	480a      	ldr	r0, [pc, #40]	; (800a270 <mem_init+0xa0>)
 800a246:	f009 fd25 	bl	8013c94 <iprintf>
  }
}
 800a24a:	bf00      	nop
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	200127d8 	.word	0x200127d8
 800a258:	2000eeb0 	.word	0x2000eeb0
 800a25c:	2000eeb4 	.word	0x2000eeb4
 800a260:	2000eebc 	.word	0x2000eebc
 800a264:	2000eeb8 	.word	0x2000eeb8
 800a268:	08014c74 	.word	0x08014c74
 800a26c:	08014d48 	.word	0x08014d48
 800a270:	08014cbc 	.word	0x08014cbc

0800a274 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff fef3 	bl	800a068 <mem_to_ptr>
 800a282:	4603      	mov	r3, r0
 800a284:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff feda 	bl	800a044 <ptr_to_mem>
 800a290:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff fed4 	bl	800a044 <ptr_to_mem>
 800a29c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2a6:	d818      	bhi.n	800a2da <mem_link_valid+0x66>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	885b      	ldrh	r3, [r3, #2]
 800a2ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2b0:	d813      	bhi.n	800a2da <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a2b6:	8afa      	ldrh	r2, [r7, #22]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d004      	beq.n	800a2c6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	8afa      	ldrh	r2, [r7, #22]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d109      	bne.n	800a2da <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a2c6:	4b08      	ldr	r3, [pc, #32]	; (800a2e8 <mem_link_valid+0x74>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d006      	beq.n	800a2de <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	885b      	ldrh	r3, [r3, #2]
 800a2d4:	8afa      	ldrh	r2, [r7, #22]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d001      	beq.n	800a2de <mem_link_valid+0x6a>
    return 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e000      	b.n	800a2e0 <mem_link_valid+0x6c>
  }
  return 1;
 800a2de:	2301      	movs	r3, #1
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	2000eeb4 	.word	0x2000eeb4

0800a2ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b088      	sub	sp, #32
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d070      	beq.n	800a3dc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f003 0303 	and.w	r3, r3, #3
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00d      	beq.n	800a320 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a304:	4b37      	ldr	r3, [pc, #220]	; (800a3e4 <mem_free+0xf8>)
 800a306:	f240 2273 	movw	r2, #627	; 0x273
 800a30a:	4937      	ldr	r1, [pc, #220]	; (800a3e8 <mem_free+0xfc>)
 800a30c:	4837      	ldr	r0, [pc, #220]	; (800a3ec <mem_free+0x100>)
 800a30e:	f009 fcc1 	bl	8013c94 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a312:	f009 fc5b 	bl	8013bcc <sys_arch_protect>
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f009 fc65 	bl	8013be8 <sys_arch_unprotect>
    return;
 800a31e:	e05e      	b.n	800a3de <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	3b08      	subs	r3, #8
 800a324:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a326:	4b32      	ldr	r3, [pc, #200]	; (800a3f0 <mem_free+0x104>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	69fa      	ldr	r2, [r7, #28]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d306      	bcc.n	800a33e <mem_free+0x52>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f103 020c 	add.w	r2, r3, #12
 800a336:	4b2f      	ldr	r3, [pc, #188]	; (800a3f4 <mem_free+0x108>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d90d      	bls.n	800a35a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a33e:	4b29      	ldr	r3, [pc, #164]	; (800a3e4 <mem_free+0xf8>)
 800a340:	f240 227f 	movw	r2, #639	; 0x27f
 800a344:	492c      	ldr	r1, [pc, #176]	; (800a3f8 <mem_free+0x10c>)
 800a346:	4829      	ldr	r0, [pc, #164]	; (800a3ec <mem_free+0x100>)
 800a348:	f009 fca4 	bl	8013c94 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a34c:	f009 fc3e 	bl	8013bcc <sys_arch_protect>
 800a350:	6138      	str	r0, [r7, #16]
 800a352:	6938      	ldr	r0, [r7, #16]
 800a354:	f009 fc48 	bl	8013be8 <sys_arch_unprotect>
    return;
 800a358:	e041      	b.n	800a3de <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a35a:	4828      	ldr	r0, [pc, #160]	; (800a3fc <mem_free+0x110>)
 800a35c:	f009 fbf4 	bl	8013b48 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	791b      	ldrb	r3, [r3, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d110      	bne.n	800a38a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a368:	4b1e      	ldr	r3, [pc, #120]	; (800a3e4 <mem_free+0xf8>)
 800a36a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a36e:	4924      	ldr	r1, [pc, #144]	; (800a400 <mem_free+0x114>)
 800a370:	481e      	ldr	r0, [pc, #120]	; (800a3ec <mem_free+0x100>)
 800a372:	f009 fc8f 	bl	8013c94 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a376:	4821      	ldr	r0, [pc, #132]	; (800a3fc <mem_free+0x110>)
 800a378:	f009 fbf5 	bl	8013b66 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a37c:	f009 fc26 	bl	8013bcc <sys_arch_protect>
 800a380:	6178      	str	r0, [r7, #20]
 800a382:	6978      	ldr	r0, [r7, #20]
 800a384:	f009 fc30 	bl	8013be8 <sys_arch_unprotect>
    return;
 800a388:	e029      	b.n	800a3de <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a38a:	69f8      	ldr	r0, [r7, #28]
 800a38c:	f7ff ff72 	bl	800a274 <mem_link_valid>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d110      	bne.n	800a3b8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a396:	4b13      	ldr	r3, [pc, #76]	; (800a3e4 <mem_free+0xf8>)
 800a398:	f240 2295 	movw	r2, #661	; 0x295
 800a39c:	4919      	ldr	r1, [pc, #100]	; (800a404 <mem_free+0x118>)
 800a39e:	4813      	ldr	r0, [pc, #76]	; (800a3ec <mem_free+0x100>)
 800a3a0:	f009 fc78 	bl	8013c94 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a3a4:	4815      	ldr	r0, [pc, #84]	; (800a3fc <mem_free+0x110>)
 800a3a6:	f009 fbde 	bl	8013b66 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3aa:	f009 fc0f 	bl	8013bcc <sys_arch_protect>
 800a3ae:	61b8      	str	r0, [r7, #24]
 800a3b0:	69b8      	ldr	r0, [r7, #24]
 800a3b2:	f009 fc19 	bl	8013be8 <sys_arch_unprotect>
    return;
 800a3b6:	e012      	b.n	800a3de <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a3be:	4b12      	ldr	r3, [pc, #72]	; (800a408 <mem_free+0x11c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d202      	bcs.n	800a3ce <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a3c8:	4a0f      	ldr	r2, [pc, #60]	; (800a408 <mem_free+0x11c>)
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a3ce:	69f8      	ldr	r0, [r7, #28]
 800a3d0:	f7ff fe5c 	bl	800a08c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a3d4:	4809      	ldr	r0, [pc, #36]	; (800a3fc <mem_free+0x110>)
 800a3d6:	f009 fbc6 	bl	8013b66 <sys_mutex_unlock>
 800a3da:	e000      	b.n	800a3de <mem_free+0xf2>
    return;
 800a3dc:	bf00      	nop
}
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	08014c74 	.word	0x08014c74
 800a3e8:	08014d64 	.word	0x08014d64
 800a3ec:	08014cbc 	.word	0x08014cbc
 800a3f0:	2000eeb0 	.word	0x2000eeb0
 800a3f4:	2000eeb4 	.word	0x2000eeb4
 800a3f8:	08014d88 	.word	0x08014d88
 800a3fc:	2000eeb8 	.word	0x2000eeb8
 800a400:	08014da4 	.word	0x08014da4
 800a404:	08014dcc 	.word	0x08014dcc
 800a408:	2000eebc 	.word	0x2000eebc

0800a40c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a418:	887b      	ldrh	r3, [r7, #2]
 800a41a:	3303      	adds	r3, #3
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f023 0303 	bic.w	r3, r3, #3
 800a422:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a424:	8bfb      	ldrh	r3, [r7, #30]
 800a426:	2b0b      	cmp	r3, #11
 800a428:	d801      	bhi.n	800a42e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a42a:	230c      	movs	r3, #12
 800a42c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a42e:	8bfb      	ldrh	r3, [r7, #30]
 800a430:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a434:	d803      	bhi.n	800a43e <mem_trim+0x32>
 800a436:	8bfa      	ldrh	r2, [r7, #30]
 800a438:	887b      	ldrh	r3, [r7, #2]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d201      	bcs.n	800a442 <mem_trim+0x36>
    return NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	e0d8      	b.n	800a5f4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a442:	4b6e      	ldr	r3, [pc, #440]	; (800a5fc <mem_trim+0x1f0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d304      	bcc.n	800a456 <mem_trim+0x4a>
 800a44c:	4b6c      	ldr	r3, [pc, #432]	; (800a600 <mem_trim+0x1f4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d306      	bcc.n	800a464 <mem_trim+0x58>
 800a456:	4b6b      	ldr	r3, [pc, #428]	; (800a604 <mem_trim+0x1f8>)
 800a458:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a45c:	496a      	ldr	r1, [pc, #424]	; (800a608 <mem_trim+0x1fc>)
 800a45e:	486b      	ldr	r0, [pc, #428]	; (800a60c <mem_trim+0x200>)
 800a460:	f009 fc18 	bl	8013c94 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a464:	4b65      	ldr	r3, [pc, #404]	; (800a5fc <mem_trim+0x1f0>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d304      	bcc.n	800a478 <mem_trim+0x6c>
 800a46e:	4b64      	ldr	r3, [pc, #400]	; (800a600 <mem_trim+0x1f4>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	429a      	cmp	r2, r3
 800a476:	d307      	bcc.n	800a488 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a478:	f009 fba8 	bl	8013bcc <sys_arch_protect>
 800a47c:	60b8      	str	r0, [r7, #8]
 800a47e:	68b8      	ldr	r0, [r7, #8]
 800a480:	f009 fbb2 	bl	8013be8 <sys_arch_unprotect>
    return rmem;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	e0b5      	b.n	800a5f4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3b08      	subs	r3, #8
 800a48c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a48e:	69b8      	ldr	r0, [r7, #24]
 800a490:	f7ff fdea 	bl	800a068 <mem_to_ptr>
 800a494:	4603      	mov	r3, r0
 800a496:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	881a      	ldrh	r2, [r3, #0]
 800a49c:	8afb      	ldrh	r3, [r7, #22]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	3b08      	subs	r3, #8
 800a4a4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a4a6:	8bfa      	ldrh	r2, [r7, #30]
 800a4a8:	8abb      	ldrh	r3, [r7, #20]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d906      	bls.n	800a4bc <mem_trim+0xb0>
 800a4ae:	4b55      	ldr	r3, [pc, #340]	; (800a604 <mem_trim+0x1f8>)
 800a4b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a4b4:	4956      	ldr	r1, [pc, #344]	; (800a610 <mem_trim+0x204>)
 800a4b6:	4855      	ldr	r0, [pc, #340]	; (800a60c <mem_trim+0x200>)
 800a4b8:	f009 fbec 	bl	8013c94 <iprintf>
  if (newsize > size) {
 800a4bc:	8bfa      	ldrh	r2, [r7, #30]
 800a4be:	8abb      	ldrh	r3, [r7, #20]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d901      	bls.n	800a4c8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e095      	b.n	800a5f4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a4c8:	8bfa      	ldrh	r2, [r7, #30]
 800a4ca:	8abb      	ldrh	r3, [r7, #20]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d101      	bne.n	800a4d4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	e08f      	b.n	800a5f4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a4d4:	484f      	ldr	r0, [pc, #316]	; (800a614 <mem_trim+0x208>)
 800a4d6:	f009 fb37 	bl	8013b48 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fdb0 	bl	800a044 <ptr_to_mem>
 800a4e4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	791b      	ldrb	r3, [r3, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d13f      	bne.n	800a56e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4f6:	d106      	bne.n	800a506 <mem_trim+0xfa>
 800a4f8:	4b42      	ldr	r3, [pc, #264]	; (800a604 <mem_trim+0x1f8>)
 800a4fa:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a4fe:	4946      	ldr	r1, [pc, #280]	; (800a618 <mem_trim+0x20c>)
 800a500:	4842      	ldr	r0, [pc, #264]	; (800a60c <mem_trim+0x200>)
 800a502:	f009 fbc7 	bl	8013c94 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a50c:	8afa      	ldrh	r2, [r7, #22]
 800a50e:	8bfb      	ldrh	r3, [r7, #30]
 800a510:	4413      	add	r3, r2
 800a512:	b29b      	uxth	r3, r3
 800a514:	3308      	adds	r3, #8
 800a516:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a518:	4b40      	ldr	r3, [pc, #256]	; (800a61c <mem_trim+0x210>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d106      	bne.n	800a530 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a522:	89fb      	ldrh	r3, [r7, #14]
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fd8d 	bl	800a044 <ptr_to_mem>
 800a52a:	4602      	mov	r2, r0
 800a52c:	4b3b      	ldr	r3, [pc, #236]	; (800a61c <mem_trim+0x210>)
 800a52e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a530:	89fb      	ldrh	r3, [r7, #14]
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff fd86 	bl	800a044 <ptr_to_mem>
 800a538:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	2200      	movs	r2, #0
 800a53e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	89ba      	ldrh	r2, [r7, #12]
 800a544:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	8afa      	ldrh	r2, [r7, #22]
 800a54a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	89fa      	ldrh	r2, [r7, #14]
 800a550:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a55a:	d047      	beq.n	800a5ec <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff fd6f 	bl	800a044 <ptr_to_mem>
 800a566:	4602      	mov	r2, r0
 800a568:	89fb      	ldrh	r3, [r7, #14]
 800a56a:	8053      	strh	r3, [r2, #2]
 800a56c:	e03e      	b.n	800a5ec <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a56e:	8bfb      	ldrh	r3, [r7, #30]
 800a570:	f103 0214 	add.w	r2, r3, #20
 800a574:	8abb      	ldrh	r3, [r7, #20]
 800a576:	429a      	cmp	r2, r3
 800a578:	d838      	bhi.n	800a5ec <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a57a:	8afa      	ldrh	r2, [r7, #22]
 800a57c:	8bfb      	ldrh	r3, [r7, #30]
 800a57e:	4413      	add	r3, r2
 800a580:	b29b      	uxth	r3, r3
 800a582:	3308      	adds	r3, #8
 800a584:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a58e:	d106      	bne.n	800a59e <mem_trim+0x192>
 800a590:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <mem_trim+0x1f8>)
 800a592:	f240 3216 	movw	r2, #790	; 0x316
 800a596:	4920      	ldr	r1, [pc, #128]	; (800a618 <mem_trim+0x20c>)
 800a598:	481c      	ldr	r0, [pc, #112]	; (800a60c <mem_trim+0x200>)
 800a59a:	f009 fb7b 	bl	8013c94 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a59e:	89fb      	ldrh	r3, [r7, #14]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff fd4f 	bl	800a044 <ptr_to_mem>
 800a5a6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a5a8:	4b1c      	ldr	r3, [pc, #112]	; (800a61c <mem_trim+0x210>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d202      	bcs.n	800a5b8 <mem_trim+0x1ac>
      lfree = mem2;
 800a5b2:	4a1a      	ldr	r2, [pc, #104]	; (800a61c <mem_trim+0x210>)
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	881a      	ldrh	r2, [r3, #0]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	8afa      	ldrh	r2, [r7, #22]
 800a5ca:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	89fa      	ldrh	r2, [r7, #14]
 800a5d0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5da:	d007      	beq.n	800a5ec <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff fd2f 	bl	800a044 <ptr_to_mem>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	89fb      	ldrh	r3, [r7, #14]
 800a5ea:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a5ec:	4809      	ldr	r0, [pc, #36]	; (800a614 <mem_trim+0x208>)
 800a5ee:	f009 faba 	bl	8013b66 <sys_mutex_unlock>
  return rmem;
 800a5f2:	687b      	ldr	r3, [r7, #4]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	2000eeb0 	.word	0x2000eeb0
 800a600:	2000eeb4 	.word	0x2000eeb4
 800a604:	08014c74 	.word	0x08014c74
 800a608:	08014e00 	.word	0x08014e00
 800a60c:	08014cbc 	.word	0x08014cbc
 800a610:	08014e18 	.word	0x08014e18
 800a614:	2000eeb8 	.word	0x2000eeb8
 800a618:	08014e38 	.word	0x08014e38
 800a61c:	2000eebc 	.word	0x2000eebc

0800a620 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a62a:	88fb      	ldrh	r3, [r7, #6]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <mem_malloc+0x14>
    return NULL;
 800a630:	2300      	movs	r3, #0
 800a632:	e0e2      	b.n	800a7fa <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	3303      	adds	r3, #3
 800a638:	b29b      	uxth	r3, r3
 800a63a:	f023 0303 	bic.w	r3, r3, #3
 800a63e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a640:	8bbb      	ldrh	r3, [r7, #28]
 800a642:	2b0b      	cmp	r3, #11
 800a644:	d801      	bhi.n	800a64a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a646:	230c      	movs	r3, #12
 800a648:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a64a:	8bbb      	ldrh	r3, [r7, #28]
 800a64c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a650:	d803      	bhi.n	800a65a <mem_malloc+0x3a>
 800a652:	8bba      	ldrh	r2, [r7, #28]
 800a654:	88fb      	ldrh	r3, [r7, #6]
 800a656:	429a      	cmp	r2, r3
 800a658:	d201      	bcs.n	800a65e <mem_malloc+0x3e>
    return NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e0cd      	b.n	800a7fa <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a65e:	4869      	ldr	r0, [pc, #420]	; (800a804 <mem_malloc+0x1e4>)
 800a660:	f009 fa72 	bl	8013b48 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a664:	4b68      	ldr	r3, [pc, #416]	; (800a808 <mem_malloc+0x1e8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff fcfd 	bl	800a068 <mem_to_ptr>
 800a66e:	4603      	mov	r3, r0
 800a670:	83fb      	strh	r3, [r7, #30]
 800a672:	e0b7      	b.n	800a7e4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a674:	8bfb      	ldrh	r3, [r7, #30]
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fce4 	bl	800a044 <ptr_to_mem>
 800a67c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	791b      	ldrb	r3, [r3, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	f040 80a7 	bne.w	800a7d6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	8bfb      	ldrh	r3, [r7, #30]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	f1a3 0208 	sub.w	r2, r3, #8
 800a696:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a698:	429a      	cmp	r2, r3
 800a69a:	f0c0 809c 	bcc.w	800a7d6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	8bfb      	ldrh	r3, [r7, #30]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	f1a3 0208 	sub.w	r2, r3, #8
 800a6ac:	8bbb      	ldrh	r3, [r7, #28]
 800a6ae:	3314      	adds	r3, #20
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d333      	bcc.n	800a71c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a6b4:	8bfa      	ldrh	r2, [r7, #30]
 800a6b6:	8bbb      	ldrh	r3, [r7, #28]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	3308      	adds	r3, #8
 800a6be:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a6c0:	8a7b      	ldrh	r3, [r7, #18]
 800a6c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6c6:	d106      	bne.n	800a6d6 <mem_malloc+0xb6>
 800a6c8:	4b50      	ldr	r3, [pc, #320]	; (800a80c <mem_malloc+0x1ec>)
 800a6ca:	f240 3287 	movw	r2, #903	; 0x387
 800a6ce:	4950      	ldr	r1, [pc, #320]	; (800a810 <mem_malloc+0x1f0>)
 800a6d0:	4850      	ldr	r0, [pc, #320]	; (800a814 <mem_malloc+0x1f4>)
 800a6d2:	f009 fadf 	bl	8013c94 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a6d6:	8a7b      	ldrh	r3, [r7, #18]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff fcb3 	bl	800a044 <ptr_to_mem>
 800a6de:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	881a      	ldrh	r2, [r3, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8bfa      	ldrh	r2, [r7, #30]
 800a6f2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	8a7a      	ldrh	r2, [r7, #18]
 800a6f8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a708:	d00b      	beq.n	800a722 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7ff fc98 	bl	800a044 <ptr_to_mem>
 800a714:	4602      	mov	r2, r0
 800a716:	8a7b      	ldrh	r3, [r7, #18]
 800a718:	8053      	strh	r3, [r2, #2]
 800a71a:	e002      	b.n	800a722 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	2201      	movs	r2, #1
 800a720:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a722:	4b39      	ldr	r3, [pc, #228]	; (800a808 <mem_malloc+0x1e8>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d127      	bne.n	800a77c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a72c:	4b36      	ldr	r3, [pc, #216]	; (800a808 <mem_malloc+0x1e8>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a732:	e005      	b.n	800a740 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff fc83 	bl	800a044 <ptr_to_mem>
 800a73e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	791b      	ldrb	r3, [r3, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d004      	beq.n	800a752 <mem_malloc+0x132>
 800a748:	4b33      	ldr	r3, [pc, #204]	; (800a818 <mem_malloc+0x1f8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d1f0      	bne.n	800a734 <mem_malloc+0x114>
          }
          lfree = cur;
 800a752:	4a2d      	ldr	r2, [pc, #180]	; (800a808 <mem_malloc+0x1e8>)
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a758:	4b2b      	ldr	r3, [pc, #172]	; (800a808 <mem_malloc+0x1e8>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	4b2e      	ldr	r3, [pc, #184]	; (800a818 <mem_malloc+0x1f8>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	429a      	cmp	r2, r3
 800a762:	d00b      	beq.n	800a77c <mem_malloc+0x15c>
 800a764:	4b28      	ldr	r3, [pc, #160]	; (800a808 <mem_malloc+0x1e8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	791b      	ldrb	r3, [r3, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d006      	beq.n	800a77c <mem_malloc+0x15c>
 800a76e:	4b27      	ldr	r3, [pc, #156]	; (800a80c <mem_malloc+0x1ec>)
 800a770:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a774:	4929      	ldr	r1, [pc, #164]	; (800a81c <mem_malloc+0x1fc>)
 800a776:	4827      	ldr	r0, [pc, #156]	; (800a814 <mem_malloc+0x1f4>)
 800a778:	f009 fa8c 	bl	8013c94 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a77c:	4821      	ldr	r0, [pc, #132]	; (800a804 <mem_malloc+0x1e4>)
 800a77e:	f009 f9f2 	bl	8013b66 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a782:	8bba      	ldrh	r2, [r7, #28]
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	4413      	add	r3, r2
 800a788:	3308      	adds	r3, #8
 800a78a:	4a23      	ldr	r2, [pc, #140]	; (800a818 <mem_malloc+0x1f8>)
 800a78c:	6812      	ldr	r2, [r2, #0]
 800a78e:	4293      	cmp	r3, r2
 800a790:	d906      	bls.n	800a7a0 <mem_malloc+0x180>
 800a792:	4b1e      	ldr	r3, [pc, #120]	; (800a80c <mem_malloc+0x1ec>)
 800a794:	f240 32ba 	movw	r2, #954	; 0x3ba
 800a798:	4921      	ldr	r1, [pc, #132]	; (800a820 <mem_malloc+0x200>)
 800a79a:	481e      	ldr	r0, [pc, #120]	; (800a814 <mem_malloc+0x1f4>)
 800a79c:	f009 fa7a 	bl	8013c94 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f003 0303 	and.w	r3, r3, #3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d006      	beq.n	800a7b8 <mem_malloc+0x198>
 800a7aa:	4b18      	ldr	r3, [pc, #96]	; (800a80c <mem_malloc+0x1ec>)
 800a7ac:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a7b0:	491c      	ldr	r1, [pc, #112]	; (800a824 <mem_malloc+0x204>)
 800a7b2:	4818      	ldr	r0, [pc, #96]	; (800a814 <mem_malloc+0x1f4>)
 800a7b4:	f009 fa6e 	bl	8013c94 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d006      	beq.n	800a7d0 <mem_malloc+0x1b0>
 800a7c2:	4b12      	ldr	r3, [pc, #72]	; (800a80c <mem_malloc+0x1ec>)
 800a7c4:	f240 32be 	movw	r2, #958	; 0x3be
 800a7c8:	4917      	ldr	r1, [pc, #92]	; (800a828 <mem_malloc+0x208>)
 800a7ca:	4812      	ldr	r0, [pc, #72]	; (800a814 <mem_malloc+0x1f4>)
 800a7cc:	f009 fa62 	bl	8013c94 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	e011      	b.n	800a7fa <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a7d6:	8bfb      	ldrh	r3, [r7, #30]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fc33 	bl	800a044 <ptr_to_mem>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a7e4:	8bfa      	ldrh	r2, [r7, #30]
 800a7e6:	8bbb      	ldrh	r3, [r7, #28]
 800a7e8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	f4ff af41 	bcc.w	800a674 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a7f2:	4804      	ldr	r0, [pc, #16]	; (800a804 <mem_malloc+0x1e4>)
 800a7f4:	f009 f9b7 	bl	8013b66 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3720      	adds	r7, #32
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	2000eeb8 	.word	0x2000eeb8
 800a808:	2000eebc 	.word	0x2000eebc
 800a80c:	08014c74 	.word	0x08014c74
 800a810:	08014e38 	.word	0x08014e38
 800a814:	08014cbc 	.word	0x08014cbc
 800a818:	2000eeb4 	.word	0x2000eeb4
 800a81c:	08014e4c 	.word	0x08014e4c
 800a820:	08014e68 	.word	0x08014e68
 800a824:	08014e98 	.word	0x08014e98
 800a828:	08014ec8 	.word	0x08014ec8

0800a82c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	3303      	adds	r3, #3
 800a842:	f023 0303 	bic.w	r3, r3, #3
 800a846:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a848:	2300      	movs	r3, #0
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e011      	b.n	800a872 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	461a      	mov	r2, r3
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	4413      	add	r3, r2
 800a86a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3301      	adds	r3, #1
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	885b      	ldrh	r3, [r3, #2]
 800a876:	461a      	mov	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4293      	cmp	r3, r2
 800a87c:	dbe7      	blt.n	800a84e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a87e:	bf00      	nop
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
	...

0800a88c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a892:	2300      	movs	r3, #0
 800a894:	80fb      	strh	r3, [r7, #6]
 800a896:	e009      	b.n	800a8ac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a898:	88fb      	ldrh	r3, [r7, #6]
 800a89a:	4a08      	ldr	r2, [pc, #32]	; (800a8bc <memp_init+0x30>)
 800a89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff ffc3 	bl	800a82c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a8a6:	88fb      	ldrh	r3, [r7, #6]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	80fb      	strh	r3, [r7, #6]
 800a8ac:	88fb      	ldrh	r3, [r7, #6]
 800a8ae:	2b0c      	cmp	r3, #12
 800a8b0:	d9f2      	bls.n	800a898 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a8b2:	bf00      	nop
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	080176d0 	.word	0x080176d0

0800a8c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a8c8:	f009 f980 	bl	8013bcc <sys_arch_protect>
 800a8cc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d015      	beq.n	800a908 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	6812      	ldr	r2, [r2, #0]
 800a8e4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	f003 0303 	and.w	r3, r3, #3
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d006      	beq.n	800a8fe <do_memp_malloc_pool+0x3e>
 800a8f0:	4b09      	ldr	r3, [pc, #36]	; (800a918 <do_memp_malloc_pool+0x58>)
 800a8f2:	f240 1219 	movw	r2, #281	; 0x119
 800a8f6:	4909      	ldr	r1, [pc, #36]	; (800a91c <do_memp_malloc_pool+0x5c>)
 800a8f8:	4809      	ldr	r0, [pc, #36]	; (800a920 <do_memp_malloc_pool+0x60>)
 800a8fa:	f009 f9cb 	bl	8013c94 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f009 f972 	bl	8013be8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	e003      	b.n	800a910 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f009 f96d 	bl	8013be8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	08014eec 	.word	0x08014eec
 800a91c:	08014f1c 	.word	0x08014f1c
 800a920:	08014f40 	.word	0x08014f40

0800a924 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a92e:	79fb      	ldrb	r3, [r7, #7]
 800a930:	2b0c      	cmp	r3, #12
 800a932:	d908      	bls.n	800a946 <memp_malloc+0x22>
 800a934:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <memp_malloc+0x3c>)
 800a936:	f240 1257 	movw	r2, #343	; 0x157
 800a93a:	490a      	ldr	r1, [pc, #40]	; (800a964 <memp_malloc+0x40>)
 800a93c:	480a      	ldr	r0, [pc, #40]	; (800a968 <memp_malloc+0x44>)
 800a93e:	f009 f9a9 	bl	8013c94 <iprintf>
 800a942:	2300      	movs	r3, #0
 800a944:	e008      	b.n	800a958 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	4a08      	ldr	r2, [pc, #32]	; (800a96c <memp_malloc+0x48>)
 800a94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff ffb6 	bl	800a8c0 <do_memp_malloc_pool>
 800a954:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a956:	68fb      	ldr	r3, [r7, #12]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	08014eec 	.word	0x08014eec
 800a964:	08014f7c 	.word	0x08014f7c
 800a968:	08014f40 	.word	0x08014f40
 800a96c:	080176d0 	.word	0x080176d0

0800a970 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	f003 0303 	and.w	r3, r3, #3
 800a980:	2b00      	cmp	r3, #0
 800a982:	d006      	beq.n	800a992 <do_memp_free_pool+0x22>
 800a984:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <do_memp_free_pool+0x4c>)
 800a986:	f240 126d 	movw	r2, #365	; 0x16d
 800a98a:	490d      	ldr	r1, [pc, #52]	; (800a9c0 <do_memp_free_pool+0x50>)
 800a98c:	480d      	ldr	r0, [pc, #52]	; (800a9c4 <do_memp_free_pool+0x54>)
 800a98e:	f009 f981 	bl	8013c94 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a996:	f009 f919 	bl	8013bcc <sys_arch_protect>
 800a99a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a9ae:	68b8      	ldr	r0, [r7, #8]
 800a9b0:	f009 f91a 	bl	8013be8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a9b4:	bf00      	nop
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	08014eec 	.word	0x08014eec
 800a9c0:	08014f9c 	.word	0x08014f9c
 800a9c4:	08014f40 	.word	0x08014f40

0800a9c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6039      	str	r1, [r7, #0]
 800a9d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	2b0c      	cmp	r3, #12
 800a9d8:	d907      	bls.n	800a9ea <memp_free+0x22>
 800a9da:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <memp_free+0x44>)
 800a9dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a9e0:	490b      	ldr	r1, [pc, #44]	; (800aa10 <memp_free+0x48>)
 800a9e2:	480c      	ldr	r0, [pc, #48]	; (800aa14 <memp_free+0x4c>)
 800a9e4:	f009 f956 	bl	8013c94 <iprintf>
 800a9e8:	e00c      	b.n	800aa04 <memp_free+0x3c>

  if (mem == NULL) {
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d008      	beq.n	800aa02 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	4a09      	ldr	r2, [pc, #36]	; (800aa18 <memp_free+0x50>)
 800a9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff ffb8 	bl	800a970 <do_memp_free_pool>
 800aa00:	e000      	b.n	800aa04 <memp_free+0x3c>
    return;
 800aa02:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	08014eec 	.word	0x08014eec
 800aa10:	08014fbc 	.word	0x08014fbc
 800aa14:	08014f40 	.word	0x08014f40
 800aa18:	080176d0 	.word	0x080176d0

0800aa1c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aa20:	bf00      	nop
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d108      	bne.n	800aa52 <netif_add+0x26>
 800aa40:	4b56      	ldr	r3, [pc, #344]	; (800ab9c <netif_add+0x170>)
 800aa42:	f240 1227 	movw	r2, #295	; 0x127
 800aa46:	4956      	ldr	r1, [pc, #344]	; (800aba0 <netif_add+0x174>)
 800aa48:	4856      	ldr	r0, [pc, #344]	; (800aba4 <netif_add+0x178>)
 800aa4a:	f009 f923 	bl	8013c94 <iprintf>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e09f      	b.n	800ab92 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d108      	bne.n	800aa6a <netif_add+0x3e>
 800aa58:	4b50      	ldr	r3, [pc, #320]	; (800ab9c <netif_add+0x170>)
 800aa5a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aa5e:	4952      	ldr	r1, [pc, #328]	; (800aba8 <netif_add+0x17c>)
 800aa60:	4850      	ldr	r0, [pc, #320]	; (800aba4 <netif_add+0x178>)
 800aa62:	f009 f917 	bl	8013c94 <iprintf>
 800aa66:	2300      	movs	r3, #0
 800aa68:	e093      	b.n	800ab92 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aa70:	4b4e      	ldr	r3, [pc, #312]	; (800abac <netif_add+0x180>)
 800aa72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aa7a:	4b4c      	ldr	r3, [pc, #304]	; (800abac <netif_add+0x180>)
 800aa7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aa84:	4b49      	ldr	r3, [pc, #292]	; (800abac <netif_add+0x180>)
 800aa86:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	4a44      	ldr	r2, [pc, #272]	; (800abb0 <netif_add+0x184>)
 800aa9e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6a3a      	ldr	r2, [r7, #32]
 800aab2:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800aab4:	4b3f      	ldr	r3, [pc, #252]	; (800abb4 <netif_add+0x188>)
 800aab6:	781a      	ldrb	r2, [r3, #0]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aac2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f000 f914 	bl	800acf8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	4798      	blx	r3
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <netif_add+0xb4>
    return NULL;
 800aadc:	2300      	movs	r3, #0
 800aade:	e058      	b.n	800ab92 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aae6:	2bff      	cmp	r3, #255	; 0xff
 800aae8:	d103      	bne.n	800aaf2 <netif_add+0xc6>
        netif->num = 0;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aaf6:	4b30      	ldr	r3, [pc, #192]	; (800abb8 <netif_add+0x18c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	617b      	str	r3, [r7, #20]
 800aafc:	e02b      	b.n	800ab56 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d106      	bne.n	800ab14 <netif_add+0xe8>
 800ab06:	4b25      	ldr	r3, [pc, #148]	; (800ab9c <netif_add+0x170>)
 800ab08:	f240 128b 	movw	r2, #395	; 0x18b
 800ab0c:	492b      	ldr	r1, [pc, #172]	; (800abbc <netif_add+0x190>)
 800ab0e:	4825      	ldr	r0, [pc, #148]	; (800aba4 <netif_add+0x178>)
 800ab10:	f009 f8c0 	bl	8013c94 <iprintf>
        num_netifs++;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	3301      	adds	r3, #1
 800ab18:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2bff      	cmp	r3, #255	; 0xff
 800ab1e:	dd06      	ble.n	800ab2e <netif_add+0x102>
 800ab20:	4b1e      	ldr	r3, [pc, #120]	; (800ab9c <netif_add+0x170>)
 800ab22:	f240 128d 	movw	r2, #397	; 0x18d
 800ab26:	4926      	ldr	r1, [pc, #152]	; (800abc0 <netif_add+0x194>)
 800ab28:	481e      	ldr	r0, [pc, #120]	; (800aba4 <netif_add+0x178>)
 800ab2a:	f009 f8b3 	bl	8013c94 <iprintf>
        if (netif2->num == netif->num) {
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d108      	bne.n	800ab50 <netif_add+0x124>
          netif->num++;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab44:	3301      	adds	r3, #1
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800ab4e:	e005      	b.n	800ab5c <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	617b      	str	r3, [r7, #20]
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1d0      	bne.n	800aafe <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1be      	bne.n	800aae0 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab68:	2bfe      	cmp	r3, #254	; 0xfe
 800ab6a:	d103      	bne.n	800ab74 <netif_add+0x148>
    netif_num = 0;
 800ab6c:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <netif_add+0x188>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	e006      	b.n	800ab82 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <netif_add+0x188>)
 800ab80:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ab82:	4b0d      	ldr	r3, [pc, #52]	; (800abb8 <netif_add+0x18c>)
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ab8a:	4a0b      	ldr	r2, [pc, #44]	; (800abb8 <netif_add+0x18c>)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ab90:	68fb      	ldr	r3, [r7, #12]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	08014fd8 	.word	0x08014fd8
 800aba0:	0801506c 	.word	0x0801506c
 800aba4:	08015028 	.word	0x08015028
 800aba8:	08015088 	.word	0x08015088
 800abac:	08017744 	.word	0x08017744
 800abb0:	0800aee9 	.word	0x0800aee9
 800abb4:	2000eef4 	.word	0x2000eef4
 800abb8:	20015ec4 	.word	0x20015ec4
 800abbc:	080150ac 	.word	0x080150ac
 800abc0:	080150c0 	.word	0x080150c0

0800abc4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f002 faf7 	bl	800d1c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f006 fc15 	bl	8011408 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800abde:	bf00      	nop
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d106      	bne.n	800ac08 <netif_do_set_ipaddr+0x20>
 800abfa:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <netif_do_set_ipaddr+0x88>)
 800abfc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ac00:	491c      	ldr	r1, [pc, #112]	; (800ac74 <netif_do_set_ipaddr+0x8c>)
 800ac02:	481d      	ldr	r0, [pc, #116]	; (800ac78 <netif_do_set_ipaddr+0x90>)
 800ac04:	f009 f846 	bl	8013c94 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d106      	bne.n	800ac1c <netif_do_set_ipaddr+0x34>
 800ac0e:	4b18      	ldr	r3, [pc, #96]	; (800ac70 <netif_do_set_ipaddr+0x88>)
 800ac10:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ac14:	4917      	ldr	r1, [pc, #92]	; (800ac74 <netif_do_set_ipaddr+0x8c>)
 800ac16:	4818      	ldr	r0, [pc, #96]	; (800ac78 <netif_do_set_ipaddr+0x90>)
 800ac18:	f009 f83c 	bl	8013c94 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3304      	adds	r3, #4
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d01c      	beq.n	800ac64 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3304      	adds	r3, #4
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ac3a:	f107 0314 	add.w	r3, r7, #20
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff ffbf 	bl	800abc4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <netif_do_set_ipaddr+0x6a>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	e000      	b.n	800ac54 <netif_do_set_ipaddr+0x6c>
 800ac52:	2300      	movs	r3, #0
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ac58:	2101      	movs	r1, #1
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 f8d2 	bl	800ae04 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ac60:	2301      	movs	r3, #1
 800ac62:	e000      	b.n	800ac66 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	08014fd8 	.word	0x08014fd8
 800ac74:	080150f0 	.word	0x080150f0
 800ac78:	08015028 	.word	0x08015028

0800ac7c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3308      	adds	r3, #8
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d00a      	beq.n	800acac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <netif_do_set_netmask+0x26>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	e000      	b.n	800aca4 <netif_do_set_netmask+0x28>
 800aca2:	2300      	movs	r3, #0
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aca8:	2301      	movs	r3, #1
 800acaa:	e000      	b.n	800acae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800acba:	b480      	push	{r7}
 800acbc:	b085      	sub	sp, #20
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	330c      	adds	r3, #12
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d00a      	beq.n	800acea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <netif_do_set_gw+0x26>
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	e000      	b.n	800ace2 <netif_do_set_gw+0x28>
 800ace0:	2300      	movs	r3, #0
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ad14:	4b1c      	ldr	r3, [pc, #112]	; (800ad88 <netif_set_addr+0x90>)
 800ad16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ad1e:	4b1a      	ldr	r3, [pc, #104]	; (800ad88 <netif_set_addr+0x90>)
 800ad20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ad28:	4b17      	ldr	r3, [pc, #92]	; (800ad88 <netif_set_addr+0x90>)
 800ad2a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <netif_set_addr+0x42>
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <netif_set_addr+0x46>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e000      	b.n	800ad40 <netif_set_addr+0x48>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad48:	f107 0310 	add.w	r3, r7, #16
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	68b9      	ldr	r1, [r7, #8]
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff ff49 	bl	800abe8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ad56:	69fa      	ldr	r2, [r7, #28]
 800ad58:	6879      	ldr	r1, [r7, #4]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff ff8e 	bl	800ac7c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f7ff ffa8 	bl	800acba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad70:	f107 0310 	add.w	r3, r7, #16
 800ad74:	461a      	mov	r2, r3
 800ad76:	68b9      	ldr	r1, [r7, #8]
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f7ff ff35 	bl	800abe8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ad7e:	bf00      	nop
 800ad80:	3720      	adds	r7, #32
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	08017744 	.word	0x08017744

0800ad8c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ad94:	4a04      	ldr	r2, [pc, #16]	; (800ada8 <netif_set_default+0x1c>)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20015ec8 	.word	0x20015ec8

0800adac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d107      	bne.n	800adca <netif_set_up+0x1e>
 800adba:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <netif_set_up+0x4c>)
 800adbc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800adc0:	490e      	ldr	r1, [pc, #56]	; (800adfc <netif_set_up+0x50>)
 800adc2:	480f      	ldr	r0, [pc, #60]	; (800ae00 <netif_set_up+0x54>)
 800adc4:	f008 ff66 	bl	8013c94 <iprintf>
 800adc8:	e013      	b.n	800adf2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10c      	bne.n	800adf2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800adde:	f043 0301 	orr.w	r3, r3, #1
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800adea:	2103      	movs	r1, #3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f809 	bl	800ae04 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	08014fd8 	.word	0x08014fd8
 800adfc:	08015160 	.word	0x08015160
 800ae00:	08015028 	.word	0x08015028

0800ae04 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d106      	bne.n	800ae24 <netif_issue_reports+0x20>
 800ae16:	4b18      	ldr	r3, [pc, #96]	; (800ae78 <netif_issue_reports+0x74>)
 800ae18:	f240 326d 	movw	r2, #877	; 0x36d
 800ae1c:	4917      	ldr	r1, [pc, #92]	; (800ae7c <netif_issue_reports+0x78>)
 800ae1e:	4818      	ldr	r0, [pc, #96]	; (800ae80 <netif_issue_reports+0x7c>)
 800ae20:	f008 ff38 	bl	8013c94 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ae2a:	f003 0304 	and.w	r3, r3, #4
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d01e      	beq.n	800ae70 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ae38:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d017      	beq.n	800ae70 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae40:	78fb      	ldrb	r3, [r7, #3]
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d013      	beq.n	800ae72 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00e      	beq.n	800ae72 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ae5a:	f003 0308 	and.w	r3, r3, #8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d007      	beq.n	800ae72 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f007 fa37 	bl	80122dc <etharp_request>
 800ae6e:	e000      	b.n	800ae72 <netif_issue_reports+0x6e>
    return;
 800ae70:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	08014fd8 	.word	0x08014fd8
 800ae7c:	0801517c 	.word	0x0801517c
 800ae80:	08015028 	.word	0x08015028

0800ae84 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d107      	bne.n	800aea2 <netif_set_down+0x1e>
 800ae92:	4b12      	ldr	r3, [pc, #72]	; (800aedc <netif_set_down+0x58>)
 800ae94:	f240 329b 	movw	r2, #923	; 0x39b
 800ae98:	4911      	ldr	r1, [pc, #68]	; (800aee0 <netif_set_down+0x5c>)
 800ae9a:	4812      	ldr	r0, [pc, #72]	; (800aee4 <netif_set_down+0x60>)
 800ae9c:	f008 fefa 	bl	8013c94 <iprintf>
 800aea0:	e019      	b.n	800aed6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d012      	beq.n	800aed6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800aeb6:	f023 0301 	bic.w	r3, r3, #1
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800aec8:	f003 0308 	and.w	r3, r3, #8
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f006 fdc1 	bl	8011a58 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	08014fd8 	.word	0x08014fd8
 800aee0:	080151a0 	.word	0x080151a0
 800aee4:	08015028 	.word	0x08015028

0800aee8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800aef4:	f06f 030b 	mvn.w	r3, #11
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	4603      	mov	r3, r0
 800af0c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800af0e:	79fb      	ldrb	r3, [r7, #7]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d013      	beq.n	800af3c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800af14:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <netif_get_by_index+0x48>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	e00c      	b.n	800af36 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af22:	3301      	adds	r3, #1
 800af24:	b2db      	uxtb	r3, r3
 800af26:	79fa      	ldrb	r2, [r7, #7]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d101      	bne.n	800af30 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	e006      	b.n	800af3e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	60fb      	str	r3, [r7, #12]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1ef      	bne.n	800af1c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	20015ec4 	.word	0x20015ec4

0800af50 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800af56:	f008 fe39 	bl	8013bcc <sys_arch_protect>
 800af5a:	6038      	str	r0, [r7, #0]
 800af5c:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <pbuf_free_ooseq+0x44>)
 800af5e:	2200      	movs	r2, #0
 800af60:	701a      	strb	r2, [r3, #0]
 800af62:	6838      	ldr	r0, [r7, #0]
 800af64:	f008 fe40 	bl	8013be8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af68:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <pbuf_free_ooseq+0x48>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	607b      	str	r3, [r7, #4]
 800af6e:	e00a      	b.n	800af86 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af74:	2b00      	cmp	r3, #0
 800af76:	d003      	beq.n	800af80 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f002 f961 	bl	800d240 <tcp_free_ooseq>
      return;
 800af7e:	e005      	b.n	800af8c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	607b      	str	r3, [r7, #4]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1f1      	bne.n	800af70 <pbuf_free_ooseq+0x20>
    }
  }
}
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	20015ecc 	.word	0x20015ecc
 800af98:	20015ed4 	.word	0x20015ed4

0800af9c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800afa4:	f7ff ffd4 	bl	800af50 <pbuf_free_ooseq>
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800afb6:	f008 fe09 	bl	8013bcc <sys_arch_protect>
 800afba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800afbc:	4b0f      	ldr	r3, [pc, #60]	; (800affc <pbuf_pool_is_empty+0x4c>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800afc2:	4b0e      	ldr	r3, [pc, #56]	; (800affc <pbuf_pool_is_empty+0x4c>)
 800afc4:	2201      	movs	r2, #1
 800afc6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f008 fe0d 	bl	8013be8 <sys_arch_unprotect>

  if (!queued) {
 800afce:	78fb      	ldrb	r3, [r7, #3]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10f      	bne.n	800aff4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800afd4:	2100      	movs	r1, #0
 800afd6:	480a      	ldr	r0, [pc, #40]	; (800b000 <pbuf_pool_is_empty+0x50>)
 800afd8:	f7fe ff64 	bl	8009ea4 <tcpip_try_callback>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <pbuf_pool_is_empty+0x44>
 800afe2:	f008 fdf3 	bl	8013bcc <sys_arch_protect>
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	4b04      	ldr	r3, [pc, #16]	; (800affc <pbuf_pool_is_empty+0x4c>)
 800afea:	2200      	movs	r2, #0
 800afec:	701a      	strb	r2, [r3, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f008 fdfa 	bl	8013be8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20015ecc 	.word	0x20015ecc
 800b000:	0800af9d 	.word	0x0800af9d

0800b004 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	4611      	mov	r1, r2
 800b010:	461a      	mov	r2, r3
 800b012:	460b      	mov	r3, r1
 800b014:	80fb      	strh	r3, [r7, #6]
 800b016:	4613      	mov	r3, r2
 800b018:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	88fa      	ldrh	r2, [r7, #6]
 800b02a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	88ba      	ldrh	r2, [r7, #4]
 800b030:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b032:	8b3b      	ldrh	r3, [r7, #24]
 800b034:	b2da      	uxtb	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	7f3a      	ldrb	r2, [r7, #28]
 800b03e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2201      	movs	r2, #1
 800b044:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	73da      	strb	r2, [r3, #15]
}
 800b04c:	bf00      	nop
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08c      	sub	sp, #48	; 0x30
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	4603      	mov	r3, r0
 800b060:	71fb      	strb	r3, [r7, #7]
 800b062:	460b      	mov	r3, r1
 800b064:	80bb      	strh	r3, [r7, #4]
 800b066:	4613      	mov	r3, r2
 800b068:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b06e:	887b      	ldrh	r3, [r7, #2]
 800b070:	2b41      	cmp	r3, #65	; 0x41
 800b072:	d00b      	beq.n	800b08c <pbuf_alloc+0x34>
 800b074:	2b41      	cmp	r3, #65	; 0x41
 800b076:	dc02      	bgt.n	800b07e <pbuf_alloc+0x26>
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d007      	beq.n	800b08c <pbuf_alloc+0x34>
 800b07c:	e0c2      	b.n	800b204 <pbuf_alloc+0x1ac>
 800b07e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b082:	d00b      	beq.n	800b09c <pbuf_alloc+0x44>
 800b084:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b088:	d070      	beq.n	800b16c <pbuf_alloc+0x114>
 800b08a:	e0bb      	b.n	800b204 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b08c:	887a      	ldrh	r2, [r7, #2]
 800b08e:	88bb      	ldrh	r3, [r7, #4]
 800b090:	4619      	mov	r1, r3
 800b092:	2000      	movs	r0, #0
 800b094:	f000 f8d2 	bl	800b23c <pbuf_alloc_reference>
 800b098:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b09a:	e0bd      	b.n	800b218 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b0a4:	88bb      	ldrh	r3, [r7, #4]
 800b0a6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b0a8:	200c      	movs	r0, #12
 800b0aa:	f7ff fc3b 	bl	800a924 <memp_malloc>
 800b0ae:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d109      	bne.n	800b0ca <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800b0b6:	f7ff ff7b 	bl	800afb0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800b0c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0c2:	f000 faa9 	bl	800b618 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	e0a7      	b.n	800b21a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b0ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0cc:	3303      	adds	r3, #3
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	f023 0303 	bic.w	r3, r3, #3
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	8b7a      	ldrh	r2, [r7, #26]
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	bf28      	it	cs
 800b0e2:	4613      	movcs	r3, r2
 800b0e4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b0e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0e8:	3310      	adds	r3, #16
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	3303      	adds	r3, #3
 800b0f0:	f023 0303 	bic.w	r3, r3, #3
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	89f9      	ldrh	r1, [r7, #14]
 800b0f8:	8b7a      	ldrh	r2, [r7, #26]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	887b      	ldrh	r3, [r7, #2]
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	460b      	mov	r3, r1
 800b104:	4601      	mov	r1, r0
 800b106:	6938      	ldr	r0, [r7, #16]
 800b108:	f7ff ff7c 	bl	800b004 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	f003 0303 	and.w	r3, r3, #3
 800b114:	2b00      	cmp	r3, #0
 800b116:	d006      	beq.n	800b126 <pbuf_alloc+0xce>
 800b118:	4b42      	ldr	r3, [pc, #264]	; (800b224 <pbuf_alloc+0x1cc>)
 800b11a:	f240 1201 	movw	r2, #257	; 0x101
 800b11e:	4942      	ldr	r1, [pc, #264]	; (800b228 <pbuf_alloc+0x1d0>)
 800b120:	4842      	ldr	r0, [pc, #264]	; (800b22c <pbuf_alloc+0x1d4>)
 800b122:	f008 fdb7 	bl	8013c94 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b128:	3303      	adds	r3, #3
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b132:	d106      	bne.n	800b142 <pbuf_alloc+0xea>
 800b134:	4b3b      	ldr	r3, [pc, #236]	; (800b224 <pbuf_alloc+0x1cc>)
 800b136:	f240 1203 	movw	r2, #259	; 0x103
 800b13a:	493d      	ldr	r1, [pc, #244]	; (800b230 <pbuf_alloc+0x1d8>)
 800b13c:	483b      	ldr	r0, [pc, #236]	; (800b22c <pbuf_alloc+0x1d4>)
 800b13e:	f008 fda9 	bl	8013c94 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	2b00      	cmp	r3, #0
 800b146:	d102      	bne.n	800b14e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	627b      	str	r3, [r7, #36]	; 0x24
 800b14c:	e002      	b.n	800b154 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b158:	8b7a      	ldrh	r2, [r7, #26]
 800b15a:	89fb      	ldrh	r3, [r7, #14]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b164:	8b7b      	ldrh	r3, [r7, #26]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d19e      	bne.n	800b0a8 <pbuf_alloc+0x50>
      break;
 800b16a:	e055      	b.n	800b218 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b16c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b16e:	3303      	adds	r3, #3
 800b170:	b29b      	uxth	r3, r3
 800b172:	f023 0303 	bic.w	r3, r3, #3
 800b176:	b29a      	uxth	r2, r3
 800b178:	88bb      	ldrh	r3, [r7, #4]
 800b17a:	3303      	adds	r3, #3
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f023 0303 	bic.w	r3, r3, #3
 800b182:	b29b      	uxth	r3, r3
 800b184:	4413      	add	r3, r2
 800b186:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b188:	8b3b      	ldrh	r3, [r7, #24]
 800b18a:	3310      	adds	r3, #16
 800b18c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b18e:	8b3a      	ldrh	r2, [r7, #24]
 800b190:	88bb      	ldrh	r3, [r7, #4]
 800b192:	3303      	adds	r3, #3
 800b194:	f023 0303 	bic.w	r3, r3, #3
 800b198:	429a      	cmp	r2, r3
 800b19a:	d306      	bcc.n	800b1aa <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b19c:	8afa      	ldrh	r2, [r7, #22]
 800b19e:	88bb      	ldrh	r3, [r7, #4]
 800b1a0:	3303      	adds	r3, #3
 800b1a2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d201      	bcs.n	800b1ae <pbuf_alloc+0x156>
        return NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e035      	b.n	800b21a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b1ae:	8afb      	ldrh	r3, [r7, #22]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7ff fa35 	bl	800a620 <mem_malloc>
 800b1b6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <pbuf_alloc+0x16a>
        return NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e02b      	b.n	800b21a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b1c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1c4:	3310      	adds	r3, #16
 800b1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c8:	4413      	add	r3, r2
 800b1ca:	3303      	adds	r3, #3
 800b1cc:	f023 0303 	bic.w	r3, r3, #3
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	88b9      	ldrh	r1, [r7, #4]
 800b1d4:	88ba      	ldrh	r2, [r7, #4]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	887b      	ldrh	r3, [r7, #2]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1e4:	f7ff ff0e 	bl	800b004 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	f003 0303 	and.w	r3, r3, #3
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d010      	beq.n	800b216 <pbuf_alloc+0x1be>
 800b1f4:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <pbuf_alloc+0x1cc>)
 800b1f6:	f240 1223 	movw	r2, #291	; 0x123
 800b1fa:	490e      	ldr	r1, [pc, #56]	; (800b234 <pbuf_alloc+0x1dc>)
 800b1fc:	480b      	ldr	r0, [pc, #44]	; (800b22c <pbuf_alloc+0x1d4>)
 800b1fe:	f008 fd49 	bl	8013c94 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b202:	e008      	b.n	800b216 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b204:	4b07      	ldr	r3, [pc, #28]	; (800b224 <pbuf_alloc+0x1cc>)
 800b206:	f240 1227 	movw	r2, #295	; 0x127
 800b20a:	490b      	ldr	r1, [pc, #44]	; (800b238 <pbuf_alloc+0x1e0>)
 800b20c:	4807      	ldr	r0, [pc, #28]	; (800b22c <pbuf_alloc+0x1d4>)
 800b20e:	f008 fd41 	bl	8013c94 <iprintf>
      return NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	e001      	b.n	800b21a <pbuf_alloc+0x1c2>
      break;
 800b216:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3728      	adds	r7, #40	; 0x28
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	08015208 	.word	0x08015208
 800b228:	08015238 	.word	0x08015238
 800b22c:	08015268 	.word	0x08015268
 800b230:	08015290 	.word	0x08015290
 800b234:	080152c4 	.word	0x080152c4
 800b238:	080152f0 	.word	0x080152f0

0800b23c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af02      	add	r7, sp, #8
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	807b      	strh	r3, [r7, #2]
 800b248:	4613      	mov	r3, r2
 800b24a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b24c:	883b      	ldrh	r3, [r7, #0]
 800b24e:	2b41      	cmp	r3, #65	; 0x41
 800b250:	d009      	beq.n	800b266 <pbuf_alloc_reference+0x2a>
 800b252:	883b      	ldrh	r3, [r7, #0]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d006      	beq.n	800b266 <pbuf_alloc_reference+0x2a>
 800b258:	4b0f      	ldr	r3, [pc, #60]	; (800b298 <pbuf_alloc_reference+0x5c>)
 800b25a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b25e:	490f      	ldr	r1, [pc, #60]	; (800b29c <pbuf_alloc_reference+0x60>)
 800b260:	480f      	ldr	r0, [pc, #60]	; (800b2a0 <pbuf_alloc_reference+0x64>)
 800b262:	f008 fd17 	bl	8013c94 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b266:	200b      	movs	r0, #11
 800b268:	f7ff fb5c 	bl	800a924 <memp_malloc>
 800b26c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	e00b      	b.n	800b290 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b278:	8879      	ldrh	r1, [r7, #2]
 800b27a:	887a      	ldrh	r2, [r7, #2]
 800b27c:	2300      	movs	r3, #0
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	883b      	ldrh	r3, [r7, #0]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	460b      	mov	r3, r1
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7ff febb 	bl	800b004 <pbuf_init_alloced_pbuf>
  return p;
 800b28e:	68fb      	ldr	r3, [r7, #12]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	08015208 	.word	0x08015208
 800b29c:	0801530c 	.word	0x0801530c
 800b2a0:	08015268 	.word	0x08015268

0800b2a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b088      	sub	sp, #32
 800b2a8:	af02      	add	r7, sp, #8
 800b2aa:	607b      	str	r3, [r7, #4]
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	81bb      	strh	r3, [r7, #12]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b2bc:	8a7b      	ldrh	r3, [r7, #18]
 800b2be:	3303      	adds	r3, #3
 800b2c0:	f023 0203 	bic.w	r2, r3, #3
 800b2c4:	89bb      	ldrh	r3, [r7, #12]
 800b2c6:	441a      	add	r2, r3
 800b2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d901      	bls.n	800b2d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e018      	b.n	800b304 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d007      	beq.n	800b2e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b2d8:	8a7b      	ldrh	r3, [r7, #18]
 800b2da:	3303      	adds	r3, #3
 800b2dc:	f023 0303 	bic.w	r3, r3, #3
 800b2e0:	6a3a      	ldr	r2, [r7, #32]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	e001      	b.n	800b2ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	89b9      	ldrh	r1, [r7, #12]
 800b2f0:	89ba      	ldrh	r2, [r7, #12]
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	897b      	ldrh	r3, [r7, #10]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	6979      	ldr	r1, [r7, #20]
 800b2fe:	f7ff fe81 	bl	800b004 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b302:	687b      	ldr	r3, [r7, #4]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3718      	adds	r7, #24
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <pbuf_realloc+0x20>
 800b31e:	4b3a      	ldr	r3, [pc, #232]	; (800b408 <pbuf_realloc+0xfc>)
 800b320:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b324:	4939      	ldr	r1, [pc, #228]	; (800b40c <pbuf_realloc+0x100>)
 800b326:	483a      	ldr	r0, [pc, #232]	; (800b410 <pbuf_realloc+0x104>)
 800b328:	f008 fcb4 	bl	8013c94 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	891b      	ldrh	r3, [r3, #8]
 800b330:	887a      	ldrh	r2, [r7, #2]
 800b332:	429a      	cmp	r2, r3
 800b334:	d264      	bcs.n	800b400 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	891a      	ldrh	r2, [r3, #8]
 800b33a:	887b      	ldrh	r3, [r7, #2]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b340:	887b      	ldrh	r3, [r7, #2]
 800b342:	817b      	strh	r3, [r7, #10]
  q = p;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b348:	e018      	b.n	800b37c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	895b      	ldrh	r3, [r3, #10]
 800b34e:	897a      	ldrh	r2, [r7, #10]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	891a      	ldrh	r2, [r3, #8]
 800b358:	893b      	ldrh	r3, [r7, #8]
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <pbuf_realloc+0x70>
 800b36e:	4b26      	ldr	r3, [pc, #152]	; (800b408 <pbuf_realloc+0xfc>)
 800b370:	f240 12af 	movw	r2, #431	; 0x1af
 800b374:	4927      	ldr	r1, [pc, #156]	; (800b414 <pbuf_realloc+0x108>)
 800b376:	4826      	ldr	r0, [pc, #152]	; (800b410 <pbuf_realloc+0x104>)
 800b378:	f008 fc8c 	bl	8013c94 <iprintf>
  while (rem_len > q->len) {
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	895b      	ldrh	r3, [r3, #10]
 800b380:	897a      	ldrh	r2, [r7, #10]
 800b382:	429a      	cmp	r2, r3
 800b384:	d8e1      	bhi.n	800b34a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	7b1b      	ldrb	r3, [r3, #12]
 800b38a:	f003 030f 	and.w	r3, r3, #15
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d122      	bne.n	800b3d8 <pbuf_realloc+0xcc>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	895b      	ldrh	r3, [r3, #10]
 800b396:	897a      	ldrh	r2, [r7, #10]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d01d      	beq.n	800b3d8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	7b5b      	ldrb	r3, [r3, #13]
 800b3a0:	f003 0302 	and.w	r3, r3, #2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d117      	bne.n	800b3d8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	897b      	ldrh	r3, [r7, #10]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7ff f825 	bl	800a40c <mem_trim>
 800b3c2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d106      	bne.n	800b3d8 <pbuf_realloc+0xcc>
 800b3ca:	4b0f      	ldr	r3, [pc, #60]	; (800b408 <pbuf_realloc+0xfc>)
 800b3cc:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b3d0:	4911      	ldr	r1, [pc, #68]	; (800b418 <pbuf_realloc+0x10c>)
 800b3d2:	480f      	ldr	r0, [pc, #60]	; (800b410 <pbuf_realloc+0x104>)
 800b3d4:	f008 fc5e 	bl	8013c94 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	897a      	ldrh	r2, [r7, #10]
 800b3dc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	895a      	ldrh	r2, [r3, #10]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d004      	beq.n	800b3f8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 f910 	bl	800b618 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	e000      	b.n	800b402 <pbuf_realloc+0xf6>
    return;
 800b400:	bf00      	nop

}
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	08015208 	.word	0x08015208
 800b40c:	08015320 	.word	0x08015320
 800b410:	08015268 	.word	0x08015268
 800b414:	08015338 	.word	0x08015338
 800b418:	08015350 	.word	0x08015350

0800b41c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d106      	bne.n	800b43e <pbuf_add_header_impl+0x22>
 800b430:	4b2b      	ldr	r3, [pc, #172]	; (800b4e0 <pbuf_add_header_impl+0xc4>)
 800b432:	f240 12df 	movw	r2, #479	; 0x1df
 800b436:	492b      	ldr	r1, [pc, #172]	; (800b4e4 <pbuf_add_header_impl+0xc8>)
 800b438:	482b      	ldr	r0, [pc, #172]	; (800b4e8 <pbuf_add_header_impl+0xcc>)
 800b43a:	f008 fc2b 	bl	8013c94 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d003      	beq.n	800b44c <pbuf_add_header_impl+0x30>
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b44a:	d301      	bcc.n	800b450 <pbuf_add_header_impl+0x34>
    return 1;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e043      	b.n	800b4d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <pbuf_add_header_impl+0x3e>
    return 0;
 800b456:	2300      	movs	r3, #0
 800b458:	e03e      	b.n	800b4d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	891a      	ldrh	r2, [r3, #8]
 800b462:	8a7b      	ldrh	r3, [r7, #18]
 800b464:	4413      	add	r3, r2
 800b466:	b29b      	uxth	r3, r3
 800b468:	8a7a      	ldrh	r2, [r7, #18]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d901      	bls.n	800b472 <pbuf_add_header_impl+0x56>
    return 1;
 800b46e:	2301      	movs	r3, #1
 800b470:	e032      	b.n	800b4d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	7b1b      	ldrb	r3, [r3, #12]
 800b476:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b478:	8a3b      	ldrh	r3, [r7, #16]
 800b47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00c      	beq.n	800b49c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	685a      	ldr	r2, [r3, #4]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	425b      	negs	r3, r3
 800b48a:	4413      	add	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3310      	adds	r3, #16
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	429a      	cmp	r2, r3
 800b496:	d20d      	bcs.n	800b4b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b498:	2301      	movs	r3, #1
 800b49a:	e01d      	b.n	800b4d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d006      	beq.n	800b4b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	425b      	negs	r3, r3
 800b4aa:	4413      	add	r3, r2
 800b4ac:	617b      	str	r3, [r7, #20]
 800b4ae:	e001      	b.n	800b4b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e011      	b.n	800b4d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	895a      	ldrh	r2, [r3, #10]
 800b4be:	8a7b      	ldrh	r3, [r7, #18]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	891a      	ldrh	r2, [r3, #8]
 800b4cc:	8a7b      	ldrh	r3, [r7, #18]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	08015208 	.word	0x08015208
 800b4e4:	0801536c 	.word	0x0801536c
 800b4e8:	08015268 	.word	0x08015268

0800b4ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff ff8e 	bl	800b41c <pbuf_add_header_impl>
 800b500:	4603      	mov	r3, r0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
	...

0800b50c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <pbuf_remove_header+0x1e>
 800b51c:	4b20      	ldr	r3, [pc, #128]	; (800b5a0 <pbuf_remove_header+0x94>)
 800b51e:	f240 224b 	movw	r2, #587	; 0x24b
 800b522:	4920      	ldr	r1, [pc, #128]	; (800b5a4 <pbuf_remove_header+0x98>)
 800b524:	4820      	ldr	r0, [pc, #128]	; (800b5a8 <pbuf_remove_header+0x9c>)
 800b526:	f008 fbb5 	bl	8013c94 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <pbuf_remove_header+0x2c>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b536:	d301      	bcc.n	800b53c <pbuf_remove_header+0x30>
    return 1;
 800b538:	2301      	movs	r3, #1
 800b53a:	e02c      	b.n	800b596 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <pbuf_remove_header+0x3a>
    return 0;
 800b542:	2300      	movs	r3, #0
 800b544:	e027      	b.n	800b596 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	895b      	ldrh	r3, [r3, #10]
 800b54e:	89fa      	ldrh	r2, [r7, #14]
 800b550:	429a      	cmp	r2, r3
 800b552:	d908      	bls.n	800b566 <pbuf_remove_header+0x5a>
 800b554:	4b12      	ldr	r3, [pc, #72]	; (800b5a0 <pbuf_remove_header+0x94>)
 800b556:	f240 2255 	movw	r2, #597	; 0x255
 800b55a:	4914      	ldr	r1, [pc, #80]	; (800b5ac <pbuf_remove_header+0xa0>)
 800b55c:	4812      	ldr	r0, [pc, #72]	; (800b5a8 <pbuf_remove_header+0x9c>)
 800b55e:	f008 fb99 	bl	8013c94 <iprintf>
 800b562:	2301      	movs	r3, #1
 800b564:	e017      	b.n	800b596 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685a      	ldr	r2, [r3, #4]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	441a      	add	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	895a      	ldrh	r2, [r3, #10]
 800b57c:	89fb      	ldrh	r3, [r7, #14]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	891a      	ldrh	r2, [r3, #8]
 800b58a:	89fb      	ldrh	r3, [r7, #14]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	b29a      	uxth	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	08015208 	.word	0x08015208
 800b5a4:	0801536c 	.word	0x0801536c
 800b5a8:	08015268 	.word	0x08015268
 800b5ac:	08015378 	.word	0x08015378

0800b5b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	807b      	strh	r3, [r7, #2]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b5c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	da08      	bge.n	800b5da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b5c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5cc:	425b      	negs	r3, r3
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f7ff ff9b 	bl	800b50c <pbuf_remove_header>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	e007      	b.n	800b5ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b5da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5de:	787a      	ldrb	r2, [r7, #1]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff ff1a 	bl	800b41c <pbuf_add_header_impl>
 800b5e8:	4603      	mov	r3, r0
  }
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b5fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b602:	2201      	movs	r2, #1
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff ffd2 	bl	800b5b0 <pbuf_header_impl>
 800b60c:	4603      	mov	r3, r0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b088      	sub	sp, #32
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10b      	bne.n	800b63e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d106      	bne.n	800b63a <pbuf_free+0x22>
 800b62c:	4b3b      	ldr	r3, [pc, #236]	; (800b71c <pbuf_free+0x104>)
 800b62e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b632:	493b      	ldr	r1, [pc, #236]	; (800b720 <pbuf_free+0x108>)
 800b634:	483b      	ldr	r0, [pc, #236]	; (800b724 <pbuf_free+0x10c>)
 800b636:	f008 fb2d 	bl	8013c94 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	e069      	b.n	800b712 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b642:	e062      	b.n	800b70a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b644:	f008 fac2 	bl	8013bcc <sys_arch_protect>
 800b648:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	7b9b      	ldrb	r3, [r3, #14]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <pbuf_free+0x48>
 800b652:	4b32      	ldr	r3, [pc, #200]	; (800b71c <pbuf_free+0x104>)
 800b654:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b658:	4933      	ldr	r1, [pc, #204]	; (800b728 <pbuf_free+0x110>)
 800b65a:	4832      	ldr	r0, [pc, #200]	; (800b724 <pbuf_free+0x10c>)
 800b65c:	f008 fb1a 	bl	8013c94 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7b9b      	ldrb	r3, [r3, #14]
 800b664:	3b01      	subs	r3, #1
 800b666:	b2da      	uxtb	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	739a      	strb	r2, [r3, #14]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	7b9b      	ldrb	r3, [r3, #14]
 800b670:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b672:	69b8      	ldr	r0, [r7, #24]
 800b674:	f008 fab8 	bl	8013be8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b678:	7dfb      	ldrb	r3, [r7, #23]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d143      	bne.n	800b706 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	7b1b      	ldrb	r3, [r3, #12]
 800b688:	f003 030f 	and.w	r3, r3, #15
 800b68c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	7b5b      	ldrb	r3, [r3, #13]
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d011      	beq.n	800b6be <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <pbuf_free+0x9c>
 800b6a6:	4b1d      	ldr	r3, [pc, #116]	; (800b71c <pbuf_free+0x104>)
 800b6a8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b6ac:	491f      	ldr	r1, [pc, #124]	; (800b72c <pbuf_free+0x114>)
 800b6ae:	481d      	ldr	r0, [pc, #116]	; (800b724 <pbuf_free+0x10c>)
 800b6b0:	f008 faf0 	bl	8013c94 <iprintf>
        pc->custom_free_function(p);
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	4798      	blx	r3
 800b6bc:	e01d      	b.n	800b6fa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d104      	bne.n	800b6ce <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b6c4:	6879      	ldr	r1, [r7, #4]
 800b6c6:	200c      	movs	r0, #12
 800b6c8:	f7ff f97e 	bl	800a9c8 <memp_free>
 800b6cc:	e015      	b.n	800b6fa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d104      	bne.n	800b6de <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	200b      	movs	r0, #11
 800b6d8:	f7ff f976 	bl	800a9c8 <memp_free>
 800b6dc:	e00d      	b.n	800b6fa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b6de:	7bfb      	ldrb	r3, [r7, #15]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d103      	bne.n	800b6ec <pbuf_free+0xd4>
          mem_free(p);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7fe fe01 	bl	800a2ec <mem_free>
 800b6ea:	e006      	b.n	800b6fa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b6ec:	4b0b      	ldr	r3, [pc, #44]	; (800b71c <pbuf_free+0x104>)
 800b6ee:	f240 320f 	movw	r2, #783	; 0x30f
 800b6f2:	490f      	ldr	r1, [pc, #60]	; (800b730 <pbuf_free+0x118>)
 800b6f4:	480b      	ldr	r0, [pc, #44]	; (800b724 <pbuf_free+0x10c>)
 800b6f6:	f008 facd 	bl	8013c94 <iprintf>
        }
      }
      count++;
 800b6fa:	7ffb      	ldrb	r3, [r7, #31]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	607b      	str	r3, [r7, #4]
 800b704:	e001      	b.n	800b70a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d199      	bne.n	800b644 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b710:	7ffb      	ldrb	r3, [r7, #31]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3720      	adds	r7, #32
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	08015208 	.word	0x08015208
 800b720:	0801536c 	.word	0x0801536c
 800b724:	08015268 	.word	0x08015268
 800b728:	08015398 	.word	0x08015398
 800b72c:	080153b0 	.word	0x080153b0
 800b730:	080153d4 	.word	0x080153d4

0800b734 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b73c:	2300      	movs	r3, #0
 800b73e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b740:	e005      	b.n	800b74e <pbuf_clen+0x1a>
    ++len;
 800b742:	89fb      	ldrh	r3, [r7, #14]
 800b744:	3301      	adds	r3, #1
 800b746:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1f6      	bne.n	800b742 <pbuf_clen+0xe>
  }
  return len;
 800b754:	89fb      	ldrh	r3, [r7, #14]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
	...

0800b764 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d016      	beq.n	800b7a0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b772:	f008 fa2b 	bl	8013bcc <sys_arch_protect>
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	7b9b      	ldrb	r3, [r3, #14]
 800b77c:	3301      	adds	r3, #1
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	739a      	strb	r2, [r3, #14]
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f008 fa2f 	bl	8013be8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7b9b      	ldrb	r3, [r3, #14]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <pbuf_ref+0x3c>
 800b792:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <pbuf_ref+0x44>)
 800b794:	f240 3242 	movw	r2, #834	; 0x342
 800b798:	4904      	ldr	r1, [pc, #16]	; (800b7ac <pbuf_ref+0x48>)
 800b79a:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <pbuf_ref+0x4c>)
 800b79c:	f008 fa7a 	bl	8013c94 <iprintf>
  }
}
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	08015208 	.word	0x08015208
 800b7ac:	080153e8 	.word	0x080153e8
 800b7b0:	08015268 	.word	0x08015268

0800b7b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <pbuf_cat+0x16>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d107      	bne.n	800b7da <pbuf_cat+0x26>
 800b7ca:	4b20      	ldr	r3, [pc, #128]	; (800b84c <pbuf_cat+0x98>)
 800b7cc:	f240 325a 	movw	r2, #858	; 0x35a
 800b7d0:	491f      	ldr	r1, [pc, #124]	; (800b850 <pbuf_cat+0x9c>)
 800b7d2:	4820      	ldr	r0, [pc, #128]	; (800b854 <pbuf_cat+0xa0>)
 800b7d4:	f008 fa5e 	bl	8013c94 <iprintf>
 800b7d8:	e034      	b.n	800b844 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	e00a      	b.n	800b7f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	891a      	ldrh	r2, [r3, #8]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	891b      	ldrh	r3, [r3, #8]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1f0      	bne.n	800b7e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	891a      	ldrh	r2, [r3, #8]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	895b      	ldrh	r3, [r3, #10]
 800b806:	429a      	cmp	r2, r3
 800b808:	d006      	beq.n	800b818 <pbuf_cat+0x64>
 800b80a:	4b10      	ldr	r3, [pc, #64]	; (800b84c <pbuf_cat+0x98>)
 800b80c:	f240 3262 	movw	r2, #866	; 0x362
 800b810:	4911      	ldr	r1, [pc, #68]	; (800b858 <pbuf_cat+0xa4>)
 800b812:	4810      	ldr	r0, [pc, #64]	; (800b854 <pbuf_cat+0xa0>)
 800b814:	f008 fa3e 	bl	8013c94 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d006      	beq.n	800b82e <pbuf_cat+0x7a>
 800b820:	4b0a      	ldr	r3, [pc, #40]	; (800b84c <pbuf_cat+0x98>)
 800b822:	f240 3263 	movw	r2, #867	; 0x363
 800b826:	490d      	ldr	r1, [pc, #52]	; (800b85c <pbuf_cat+0xa8>)
 800b828:	480a      	ldr	r0, [pc, #40]	; (800b854 <pbuf_cat+0xa0>)
 800b82a:	f008 fa33 	bl	8013c94 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	891a      	ldrh	r2, [r3, #8]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	891b      	ldrh	r3, [r3, #8]
 800b836:	4413      	add	r3, r2
 800b838:	b29a      	uxth	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	08015208 	.word	0x08015208
 800b850:	080153fc 	.word	0x080153fc
 800b854:	08015268 	.word	0x08015268
 800b858:	08015434 	.word	0x08015434
 800b85c:	08015464 	.word	0x08015464

0800b860 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	2300      	movs	r3, #0
 800b870:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d008      	beq.n	800b88a <pbuf_copy+0x2a>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d005      	beq.n	800b88a <pbuf_copy+0x2a>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	891a      	ldrh	r2, [r3, #8]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	891b      	ldrh	r3, [r3, #8]
 800b886:	429a      	cmp	r2, r3
 800b888:	d209      	bcs.n	800b89e <pbuf_copy+0x3e>
 800b88a:	4b57      	ldr	r3, [pc, #348]	; (800b9e8 <pbuf_copy+0x188>)
 800b88c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800b890:	4956      	ldr	r1, [pc, #344]	; (800b9ec <pbuf_copy+0x18c>)
 800b892:	4857      	ldr	r0, [pc, #348]	; (800b9f0 <pbuf_copy+0x190>)
 800b894:	f008 f9fe 	bl	8013c94 <iprintf>
 800b898:	f06f 030f 	mvn.w	r3, #15
 800b89c:	e09f      	b.n	800b9de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	895b      	ldrh	r3, [r3, #10]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	1ad2      	subs	r2, r2, r3
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	895b      	ldrh	r3, [r3, #10]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	1acb      	subs	r3, r1, r3
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d306      	bcc.n	800b8c4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	895b      	ldrh	r3, [r3, #10]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	e005      	b.n	800b8d0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	895b      	ldrh	r3, [r3, #10]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	18d0      	adds	r0, r2, r3
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	4413      	add	r3, r2
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	f008 f9c3 	bl	8013c6e <memcpy>
    offset_to += len;
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	895b      	ldrh	r3, [r3, #10]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	4293      	cmp	r3, r2
 800b902:	d906      	bls.n	800b912 <pbuf_copy+0xb2>
 800b904:	4b38      	ldr	r3, [pc, #224]	; (800b9e8 <pbuf_copy+0x188>)
 800b906:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b90a:	493a      	ldr	r1, [pc, #232]	; (800b9f4 <pbuf_copy+0x194>)
 800b90c:	4838      	ldr	r0, [pc, #224]	; (800b9f0 <pbuf_copy+0x190>)
 800b90e:	f008 f9c1 	bl	8013c94 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	895b      	ldrh	r3, [r3, #10]
 800b916:	461a      	mov	r2, r3
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d906      	bls.n	800b92c <pbuf_copy+0xcc>
 800b91e:	4b32      	ldr	r3, [pc, #200]	; (800b9e8 <pbuf_copy+0x188>)
 800b920:	f240 32da 	movw	r2, #986	; 0x3da
 800b924:	4934      	ldr	r1, [pc, #208]	; (800b9f8 <pbuf_copy+0x198>)
 800b926:	4832      	ldr	r0, [pc, #200]	; (800b9f0 <pbuf_copy+0x190>)
 800b928:	f008 f9b4 	bl	8013c94 <iprintf>
    if (offset_from >= p_from->len) {
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	895b      	ldrh	r3, [r3, #10]
 800b930:	461a      	mov	r2, r3
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	4293      	cmp	r3, r2
 800b936:	d304      	bcc.n	800b942 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	895b      	ldrh	r3, [r3, #10]
 800b946:	461a      	mov	r2, r3
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d114      	bne.n	800b978 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10c      	bne.n	800b978 <pbuf_copy+0x118>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d009      	beq.n	800b978 <pbuf_copy+0x118>
 800b964:	4b20      	ldr	r3, [pc, #128]	; (800b9e8 <pbuf_copy+0x188>)
 800b966:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b96a:	4924      	ldr	r1, [pc, #144]	; (800b9fc <pbuf_copy+0x19c>)
 800b96c:	4820      	ldr	r0, [pc, #128]	; (800b9f0 <pbuf_copy+0x190>)
 800b96e:	f008 f991 	bl	8013c94 <iprintf>
 800b972:	f06f 030f 	mvn.w	r3, #15
 800b976:	e032      	b.n	800b9de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d013      	beq.n	800b9a6 <pbuf_copy+0x146>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	895a      	ldrh	r2, [r3, #10]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	891b      	ldrh	r3, [r3, #8]
 800b986:	429a      	cmp	r2, r3
 800b988:	d10d      	bne.n	800b9a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d009      	beq.n	800b9a6 <pbuf_copy+0x146>
 800b992:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <pbuf_copy+0x188>)
 800b994:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800b998:	4919      	ldr	r1, [pc, #100]	; (800ba00 <pbuf_copy+0x1a0>)
 800b99a:	4815      	ldr	r0, [pc, #84]	; (800b9f0 <pbuf_copy+0x190>)
 800b99c:	f008 f97a 	bl	8013c94 <iprintf>
 800b9a0:	f06f 0305 	mvn.w	r3, #5
 800b9a4:	e01b      	b.n	800b9de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d013      	beq.n	800b9d4 <pbuf_copy+0x174>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	895a      	ldrh	r2, [r3, #10]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	891b      	ldrh	r3, [r3, #8]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d10d      	bne.n	800b9d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d009      	beq.n	800b9d4 <pbuf_copy+0x174>
 800b9c0:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <pbuf_copy+0x188>)
 800b9c2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b9c6:	490e      	ldr	r1, [pc, #56]	; (800ba00 <pbuf_copy+0x1a0>)
 800b9c8:	4809      	ldr	r0, [pc, #36]	; (800b9f0 <pbuf_copy+0x190>)
 800b9ca:	f008 f963 	bl	8013c94 <iprintf>
 800b9ce:	f06f 0305 	mvn.w	r3, #5
 800b9d2:	e004      	b.n	800b9de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f47f af61 	bne.w	800b89e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	08015208 	.word	0x08015208
 800b9ec:	080154b0 	.word	0x080154b0
 800b9f0:	08015268 	.word	0x08015268
 800b9f4:	080154e0 	.word	0x080154e0
 800b9f8:	080154f8 	.word	0x080154f8
 800b9fc:	08015514 	.word	0x08015514
 800ba00:	08015524 	.word	0x08015524

0800ba04 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	4611      	mov	r1, r2
 800ba10:	461a      	mov	r2, r3
 800ba12:	460b      	mov	r3, r1
 800ba14:	80fb      	strh	r3, [r7, #6]
 800ba16:	4613      	mov	r3, r2
 800ba18:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d108      	bne.n	800ba3a <pbuf_copy_partial+0x36>
 800ba28:	4b2b      	ldr	r3, [pc, #172]	; (800bad8 <pbuf_copy_partial+0xd4>)
 800ba2a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ba2e:	492b      	ldr	r1, [pc, #172]	; (800badc <pbuf_copy_partial+0xd8>)
 800ba30:	482b      	ldr	r0, [pc, #172]	; (800bae0 <pbuf_copy_partial+0xdc>)
 800ba32:	f008 f92f 	bl	8013c94 <iprintf>
 800ba36:	2300      	movs	r3, #0
 800ba38:	e04a      	b.n	800bad0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d108      	bne.n	800ba52 <pbuf_copy_partial+0x4e>
 800ba40:	4b25      	ldr	r3, [pc, #148]	; (800bad8 <pbuf_copy_partial+0xd4>)
 800ba42:	f240 420b 	movw	r2, #1035	; 0x40b
 800ba46:	4927      	ldr	r1, [pc, #156]	; (800bae4 <pbuf_copy_partial+0xe0>)
 800ba48:	4825      	ldr	r0, [pc, #148]	; (800bae0 <pbuf_copy_partial+0xdc>)
 800ba4a:	f008 f923 	bl	8013c94 <iprintf>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e03e      	b.n	800bad0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	61fb      	str	r3, [r7, #28]
 800ba56:	e034      	b.n	800bac2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ba58:	88bb      	ldrh	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <pbuf_copy_partial+0x70>
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	895b      	ldrh	r3, [r3, #10]
 800ba62:	88ba      	ldrh	r2, [r7, #4]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d305      	bcc.n	800ba74 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	895b      	ldrh	r3, [r3, #10]
 800ba6c:	88ba      	ldrh	r2, [r7, #4]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	80bb      	strh	r3, [r7, #4]
 800ba72:	e023      	b.n	800babc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	895a      	ldrh	r2, [r3, #10]
 800ba78:	88bb      	ldrh	r3, [r7, #4]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ba7e:	8b3a      	ldrh	r2, [r7, #24]
 800ba80:	88fb      	ldrh	r3, [r7, #6]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d901      	bls.n	800ba8a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ba86:	88fb      	ldrh	r3, [r7, #6]
 800ba88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ba8a:	8b7b      	ldrh	r3, [r7, #26]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	18d0      	adds	r0, r2, r3
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	88bb      	ldrh	r3, [r7, #4]
 800ba96:	4413      	add	r3, r2
 800ba98:	8b3a      	ldrh	r2, [r7, #24]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	f008 f8e7 	bl	8013c6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800baa0:	8afa      	ldrh	r2, [r7, #22]
 800baa2:	8b3b      	ldrh	r3, [r7, #24]
 800baa4:	4413      	add	r3, r2
 800baa6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800baa8:	8b7a      	ldrh	r2, [r7, #26]
 800baaa:	8b3b      	ldrh	r3, [r7, #24]
 800baac:	4413      	add	r3, r2
 800baae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bab0:	88fa      	ldrh	r2, [r7, #6]
 800bab2:	8b3b      	ldrh	r3, [r7, #24]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	61fb      	str	r3, [r7, #28]
 800bac2:	88fb      	ldrh	r3, [r7, #6]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <pbuf_copy_partial+0xca>
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1c4      	bne.n	800ba58 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bace:	8afb      	ldrh	r3, [r7, #22]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3720      	adds	r7, #32
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	08015208 	.word	0x08015208
 800badc:	08015550 	.word	0x08015550
 800bae0:	08015268 	.word	0x08015268
 800bae4:	08015570 	.word	0x08015570

0800bae8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	603a      	str	r2, [r7, #0]
 800baf2:	71fb      	strb	r3, [r7, #7]
 800baf4:	460b      	mov	r3, r1
 800baf6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	8919      	ldrh	r1, [r3, #8]
 800bafc:	88ba      	ldrh	r2, [r7, #4]
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff faa9 	bl	800b058 <pbuf_alloc>
 800bb06:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d101      	bne.n	800bb12 <pbuf_clone+0x2a>
    return NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	e011      	b.n	800bb36 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f7ff fea3 	bl	800b860 <pbuf_copy>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bb1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d006      	beq.n	800bb34 <pbuf_clone+0x4c>
 800bb26:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <pbuf_clone+0x58>)
 800bb28:	f240 5224 	movw	r2, #1316	; 0x524
 800bb2c:	4905      	ldr	r1, [pc, #20]	; (800bb44 <pbuf_clone+0x5c>)
 800bb2e:	4806      	ldr	r0, [pc, #24]	; (800bb48 <pbuf_clone+0x60>)
 800bb30:	f008 f8b0 	bl	8013c94 <iprintf>
  return q;
 800bb34:	68fb      	ldr	r3, [r7, #12]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	08015208 	.word	0x08015208
 800bb44:	0801567c 	.word	0x0801567c
 800bb48:	08015268 	.word	0x08015268

0800bb4c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bb50:	f008 f8b8 	bl	8013cc4 <rand>
 800bb54:	4603      	mov	r3, r0
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	4b01      	ldr	r3, [pc, #4]	; (800bb6c <tcp_init+0x20>)
 800bb66:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bb68:	bf00      	nop
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20000010 	.word	0x20000010

0800bb70 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	7d1b      	ldrb	r3, [r3, #20]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d105      	bne.n	800bb8c <tcp_free+0x1c>
 800bb80:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <tcp_free+0x2c>)
 800bb82:	22d4      	movs	r2, #212	; 0xd4
 800bb84:	4906      	ldr	r1, [pc, #24]	; (800bba0 <tcp_free+0x30>)
 800bb86:	4807      	ldr	r0, [pc, #28]	; (800bba4 <tcp_free+0x34>)
 800bb88:	f008 f884 	bl	8013c94 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	2001      	movs	r0, #1
 800bb90:	f7fe ff1a 	bl	800a9c8 <memp_free>
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	08015708 	.word	0x08015708
 800bba0:	08015738 	.word	0x08015738
 800bba4:	0801574c 	.word	0x0801574c

0800bba8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	7d1b      	ldrb	r3, [r3, #20]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d105      	bne.n	800bbc4 <tcp_free_listen+0x1c>
 800bbb8:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <tcp_free_listen+0x2c>)
 800bbba:	22df      	movs	r2, #223	; 0xdf
 800bbbc:	4906      	ldr	r1, [pc, #24]	; (800bbd8 <tcp_free_listen+0x30>)
 800bbbe:	4807      	ldr	r0, [pc, #28]	; (800bbdc <tcp_free_listen+0x34>)
 800bbc0:	f008 f868 	bl	8013c94 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	2002      	movs	r0, #2
 800bbc8:	f7fe fefe 	bl	800a9c8 <memp_free>
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	08015708 	.word	0x08015708
 800bbd8:	08015774 	.word	0x08015774
 800bbdc:	0801574c 	.word	0x0801574c

0800bbe0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bbe4:	f000 fe98 	bl	800c918 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bbe8:	4b07      	ldr	r3, [pc, #28]	; (800bc08 <tcp_tmr+0x28>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	3301      	adds	r3, #1
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <tcp_tmr+0x28>)
 800bbf2:	701a      	strb	r2, [r3, #0]
 800bbf4:	4b04      	ldr	r3, [pc, #16]	; (800bc08 <tcp_tmr+0x28>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bc00:	f000 fb4c 	bl	800c29c <tcp_slowtmr>
  }
}
 800bc04:	bf00      	nop
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	2000eef5 	.word	0x2000eef5

0800bc0c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d105      	bne.n	800bc28 <tcp_remove_listener+0x1c>
 800bc1c:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <tcp_remove_listener+0x48>)
 800bc1e:	22ff      	movs	r2, #255	; 0xff
 800bc20:	490d      	ldr	r1, [pc, #52]	; (800bc58 <tcp_remove_listener+0x4c>)
 800bc22:	480e      	ldr	r0, [pc, #56]	; (800bc5c <tcp_remove_listener+0x50>)
 800bc24:	f008 f836 	bl	8013c94 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	e00a      	b.n	800bc44 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d102      	bne.n	800bc3e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1f1      	bne.n	800bc2e <tcp_remove_listener+0x22>
    }
  }
}
 800bc4a:	bf00      	nop
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	08015708 	.word	0x08015708
 800bc58:	08015790 	.word	0x08015790
 800bc5c:	0801574c 	.word	0x0801574c

0800bc60 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <tcp_listen_closed+0x1c>
 800bc6e:	4b14      	ldr	r3, [pc, #80]	; (800bcc0 <tcp_listen_closed+0x60>)
 800bc70:	f240 1211 	movw	r2, #273	; 0x111
 800bc74:	4913      	ldr	r1, [pc, #76]	; (800bcc4 <tcp_listen_closed+0x64>)
 800bc76:	4814      	ldr	r0, [pc, #80]	; (800bcc8 <tcp_listen_closed+0x68>)
 800bc78:	f008 f80c 	bl	8013c94 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	7d1b      	ldrb	r3, [r3, #20]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d006      	beq.n	800bc92 <tcp_listen_closed+0x32>
 800bc84:	4b0e      	ldr	r3, [pc, #56]	; (800bcc0 <tcp_listen_closed+0x60>)
 800bc86:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bc8a:	4910      	ldr	r1, [pc, #64]	; (800bccc <tcp_listen_closed+0x6c>)
 800bc8c:	480e      	ldr	r0, [pc, #56]	; (800bcc8 <tcp_listen_closed+0x68>)
 800bc8e:	f008 f801 	bl	8013c94 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc92:	2301      	movs	r3, #1
 800bc94:	60fb      	str	r3, [r7, #12]
 800bc96:	e00b      	b.n	800bcb0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bc98:	4a0d      	ldr	r2, [pc, #52]	; (800bcd0 <tcp_listen_closed+0x70>)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff ffb1 	bl	800bc0c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3301      	adds	r3, #1
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d9f0      	bls.n	800bc98 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bcb6:	bf00      	nop
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	08015708 	.word	0x08015708
 800bcc4:	080157b8 	.word	0x080157b8
 800bcc8:	0801574c 	.word	0x0801574c
 800bccc:	080157c4 	.word	0x080157c4
 800bcd0:	0801771c 	.word	0x0801771c

0800bcd4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bcd4:	b5b0      	push	{r4, r5, r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af04      	add	r7, sp, #16
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d106      	bne.n	800bcf4 <tcp_close_shutdown+0x20>
 800bce6:	4b61      	ldr	r3, [pc, #388]	; (800be6c <tcp_close_shutdown+0x198>)
 800bce8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bcec:	4960      	ldr	r1, [pc, #384]	; (800be70 <tcp_close_shutdown+0x19c>)
 800bcee:	4861      	ldr	r0, [pc, #388]	; (800be74 <tcp_close_shutdown+0x1a0>)
 800bcf0:	f007 ffd0 	bl	8013c94 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bcf4:	78fb      	ldrb	r3, [r7, #3]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d066      	beq.n	800bdc8 <tcp_close_shutdown+0xf4>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	7d1b      	ldrb	r3, [r3, #20]
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d003      	beq.n	800bd0a <tcp_close_shutdown+0x36>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	7d1b      	ldrb	r3, [r3, #20]
 800bd06:	2b07      	cmp	r3, #7
 800bd08:	d15e      	bne.n	800bdc8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d104      	bne.n	800bd1c <tcp_close_shutdown+0x48>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bd1a:	d055      	beq.n	800bdc8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	8b5b      	ldrh	r3, [r3, #26]
 800bd20:	f003 0310 	and.w	r3, r3, #16
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d106      	bne.n	800bd36 <tcp_close_shutdown+0x62>
 800bd28:	4b50      	ldr	r3, [pc, #320]	; (800be6c <tcp_close_shutdown+0x198>)
 800bd2a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bd2e:	4952      	ldr	r1, [pc, #328]	; (800be78 <tcp_close_shutdown+0x1a4>)
 800bd30:	4850      	ldr	r0, [pc, #320]	; (800be74 <tcp_close_shutdown+0x1a0>)
 800bd32:	f007 ffaf 	bl	8013c94 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bd3e:	687d      	ldr	r5, [r7, #4]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3304      	adds	r3, #4
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	8ad2      	ldrh	r2, [r2, #22]
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	8b09      	ldrh	r1, [r1, #24]
 800bd4c:	9102      	str	r1, [sp, #8]
 800bd4e:	9201      	str	r2, [sp, #4]
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	462b      	mov	r3, r5
 800bd54:	4622      	mov	r2, r4
 800bd56:	4601      	mov	r1, r0
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f004 fe91 	bl	8010a80 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f001 f8ba 	bl	800ced8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bd64:	4b45      	ldr	r3, [pc, #276]	; (800be7c <tcp_close_shutdown+0x1a8>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d105      	bne.n	800bd7a <tcp_close_shutdown+0xa6>
 800bd6e:	4b43      	ldr	r3, [pc, #268]	; (800be7c <tcp_close_shutdown+0x1a8>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	4a41      	ldr	r2, [pc, #260]	; (800be7c <tcp_close_shutdown+0x1a8>)
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	e013      	b.n	800bda2 <tcp_close_shutdown+0xce>
 800bd7a:	4b40      	ldr	r3, [pc, #256]	; (800be7c <tcp_close_shutdown+0x1a8>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	60fb      	str	r3, [r7, #12]
 800bd80:	e00c      	b.n	800bd9c <tcp_close_shutdown+0xc8>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d104      	bne.n	800bd96 <tcp_close_shutdown+0xc2>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	60da      	str	r2, [r3, #12]
 800bd94:	e005      	b.n	800bda2 <tcp_close_shutdown+0xce>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1ef      	bne.n	800bd82 <tcp_close_shutdown+0xae>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	60da      	str	r2, [r3, #12]
 800bda8:	4b35      	ldr	r3, [pc, #212]	; (800be80 <tcp_close_shutdown+0x1ac>)
 800bdaa:	2201      	movs	r2, #1
 800bdac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bdae:	4b35      	ldr	r3, [pc, #212]	; (800be84 <tcp_close_shutdown+0x1b0>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d102      	bne.n	800bdbe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bdb8:	f003 fd4c 	bl	800f854 <tcp_trigger_input_pcb_close>
 800bdbc:	e002      	b.n	800bdc4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff fed6 	bl	800bb70 <tcp_free>
      }
      return ERR_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e04d      	b.n	800be64 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7d1b      	ldrb	r3, [r3, #20]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d02d      	beq.n	800be2c <tcp_close_shutdown+0x158>
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d036      	beq.n	800be42 <tcp_close_shutdown+0x16e>
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d13f      	bne.n	800be58 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	8adb      	ldrh	r3, [r3, #22]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d021      	beq.n	800be24 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bde0:	4b29      	ldr	r3, [pc, #164]	; (800be88 <tcp_close_shutdown+0x1b4>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d105      	bne.n	800bdf6 <tcp_close_shutdown+0x122>
 800bdea:	4b27      	ldr	r3, [pc, #156]	; (800be88 <tcp_close_shutdown+0x1b4>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	4a25      	ldr	r2, [pc, #148]	; (800be88 <tcp_close_shutdown+0x1b4>)
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	e013      	b.n	800be1e <tcp_close_shutdown+0x14a>
 800bdf6:	4b24      	ldr	r3, [pc, #144]	; (800be88 <tcp_close_shutdown+0x1b4>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60bb      	str	r3, [r7, #8]
 800bdfc:	e00c      	b.n	800be18 <tcp_close_shutdown+0x144>
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	429a      	cmp	r2, r3
 800be06:	d104      	bne.n	800be12 <tcp_close_shutdown+0x13e>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	68da      	ldr	r2, [r3, #12]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	60da      	str	r2, [r3, #12]
 800be10:	e005      	b.n	800be1e <tcp_close_shutdown+0x14a>
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	60bb      	str	r3, [r7, #8]
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1ef      	bne.n	800bdfe <tcp_close_shutdown+0x12a>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff fea3 	bl	800bb70 <tcp_free>
      break;
 800be2a:	e01a      	b.n	800be62 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7ff ff17 	bl	800bc60 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800be32:	6879      	ldr	r1, [r7, #4]
 800be34:	4815      	ldr	r0, [pc, #84]	; (800be8c <tcp_close_shutdown+0x1b8>)
 800be36:	f001 f89f 	bl	800cf78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7ff feb4 	bl	800bba8 <tcp_free_listen>
      break;
 800be40:	e00f      	b.n	800be62 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	480d      	ldr	r0, [pc, #52]	; (800be7c <tcp_close_shutdown+0x1a8>)
 800be46:	f001 f897 	bl	800cf78 <tcp_pcb_remove>
 800be4a:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <tcp_close_shutdown+0x1ac>)
 800be4c:	2201      	movs	r2, #1
 800be4e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff fe8d 	bl	800bb70 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800be56:	e004      	b.n	800be62 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f819 	bl	800be90 <tcp_close_shutdown_fin>
 800be5e:	4603      	mov	r3, r0
 800be60:	e000      	b.n	800be64 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bdb0      	pop	{r4, r5, r7, pc}
 800be6c:	08015708 	.word	0x08015708
 800be70:	080157dc 	.word	0x080157dc
 800be74:	0801574c 	.word	0x0801574c
 800be78:	080157fc 	.word	0x080157fc
 800be7c:	20015ed4 	.word	0x20015ed4
 800be80:	20015ed0 	.word	0x20015ed0
 800be84:	20015ee8 	.word	0x20015ee8
 800be88:	20015ee0 	.word	0x20015ee0
 800be8c:	20015edc 	.word	0x20015edc

0800be90 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d106      	bne.n	800beac <tcp_close_shutdown_fin+0x1c>
 800be9e:	4b2c      	ldr	r3, [pc, #176]	; (800bf50 <tcp_close_shutdown_fin+0xc0>)
 800bea0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bea4:	492b      	ldr	r1, [pc, #172]	; (800bf54 <tcp_close_shutdown_fin+0xc4>)
 800bea6:	482c      	ldr	r0, [pc, #176]	; (800bf58 <tcp_close_shutdown_fin+0xc8>)
 800bea8:	f007 fef4 	bl	8013c94 <iprintf>

  switch (pcb->state) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	7d1b      	ldrb	r3, [r3, #20]
 800beb0:	2b04      	cmp	r3, #4
 800beb2:	d010      	beq.n	800bed6 <tcp_close_shutdown_fin+0x46>
 800beb4:	2b07      	cmp	r3, #7
 800beb6:	d01b      	beq.n	800bef0 <tcp_close_shutdown_fin+0x60>
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d126      	bne.n	800bf0a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f003 fedb 	bl	800fc78 <tcp_send_fin>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d11f      	bne.n	800bf0e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2205      	movs	r2, #5
 800bed2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bed4:	e01b      	b.n	800bf0e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f003 fece 	bl	800fc78 <tcp_send_fin>
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d114      	bne.n	800bf12 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2205      	movs	r2, #5
 800beec:	751a      	strb	r2, [r3, #20]
      }
      break;
 800beee:	e010      	b.n	800bf12 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f003 fec1 	bl	800fc78 <tcp_send_fin>
 800bef6:	4603      	mov	r3, r0
 800bef8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800befa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d109      	bne.n	800bf16 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2209      	movs	r2, #9
 800bf06:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf08:	e005      	b.n	800bf16 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e01c      	b.n	800bf48 <tcp_close_shutdown_fin+0xb8>
      break;
 800bf0e:	bf00      	nop
 800bf10:	e002      	b.n	800bf18 <tcp_close_shutdown_fin+0x88>
      break;
 800bf12:	bf00      	nop
 800bf14:	e000      	b.n	800bf18 <tcp_close_shutdown_fin+0x88>
      break;
 800bf16:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bf18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d103      	bne.n	800bf28 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f003 ffe7 	bl	800fef4 <tcp_output>
 800bf26:	e00d      	b.n	800bf44 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800bf28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf30:	d108      	bne.n	800bf44 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	8b5b      	ldrh	r3, [r3, #26]
 800bf36:	f043 0308 	orr.w	r3, r3, #8
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e001      	b.n	800bf48 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800bf44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	08015708 	.word	0x08015708
 800bf54:	080157b8 	.word	0x080157b8
 800bf58:	0801574c 	.word	0x0801574c

0800bf5c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d109      	bne.n	800bf7e <tcp_close+0x22>
 800bf6a:	4b0f      	ldr	r3, [pc, #60]	; (800bfa8 <tcp_close+0x4c>)
 800bf6c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bf70:	490e      	ldr	r1, [pc, #56]	; (800bfac <tcp_close+0x50>)
 800bf72:	480f      	ldr	r0, [pc, #60]	; (800bfb0 <tcp_close+0x54>)
 800bf74:	f007 fe8e 	bl	8013c94 <iprintf>
 800bf78:	f06f 030f 	mvn.w	r3, #15
 800bf7c:	e00f      	b.n	800bf9e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	7d1b      	ldrb	r3, [r3, #20]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d006      	beq.n	800bf94 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	8b5b      	ldrh	r3, [r3, #26]
 800bf8a:	f043 0310 	orr.w	r3, r3, #16
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bf94:	2101      	movs	r1, #1
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7ff fe9c 	bl	800bcd4 <tcp_close_shutdown>
 800bf9c:	4603      	mov	r3, r0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	08015708 	.word	0x08015708
 800bfac:	08015818 	.word	0x08015818
 800bfb0:	0801574c 	.word	0x0801574c

0800bfb4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08e      	sub	sp, #56	; 0x38
 800bfb8:	af04      	add	r7, sp, #16
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d107      	bne.n	800bfd4 <tcp_abandon+0x20>
 800bfc4:	4b52      	ldr	r3, [pc, #328]	; (800c110 <tcp_abandon+0x15c>)
 800bfc6:	f240 223d 	movw	r2, #573	; 0x23d
 800bfca:	4952      	ldr	r1, [pc, #328]	; (800c114 <tcp_abandon+0x160>)
 800bfcc:	4852      	ldr	r0, [pc, #328]	; (800c118 <tcp_abandon+0x164>)
 800bfce:	f007 fe61 	bl	8013c94 <iprintf>
 800bfd2:	e099      	b.n	800c108 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	7d1b      	ldrb	r3, [r3, #20]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d106      	bne.n	800bfea <tcp_abandon+0x36>
 800bfdc:	4b4c      	ldr	r3, [pc, #304]	; (800c110 <tcp_abandon+0x15c>)
 800bfde:	f240 2241 	movw	r2, #577	; 0x241
 800bfe2:	494e      	ldr	r1, [pc, #312]	; (800c11c <tcp_abandon+0x168>)
 800bfe4:	484c      	ldr	r0, [pc, #304]	; (800c118 <tcp_abandon+0x164>)
 800bfe6:	f007 fe55 	bl	8013c94 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	7d1b      	ldrb	r3, [r3, #20]
 800bfee:	2b0a      	cmp	r3, #10
 800bff0:	d107      	bne.n	800c002 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bff2:	6879      	ldr	r1, [r7, #4]
 800bff4:	484a      	ldr	r0, [pc, #296]	; (800c120 <tcp_abandon+0x16c>)
 800bff6:	f000 ffbf 	bl	800cf78 <tcp_pcb_remove>
    tcp_free(pcb);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fdb8 	bl	800bb70 <tcp_free>
 800c000:	e082      	b.n	800c108 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c00e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c014:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c01c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	7d1b      	ldrb	r3, [r3, #20]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d126      	bne.n	800c07a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	8adb      	ldrh	r3, [r3, #22]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d02e      	beq.n	800c092 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c034:	4b3b      	ldr	r3, [pc, #236]	; (800c124 <tcp_abandon+0x170>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d105      	bne.n	800c04a <tcp_abandon+0x96>
 800c03e:	4b39      	ldr	r3, [pc, #228]	; (800c124 <tcp_abandon+0x170>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	4a37      	ldr	r2, [pc, #220]	; (800c124 <tcp_abandon+0x170>)
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	e013      	b.n	800c072 <tcp_abandon+0xbe>
 800c04a:	4b36      	ldr	r3, [pc, #216]	; (800c124 <tcp_abandon+0x170>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	61fb      	str	r3, [r7, #28]
 800c050:	e00c      	b.n	800c06c <tcp_abandon+0xb8>
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d104      	bne.n	800c066 <tcp_abandon+0xb2>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	60da      	str	r2, [r3, #12]
 800c064:	e005      	b.n	800c072 <tcp_abandon+0xbe>
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	61fb      	str	r3, [r7, #28]
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1ef      	bne.n	800c052 <tcp_abandon+0x9e>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	60da      	str	r2, [r3, #12]
 800c078:	e00b      	b.n	800c092 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	8adb      	ldrh	r3, [r3, #22]
 800c082:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	4828      	ldr	r0, [pc, #160]	; (800c128 <tcp_abandon+0x174>)
 800c088:	f000 ff76 	bl	800cf78 <tcp_pcb_remove>
 800c08c:	4b27      	ldr	r3, [pc, #156]	; (800c12c <tcp_abandon+0x178>)
 800c08e:	2201      	movs	r2, #1
 800c090:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c096:	2b00      	cmp	r3, #0
 800c098:	d004      	beq.n	800c0a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 fd1a 	bl	800cad8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d004      	beq.n	800c0b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 fd11 	bl	800cad8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d004      	beq.n	800c0c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 fd08 	bl	800cad8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00e      	beq.n	800c0ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	8b12      	ldrh	r2, [r2, #24]
 800c0d8:	9202      	str	r2, [sp, #8]
 800c0da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c0dc:	9201      	str	r2, [sp, #4]
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	697a      	ldr	r2, [r7, #20]
 800c0e4:	69b9      	ldr	r1, [r7, #24]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f004 fcca 	bl	8010a80 <tcp_rst>
    }
    last_state = pcb->state;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7d1b      	ldrb	r3, [r3, #20]
 800c0f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff fd3c 	bl	800bb70 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d004      	beq.n	800c108 <tcp_abandon+0x154>
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f06f 010c 	mvn.w	r1, #12
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	4798      	blx	r3
  }
}
 800c108:	3728      	adds	r7, #40	; 0x28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	08015708 	.word	0x08015708
 800c114:	0801584c 	.word	0x0801584c
 800c118:	0801574c 	.word	0x0801574c
 800c11c:	08015868 	.word	0x08015868
 800c120:	20015ee4 	.word	0x20015ee4
 800c124:	20015ee0 	.word	0x20015ee0
 800c128:	20015ed4 	.word	0x20015ed4
 800c12c:	20015ed0 	.word	0x20015ed0

0800c130 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c138:	2101      	movs	r1, #1
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7ff ff3a 	bl	800bfb4 <tcp_abandon>
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d106      	bne.n	800c164 <tcp_update_rcv_ann_wnd+0x1c>
 800c156:	4b25      	ldr	r3, [pc, #148]	; (800c1ec <tcp_update_rcv_ann_wnd+0xa4>)
 800c158:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c15c:	4924      	ldr	r1, [pc, #144]	; (800c1f0 <tcp_update_rcv_ann_wnd+0xa8>)
 800c15e:	4825      	ldr	r0, [pc, #148]	; (800c1f4 <tcp_update_rcv_ann_wnd+0xac>)
 800c160:	f007 fd98 	bl	8013c94 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c16c:	4413      	add	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c178:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c17c:	bf28      	it	cs
 800c17e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c182:	b292      	uxth	r2, r2
 800c184:	4413      	add	r3, r2
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	db08      	blt.n	800c1a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	e020      	b.n	800c1e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	dd03      	ble.n	800c1b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c1b4:	e014      	b.n	800c1e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1c8:	d306      	bcc.n	800c1d8 <tcp_update_rcv_ann_wnd+0x90>
 800c1ca:	4b08      	ldr	r3, [pc, #32]	; (800c1ec <tcp_update_rcv_ann_wnd+0xa4>)
 800c1cc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c1d0:	4909      	ldr	r1, [pc, #36]	; (800c1f8 <tcp_update_rcv_ann_wnd+0xb0>)
 800c1d2:	4808      	ldr	r0, [pc, #32]	; (800c1f4 <tcp_update_rcv_ann_wnd+0xac>)
 800c1d4:	f007 fd5e 	bl	8013c94 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c1e0:	2300      	movs	r3, #0
  }
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	08015708 	.word	0x08015708
 800c1f0:	08015964 	.word	0x08015964
 800c1f4:	0801574c 	.word	0x0801574c
 800c1f8:	08015988 	.word	0x08015988

0800c1fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	460b      	mov	r3, r1
 800c206:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d107      	bne.n	800c21e <tcp_recved+0x22>
 800c20e:	4b1f      	ldr	r3, [pc, #124]	; (800c28c <tcp_recved+0x90>)
 800c210:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c214:	491e      	ldr	r1, [pc, #120]	; (800c290 <tcp_recved+0x94>)
 800c216:	481f      	ldr	r0, [pc, #124]	; (800c294 <tcp_recved+0x98>)
 800c218:	f007 fd3c 	bl	8013c94 <iprintf>
 800c21c:	e032      	b.n	800c284 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	7d1b      	ldrb	r3, [r3, #20]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d106      	bne.n	800c234 <tcp_recved+0x38>
 800c226:	4b19      	ldr	r3, [pc, #100]	; (800c28c <tcp_recved+0x90>)
 800c228:	f240 32d3 	movw	r2, #979	; 0x3d3
 800c22c:	491a      	ldr	r1, [pc, #104]	; (800c298 <tcp_recved+0x9c>)
 800c22e:	4819      	ldr	r0, [pc, #100]	; (800c294 <tcp_recved+0x98>)
 800c230:	f007 fd30 	bl	8013c94 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c238:	887b      	ldrh	r3, [r7, #2]
 800c23a:	4413      	add	r3, r2
 800c23c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c23e:	89fb      	ldrh	r3, [r7, #14]
 800c240:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c244:	d804      	bhi.n	800c250 <tcp_recved+0x54>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c24a:	89fa      	ldrh	r2, [r7, #14]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d204      	bcs.n	800c25a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c256:	851a      	strh	r2, [r3, #40]	; 0x28
 800c258:	e002      	b.n	800c260 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	89fa      	ldrh	r2, [r7, #14]
 800c25e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7ff ff71 	bl	800c148 <tcp_update_rcv_ann_wnd>
 800c266:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c26e:	d309      	bcc.n	800c284 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	8b5b      	ldrh	r3, [r3, #26]
 800c274:	f043 0302 	orr.w	r3, r3, #2
 800c278:	b29a      	uxth	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f003 fe38 	bl	800fef4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	08015708 	.word	0x08015708
 800c290:	080159a4 	.word	0x080159a4
 800c294:	0801574c 	.word	0x0801574c
 800c298:	080159bc 	.word	0x080159bc

0800c29c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c29c:	b5b0      	push	{r4, r5, r7, lr}
 800c29e:	b090      	sub	sp, #64	; 0x40
 800c2a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c2a8:	4b94      	ldr	r3, [pc, #592]	; (800c4fc <tcp_slowtmr+0x260>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	4a93      	ldr	r2, [pc, #588]	; (800c4fc <tcp_slowtmr+0x260>)
 800c2b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c2b2:	4b93      	ldr	r3, [pc, #588]	; (800c500 <tcp_slowtmr+0x264>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	4b91      	ldr	r3, [pc, #580]	; (800c500 <tcp_slowtmr+0x264>)
 800c2bc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c2c2:	4b90      	ldr	r3, [pc, #576]	; (800c504 <tcp_slowtmr+0x268>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c2c8:	e29d      	b.n	800c806 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	7d1b      	ldrb	r3, [r3, #20]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d106      	bne.n	800c2e0 <tcp_slowtmr+0x44>
 800c2d2:	4b8d      	ldr	r3, [pc, #564]	; (800c508 <tcp_slowtmr+0x26c>)
 800c2d4:	f240 42be 	movw	r2, #1214	; 0x4be
 800c2d8:	498c      	ldr	r1, [pc, #560]	; (800c50c <tcp_slowtmr+0x270>)
 800c2da:	488d      	ldr	r0, [pc, #564]	; (800c510 <tcp_slowtmr+0x274>)
 800c2dc:	f007 fcda 	bl	8013c94 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	7d1b      	ldrb	r3, [r3, #20]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d106      	bne.n	800c2f6 <tcp_slowtmr+0x5a>
 800c2e8:	4b87      	ldr	r3, [pc, #540]	; (800c508 <tcp_slowtmr+0x26c>)
 800c2ea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c2ee:	4989      	ldr	r1, [pc, #548]	; (800c514 <tcp_slowtmr+0x278>)
 800c2f0:	4887      	ldr	r0, [pc, #540]	; (800c510 <tcp_slowtmr+0x274>)
 800c2f2:	f007 fccf 	bl	8013c94 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	7d1b      	ldrb	r3, [r3, #20]
 800c2fa:	2b0a      	cmp	r3, #10
 800c2fc:	d106      	bne.n	800c30c <tcp_slowtmr+0x70>
 800c2fe:	4b82      	ldr	r3, [pc, #520]	; (800c508 <tcp_slowtmr+0x26c>)
 800c300:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c304:	4984      	ldr	r1, [pc, #528]	; (800c518 <tcp_slowtmr+0x27c>)
 800c306:	4882      	ldr	r0, [pc, #520]	; (800c510 <tcp_slowtmr+0x274>)
 800c308:	f007 fcc4 	bl	8013c94 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	7f9a      	ldrb	r2, [r3, #30]
 800c310:	4b7b      	ldr	r3, [pc, #492]	; (800c500 <tcp_slowtmr+0x264>)
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	429a      	cmp	r2, r3
 800c316:	d105      	bne.n	800c324 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c322:	e270      	b.n	800c806 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c324:	4b76      	ldr	r3, [pc, #472]	; (800c500 <tcp_slowtmr+0x264>)
 800c326:	781a      	ldrb	r2, [r3, #0]
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	7d1b      	ldrb	r3, [r3, #20]
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d10a      	bne.n	800c356 <tcp_slowtmr+0xba>
 800c340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c346:	2b05      	cmp	r3, #5
 800c348:	d905      	bls.n	800c356 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c34e:	3301      	adds	r3, #1
 800c350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c354:	e11e      	b.n	800c594 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c35c:	2b0b      	cmp	r3, #11
 800c35e:	d905      	bls.n	800c36c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c364:	3301      	adds	r3, #1
 800c366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c36a:	e113      	b.n	800c594 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c372:	2b00      	cmp	r3, #0
 800c374:	d075      	beq.n	800c462 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d006      	beq.n	800c38c <tcp_slowtmr+0xf0>
 800c37e:	4b62      	ldr	r3, [pc, #392]	; (800c508 <tcp_slowtmr+0x26c>)
 800c380:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c384:	4965      	ldr	r1, [pc, #404]	; (800c51c <tcp_slowtmr+0x280>)
 800c386:	4862      	ldr	r0, [pc, #392]	; (800c510 <tcp_slowtmr+0x274>)
 800c388:	f007 fc84 	bl	8013c94 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c390:	2b00      	cmp	r3, #0
 800c392:	d106      	bne.n	800c3a2 <tcp_slowtmr+0x106>
 800c394:	4b5c      	ldr	r3, [pc, #368]	; (800c508 <tcp_slowtmr+0x26c>)
 800c396:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c39a:	4961      	ldr	r1, [pc, #388]	; (800c520 <tcp_slowtmr+0x284>)
 800c39c:	485c      	ldr	r0, [pc, #368]	; (800c510 <tcp_slowtmr+0x274>)
 800c39e:	f007 fc79 	bl	8013c94 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c3a8:	2b0b      	cmp	r3, #11
 800c3aa:	d905      	bls.n	800c3b8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3b6:	e0ed      	b.n	800c594 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	4a58      	ldr	r2, [pc, #352]	; (800c524 <tcp_slowtmr+0x288>)
 800c3c2:	5cd3      	ldrb	r3, [r2, r3]
 800c3c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3cc:	7c7a      	ldrb	r2, [r7, #17]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d907      	bls.n	800c3e2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3d8:	3301      	adds	r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3e8:	7c7a      	ldrb	r2, [r7, #17]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	f200 80d2 	bhi.w	800c594 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d108      	bne.n	800c410 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c400:	f004 fc32 	bl	8010c68 <tcp_zero_window_probe>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d014      	beq.n	800c434 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c40a:	2300      	movs	r3, #0
 800c40c:	623b      	str	r3, [r7, #32]
 800c40e:	e011      	b.n	800c434 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c416:	4619      	mov	r1, r3
 800c418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c41a:	f003 fae5 	bl	800f9e8 <tcp_split_unsent_seg>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d107      	bne.n	800c434 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c426:	f003 fd65 	bl	800fef4 <tcp_output>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c434:	6a3b      	ldr	r3, [r7, #32]
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 80ac 	beq.w	800c594 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c44a:	2b06      	cmp	r3, #6
 800c44c:	f200 80a2 	bhi.w	800c594 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c456:	3301      	adds	r3, #1
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c460:	e098      	b.n	800c594 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c468:	2b00      	cmp	r3, #0
 800c46a:	db0f      	blt.n	800c48c <tcp_slowtmr+0x1f0>
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c472:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c476:	4293      	cmp	r3, r2
 800c478:	d008      	beq.n	800c48c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c480:	b29b      	uxth	r3, r3
 800c482:	3301      	adds	r3, #1
 800c484:	b29b      	uxth	r3, r3
 800c486:	b21a      	sxth	r2, r3
 800c488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c498:	429a      	cmp	r2, r3
 800c49a:	db7b      	blt.n	800c594 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c49c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c49e:	f004 f821 	bl	80104e4 <tcp_rexmit_rto_prepare>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d007      	beq.n	800c4b8 <tcp_slowtmr+0x21c>
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d171      	bne.n	800c594 <tcp_slowtmr+0x2f8>
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d06d      	beq.n	800c594 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	7d1b      	ldrb	r3, [r3, #20]
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d03a      	beq.n	800c536 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4c6:	2b0c      	cmp	r3, #12
 800c4c8:	bf28      	it	cs
 800c4ca:	230c      	movcs	r3, #12
 800c4cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c4d4:	10db      	asrs	r3, r3, #3
 800c4d6:	b21b      	sxth	r3, r3
 800c4d8:	461a      	mov	r2, r3
 800c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c4e0:	4413      	add	r3, r2
 800c4e2:	7efa      	ldrb	r2, [r7, #27]
 800c4e4:	4910      	ldr	r1, [pc, #64]	; (800c528 <tcp_slowtmr+0x28c>)
 800c4e6:	5c8a      	ldrb	r2, [r1, r2]
 800c4e8:	4093      	lsls	r3, r2
 800c4ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	dc1a      	bgt.n	800c52c <tcp_slowtmr+0x290>
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	b21a      	sxth	r2, r3
 800c4fa:	e019      	b.n	800c530 <tcp_slowtmr+0x294>
 800c4fc:	20015ed8 	.word	0x20015ed8
 800c500:	2000eef6 	.word	0x2000eef6
 800c504:	20015ed4 	.word	0x20015ed4
 800c508:	08015708 	.word	0x08015708
 800c50c:	08015a4c 	.word	0x08015a4c
 800c510:	0801574c 	.word	0x0801574c
 800c514:	08015a78 	.word	0x08015a78
 800c518:	08015aa4 	.word	0x08015aa4
 800c51c:	08015ad4 	.word	0x08015ad4
 800c520:	08015b08 	.word	0x08015b08
 800c524:	08017714 	.word	0x08017714
 800c528:	08017704 	.word	0x08017704
 800c52c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c532:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	2200      	movs	r2, #0
 800c53a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c548:	4293      	cmp	r3, r2
 800c54a:	bf28      	it	cs
 800c54c:	4613      	movcs	r3, r2
 800c54e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c550:	8a7b      	ldrh	r3, [r7, #18]
 800c552:	085b      	lsrs	r3, r3, #1
 800c554:	b29a      	uxth	r2, r3
 800c556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c558:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	b29b      	uxth	r3, r3
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d206      	bcs.n	800c57c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c572:	005b      	lsls	r3, r3, #1
 800c574:	b29a      	uxth	r2, r3
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	2200      	movs	r2, #0
 800c58a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c58e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c590:	f004 f818 	bl	80105c4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	7d1b      	ldrb	r3, [r3, #20]
 800c598:	2b06      	cmp	r3, #6
 800c59a:	d111      	bne.n	800c5c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	8b5b      	ldrh	r3, [r3, #26]
 800c5a0:	f003 0310 	and.w	r3, r3, #16
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00b      	beq.n	800c5c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5a8:	4b9c      	ldr	r3, [pc, #624]	; (800c81c <tcp_slowtmr+0x580>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	6a1b      	ldr	r3, [r3, #32]
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	2b28      	cmp	r3, #40	; 0x28
 800c5b4:	d904      	bls.n	800c5c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c5b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c2:	7a5b      	ldrb	r3, [r3, #9]
 800c5c4:	f003 0308 	and.w	r3, r3, #8
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d04a      	beq.n	800c662 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c5d0:	2b04      	cmp	r3, #4
 800c5d2:	d003      	beq.n	800c5dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c5d8:	2b07      	cmp	r3, #7
 800c5da:	d142      	bne.n	800c662 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5dc:	4b8f      	ldr	r3, [pc, #572]	; (800c81c <tcp_slowtmr+0x580>)
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c5ec:	4b8c      	ldr	r3, [pc, #560]	; (800c820 <tcp_slowtmr+0x584>)
 800c5ee:	440b      	add	r3, r1
 800c5f0:	498c      	ldr	r1, [pc, #560]	; (800c824 <tcp_slowtmr+0x588>)
 800c5f2:	fba1 1303 	umull	r1, r3, r1, r3
 800c5f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d90a      	bls.n	800c612 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c600:	3301      	adds	r3, #1
 800c602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c606:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c60a:	3301      	adds	r3, #1
 800c60c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c610:	e027      	b.n	800c662 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c612:	4b82      	ldr	r3, [pc, #520]	; (800c81c <tcp_slowtmr+0x580>)
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c628:	4618      	mov	r0, r3
 800c62a:	4b7f      	ldr	r3, [pc, #508]	; (800c828 <tcp_slowtmr+0x58c>)
 800c62c:	fb03 f300 	mul.w	r3, r3, r0
 800c630:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c632:	497c      	ldr	r1, [pc, #496]	; (800c824 <tcp_slowtmr+0x588>)
 800c634:	fba1 1303 	umull	r1, r3, r1, r3
 800c638:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d911      	bls.n	800c662 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c640:	f004 fad2 	bl	8010be8 <tcp_keepalive>
 800c644:	4603      	mov	r3, r0
 800c646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c64a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d107      	bne.n	800c662 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c658:	3301      	adds	r3, #1
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c666:	2b00      	cmp	r3, #0
 800c668:	d011      	beq.n	800c68e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c66a:	4b6c      	ldr	r3, [pc, #432]	; (800c81c <tcp_slowtmr+0x580>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	1ad2      	subs	r2, r2, r3
 800c674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c676:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c67a:	4619      	mov	r1, r3
 800c67c:	460b      	mov	r3, r1
 800c67e:	005b      	lsls	r3, r3, #1
 800c680:	440b      	add	r3, r1
 800c682:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c684:	429a      	cmp	r2, r3
 800c686:	d302      	bcc.n	800c68e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c68a:	f000 fdd9 	bl	800d240 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c690:	7d1b      	ldrb	r3, [r3, #20]
 800c692:	2b03      	cmp	r3, #3
 800c694:	d10b      	bne.n	800c6ae <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c696:	4b61      	ldr	r3, [pc, #388]	; (800c81c <tcp_slowtmr+0x580>)
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	2b28      	cmp	r3, #40	; 0x28
 800c6a2:	d904      	bls.n	800c6ae <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b0:	7d1b      	ldrb	r3, [r3, #20]
 800c6b2:	2b09      	cmp	r3, #9
 800c6b4:	d10b      	bne.n	800c6ce <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c6b6:	4b59      	ldr	r3, [pc, #356]	; (800c81c <tcp_slowtmr+0x580>)
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	2bf0      	cmp	r3, #240	; 0xf0
 800c6c2:	d904      	bls.n	800c6ce <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d060      	beq.n	800c798 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6dc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c6de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6e0:	f000 fbfa 	bl	800ced8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d010      	beq.n	800c70c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c6ea:	4b50      	ldr	r3, [pc, #320]	; (800c82c <tcp_slowtmr+0x590>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d106      	bne.n	800c702 <tcp_slowtmr+0x466>
 800c6f4:	4b4e      	ldr	r3, [pc, #312]	; (800c830 <tcp_slowtmr+0x594>)
 800c6f6:	f240 526d 	movw	r2, #1389	; 0x56d
 800c6fa:	494e      	ldr	r1, [pc, #312]	; (800c834 <tcp_slowtmr+0x598>)
 800c6fc:	484e      	ldr	r0, [pc, #312]	; (800c838 <tcp_slowtmr+0x59c>)
 800c6fe:	f007 fac9 	bl	8013c94 <iprintf>
        prev->next = pcb->next;
 800c702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c704:	68da      	ldr	r2, [r3, #12]
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	60da      	str	r2, [r3, #12]
 800c70a:	e00f      	b.n	800c72c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c70c:	4b47      	ldr	r3, [pc, #284]	; (800c82c <tcp_slowtmr+0x590>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c712:	429a      	cmp	r2, r3
 800c714:	d006      	beq.n	800c724 <tcp_slowtmr+0x488>
 800c716:	4b46      	ldr	r3, [pc, #280]	; (800c830 <tcp_slowtmr+0x594>)
 800c718:	f240 5271 	movw	r2, #1393	; 0x571
 800c71c:	4947      	ldr	r1, [pc, #284]	; (800c83c <tcp_slowtmr+0x5a0>)
 800c71e:	4846      	ldr	r0, [pc, #280]	; (800c838 <tcp_slowtmr+0x59c>)
 800c720:	f007 fab8 	bl	8013c94 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	4a40      	ldr	r2, [pc, #256]	; (800c82c <tcp_slowtmr+0x590>)
 800c72a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c72c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c730:	2b00      	cmp	r3, #0
 800c732:	d013      	beq.n	800c75c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c736:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c73c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	3304      	adds	r3, #4
 800c742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c744:	8ad2      	ldrh	r2, [r2, #22]
 800c746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c748:	8b09      	ldrh	r1, [r1, #24]
 800c74a:	9102      	str	r1, [sp, #8]
 800c74c:	9201      	str	r2, [sp, #4]
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	462b      	mov	r3, r5
 800c752:	4622      	mov	r2, r4
 800c754:	4601      	mov	r1, r0
 800c756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c758:	f004 f992 	bl	8010a80 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	7d1b      	ldrb	r3, [r3, #20]
 800c766:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c772:	6838      	ldr	r0, [r7, #0]
 800c774:	f7ff f9fc 	bl	800bb70 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c778:	4b31      	ldr	r3, [pc, #196]	; (800c840 <tcp_slowtmr+0x5a4>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d004      	beq.n	800c78e <tcp_slowtmr+0x4f2>
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f06f 010c 	mvn.w	r1, #12
 800c78a:	68b8      	ldr	r0, [r7, #8]
 800c78c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c78e:	4b2c      	ldr	r3, [pc, #176]	; (800c840 <tcp_slowtmr+0x5a4>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d037      	beq.n	800c806 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c796:	e592      	b.n	800c2be <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a4:	7f1b      	ldrb	r3, [r3, #28]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	7f1a      	ldrb	r2, [r3, #28]
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	7f5b      	ldrb	r3, [r3, #29]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d325      	bcc.n	800c806 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	2200      	movs	r2, #0
 800c7be:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c7c0:	4b1f      	ldr	r3, [pc, #124]	; (800c840 <tcp_slowtmr+0x5a4>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00b      	beq.n	800c7e8 <tcp_slowtmr+0x54c>
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d8:	6912      	ldr	r2, [r2, #16]
 800c7da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7dc:	4610      	mov	r0, r2
 800c7de:	4798      	blx	r3
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c7e6:	e002      	b.n	800c7ee <tcp_slowtmr+0x552>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c7ee:	4b14      	ldr	r3, [pc, #80]	; (800c840 <tcp_slowtmr+0x5a4>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d000      	beq.n	800c7f8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c7f6:	e562      	b.n	800c2be <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c7f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c802:	f003 fb77 	bl	800fef4 <tcp_output>
  while (pcb != NULL) {
 800c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f47f ad5e 	bne.w	800c2ca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c812:	4b0c      	ldr	r3, [pc, #48]	; (800c844 <tcp_slowtmr+0x5a8>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c818:	e069      	b.n	800c8ee <tcp_slowtmr+0x652>
 800c81a:	bf00      	nop
 800c81c:	20015ed8 	.word	0x20015ed8
 800c820:	000a4cb8 	.word	0x000a4cb8
 800c824:	10624dd3 	.word	0x10624dd3
 800c828:	000124f8 	.word	0x000124f8
 800c82c:	20015ed4 	.word	0x20015ed4
 800c830:	08015708 	.word	0x08015708
 800c834:	08015b40 	.word	0x08015b40
 800c838:	0801574c 	.word	0x0801574c
 800c83c:	08015b6c 	.word	0x08015b6c
 800c840:	20015ed0 	.word	0x20015ed0
 800c844:	20015ee4 	.word	0x20015ee4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	7d1b      	ldrb	r3, [r3, #20]
 800c84c:	2b0a      	cmp	r3, #10
 800c84e:	d006      	beq.n	800c85e <tcp_slowtmr+0x5c2>
 800c850:	4b2a      	ldr	r3, [pc, #168]	; (800c8fc <tcp_slowtmr+0x660>)
 800c852:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c856:	492a      	ldr	r1, [pc, #168]	; (800c900 <tcp_slowtmr+0x664>)
 800c858:	482a      	ldr	r0, [pc, #168]	; (800c904 <tcp_slowtmr+0x668>)
 800c85a:	f007 fa1b 	bl	8013c94 <iprintf>
    pcb_remove = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c864:	4b28      	ldr	r3, [pc, #160]	; (800c908 <tcp_slowtmr+0x66c>)
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	6a1b      	ldr	r3, [r3, #32]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	2bf0      	cmp	r3, #240	; 0xf0
 800c870:	d904      	bls.n	800c87c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c876:	3301      	adds	r3, #1
 800c878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c880:	2b00      	cmp	r3, #0
 800c882:	d02f      	beq.n	800c8e4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c886:	f000 fb27 	bl	800ced8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d010      	beq.n	800c8b2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c890:	4b1e      	ldr	r3, [pc, #120]	; (800c90c <tcp_slowtmr+0x670>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c896:	429a      	cmp	r2, r3
 800c898:	d106      	bne.n	800c8a8 <tcp_slowtmr+0x60c>
 800c89a:	4b18      	ldr	r3, [pc, #96]	; (800c8fc <tcp_slowtmr+0x660>)
 800c89c:	f240 52af 	movw	r2, #1455	; 0x5af
 800c8a0:	491b      	ldr	r1, [pc, #108]	; (800c910 <tcp_slowtmr+0x674>)
 800c8a2:	4818      	ldr	r0, [pc, #96]	; (800c904 <tcp_slowtmr+0x668>)
 800c8a4:	f007 f9f6 	bl	8013c94 <iprintf>
        prev->next = pcb->next;
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	60da      	str	r2, [r3, #12]
 800c8b0:	e00f      	b.n	800c8d2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c8b2:	4b16      	ldr	r3, [pc, #88]	; (800c90c <tcp_slowtmr+0x670>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d006      	beq.n	800c8ca <tcp_slowtmr+0x62e>
 800c8bc:	4b0f      	ldr	r3, [pc, #60]	; (800c8fc <tcp_slowtmr+0x660>)
 800c8be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c8c2:	4914      	ldr	r1, [pc, #80]	; (800c914 <tcp_slowtmr+0x678>)
 800c8c4:	480f      	ldr	r0, [pc, #60]	; (800c904 <tcp_slowtmr+0x668>)
 800c8c6:	f007 f9e5 	bl	8013c94 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	4a0f      	ldr	r2, [pc, #60]	; (800c90c <tcp_slowtmr+0x670>)
 800c8d0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c8dc:	69f8      	ldr	r0, [r7, #28]
 800c8de:	f7ff f947 	bl	800bb70 <tcp_free>
 800c8e2:	e004      	b.n	800c8ee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1a9      	bne.n	800c848 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c8f4:	bf00      	nop
 800c8f6:	3730      	adds	r7, #48	; 0x30
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bdb0      	pop	{r4, r5, r7, pc}
 800c8fc:	08015708 	.word	0x08015708
 800c900:	08015b98 	.word	0x08015b98
 800c904:	0801574c 	.word	0x0801574c
 800c908:	20015ed8 	.word	0x20015ed8
 800c90c:	20015ee4 	.word	0x20015ee4
 800c910:	08015bc8 	.word	0x08015bc8
 800c914:	08015bf0 	.word	0x08015bf0

0800c918 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c91e:	4b2d      	ldr	r3, [pc, #180]	; (800c9d4 <tcp_fasttmr+0xbc>)
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	3301      	adds	r3, #1
 800c924:	b2da      	uxtb	r2, r3
 800c926:	4b2b      	ldr	r3, [pc, #172]	; (800c9d4 <tcp_fasttmr+0xbc>)
 800c928:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c92a:	4b2b      	ldr	r3, [pc, #172]	; (800c9d8 <tcp_fasttmr+0xc0>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c930:	e048      	b.n	800c9c4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	7f9a      	ldrb	r2, [r3, #30]
 800c936:	4b27      	ldr	r3, [pc, #156]	; (800c9d4 <tcp_fasttmr+0xbc>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d03f      	beq.n	800c9be <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c93e:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <tcp_fasttmr+0xbc>)
 800c940:	781a      	ldrb	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	8b5b      	ldrh	r3, [r3, #26]
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d010      	beq.n	800c974 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	8b5b      	ldrh	r3, [r3, #26]
 800c956:	f043 0302 	orr.w	r3, r3, #2
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f003 fac7 	bl	800fef4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	8b5b      	ldrh	r3, [r3, #26]
 800c96a:	f023 0303 	bic.w	r3, r3, #3
 800c96e:	b29a      	uxth	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	8b5b      	ldrh	r3, [r3, #26]
 800c978:	f003 0308 	and.w	r3, r3, #8
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d009      	beq.n	800c994 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8b5b      	ldrh	r3, [r3, #26]
 800c984:	f023 0308 	bic.w	r3, r3, #8
 800c988:	b29a      	uxth	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7ff fa7e 	bl	800be90 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00a      	beq.n	800c9b8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c9a2:	4b0e      	ldr	r3, [pc, #56]	; (800c9dc <tcp_fasttmr+0xc4>)
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f819 	bl	800c9e0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c9ae:	4b0b      	ldr	r3, [pc, #44]	; (800c9dc <tcp_fasttmr+0xc4>)
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d000      	beq.n	800c9b8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c9b6:	e7b8      	b.n	800c92a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	607b      	str	r3, [r7, #4]
 800c9bc:	e002      	b.n	800c9c4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1b3      	bne.n	800c932 <tcp_fasttmr+0x1a>
    }
  }
}
 800c9ca:	bf00      	nop
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	2000eef6 	.word	0x2000eef6
 800c9d8:	20015ed4 	.word	0x20015ed4
 800c9dc:	20015ed0 	.word	0x20015ed0

0800c9e0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c9e0:	b590      	push	{r4, r7, lr}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d109      	bne.n	800ca02 <tcp_process_refused_data+0x22>
 800c9ee:	4b37      	ldr	r3, [pc, #220]	; (800cacc <tcp_process_refused_data+0xec>)
 800c9f0:	f240 6209 	movw	r2, #1545	; 0x609
 800c9f4:	4936      	ldr	r1, [pc, #216]	; (800cad0 <tcp_process_refused_data+0xf0>)
 800c9f6:	4837      	ldr	r0, [pc, #220]	; (800cad4 <tcp_process_refused_data+0xf4>)
 800c9f8:	f007 f94c 	bl	8013c94 <iprintf>
 800c9fc:	f06f 030f 	mvn.w	r3, #15
 800ca00:	e060      	b.n	800cac4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca06:	7b5b      	ldrb	r3, [r3, #13]
 800ca08:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca0e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00b      	beq.n	800ca38 <tcp_process_refused_data+0x58>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6918      	ldr	r0, [r3, #16]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	47a0      	blx	r4
 800ca32:	4603      	mov	r3, r0
 800ca34:	73fb      	strb	r3, [r7, #15]
 800ca36:	e007      	b.n	800ca48 <tcp_process_refused_data+0x68>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	6879      	ldr	r1, [r7, #4]
 800ca3e:	2000      	movs	r0, #0
 800ca40:	f000 f8a2 	bl	800cb88 <tcp_recv_null>
 800ca44:	4603      	mov	r3, r0
 800ca46:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ca48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d12a      	bne.n	800caa6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
 800ca52:	f003 0320 	and.w	r3, r3, #32
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d033      	beq.n	800cac2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca5e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca62:	d005      	beq.n	800ca70 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca68:	3301      	adds	r3, #1
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00b      	beq.n	800ca92 <tcp_process_refused_data+0xb2>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6918      	ldr	r0, [r3, #16]
 800ca84:	2300      	movs	r3, #0
 800ca86:	2200      	movs	r2, #0
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	47a0      	blx	r4
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	73fb      	strb	r3, [r7, #15]
 800ca90:	e001      	b.n	800ca96 <tcp_process_refused_data+0xb6>
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ca96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca9a:	f113 0f0d 	cmn.w	r3, #13
 800ca9e:	d110      	bne.n	800cac2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800caa0:	f06f 030c 	mvn.w	r3, #12
 800caa4:	e00e      	b.n	800cac4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800caa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caaa:	f113 0f0d 	cmn.w	r3, #13
 800caae:	d102      	bne.n	800cab6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cab0:	f06f 030c 	mvn.w	r3, #12
 800cab4:	e006      	b.n	800cac4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cabc:	f06f 0304 	mvn.w	r3, #4
 800cac0:	e000      	b.n	800cac4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd90      	pop	{r4, r7, pc}
 800cacc:	08015708 	.word	0x08015708
 800cad0:	08015c18 	.word	0x08015c18
 800cad4:	0801574c 	.word	0x0801574c

0800cad8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cae0:	e007      	b.n	800caf2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 f809 	bl	800cb00 <tcp_seg_free>
    seg = next;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1f4      	bne.n	800cae2 <tcp_segs_free+0xa>
  }
}
 800caf8:	bf00      	nop
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00c      	beq.n	800cb28 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d004      	beq.n	800cb20 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fe fd7c 	bl	800b618 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cb20:	6879      	ldr	r1, [r7, #4]
 800cb22:	2003      	movs	r0, #3
 800cb24:	f7fd ff50 	bl	800a9c8 <memp_free>
  }
}
 800cb28:	bf00      	nop
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d106      	bne.n	800cb4c <tcp_seg_copy+0x1c>
 800cb3e:	4b0f      	ldr	r3, [pc, #60]	; (800cb7c <tcp_seg_copy+0x4c>)
 800cb40:	f240 6282 	movw	r2, #1666	; 0x682
 800cb44:	490e      	ldr	r1, [pc, #56]	; (800cb80 <tcp_seg_copy+0x50>)
 800cb46:	480f      	ldr	r0, [pc, #60]	; (800cb84 <tcp_seg_copy+0x54>)
 800cb48:	f007 f8a4 	bl	8013c94 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cb4c:	2003      	movs	r0, #3
 800cb4e:	f7fd fee9 	bl	800a924 <memp_malloc>
 800cb52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <tcp_seg_copy+0x2e>
    return NULL;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	e00a      	b.n	800cb74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cb5e:	2210      	movs	r2, #16
 800cb60:	6879      	ldr	r1, [r7, #4]
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f007 f883 	bl	8013c6e <memcpy>
  pbuf_ref(cseg->p);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe fdf9 	bl	800b764 <pbuf_ref>
  return cseg;
 800cb72:	68fb      	ldr	r3, [r7, #12]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	08015708 	.word	0x08015708
 800cb80:	08015c5c 	.word	0x08015c5c
 800cb84:	0801574c 	.word	0x0801574c

0800cb88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d109      	bne.n	800cbb0 <tcp_recv_null+0x28>
 800cb9c:	4b12      	ldr	r3, [pc, #72]	; (800cbe8 <tcp_recv_null+0x60>)
 800cb9e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cba2:	4912      	ldr	r1, [pc, #72]	; (800cbec <tcp_recv_null+0x64>)
 800cba4:	4812      	ldr	r0, [pc, #72]	; (800cbf0 <tcp_recv_null+0x68>)
 800cba6:	f007 f875 	bl	8013c94 <iprintf>
 800cbaa:	f06f 030f 	mvn.w	r3, #15
 800cbae:	e016      	b.n	800cbde <tcp_recv_null+0x56>

  if (p != NULL) {
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d009      	beq.n	800cbca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	891b      	ldrh	r3, [r3, #8]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	68b8      	ldr	r0, [r7, #8]
 800cbbe:	f7ff fb1d 	bl	800c1fc <tcp_recved>
    pbuf_free(p);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7fe fd28 	bl	800b618 <pbuf_free>
 800cbc8:	e008      	b.n	800cbdc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cbca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d104      	bne.n	800cbdc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cbd2:	68b8      	ldr	r0, [r7, #8]
 800cbd4:	f7ff f9c2 	bl	800bf5c <tcp_close>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	e000      	b.n	800cbde <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	08015708 	.word	0x08015708
 800cbec:	08015c78 	.word	0x08015c78
 800cbf0:	0801574c 	.word	0x0801574c

0800cbf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cbfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	db01      	blt.n	800cc0a <tcp_kill_prio+0x16>
 800cc06:	79fb      	ldrb	r3, [r7, #7]
 800cc08:	e000      	b.n	800cc0c <tcp_kill_prio+0x18>
 800cc0a:	237f      	movs	r3, #127	; 0x7f
 800cc0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cc0e:	7afb      	ldrb	r3, [r7, #11]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d034      	beq.n	800cc7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cc14:	7afb      	ldrb	r3, [r7, #11]
 800cc16:	3b01      	subs	r3, #1
 800cc18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc22:	4b19      	ldr	r3, [pc, #100]	; (800cc88 <tcp_kill_prio+0x94>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	617b      	str	r3, [r7, #20]
 800cc28:	e01f      	b.n	800cc6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	7d5b      	ldrb	r3, [r3, #21]
 800cc2e:	7afa      	ldrb	r2, [r7, #11]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d80c      	bhi.n	800cc4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cc38:	7afa      	ldrb	r2, [r7, #11]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d112      	bne.n	800cc64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cc3e:	4b13      	ldr	r3, [pc, #76]	; (800cc8c <tcp_kill_prio+0x98>)
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d80a      	bhi.n	800cc64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cc4e:	4b0f      	ldr	r3, [pc, #60]	; (800cc8c <tcp_kill_prio+0x98>)
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	6a1b      	ldr	r3, [r3, #32]
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	7d5b      	ldrb	r3, [r3, #21]
 800cc62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1dc      	bne.n	800cc2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d004      	beq.n	800cc80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cc76:	6938      	ldr	r0, [r7, #16]
 800cc78:	f7ff fa5a 	bl	800c130 <tcp_abort>
 800cc7c:	e000      	b.n	800cc80 <tcp_kill_prio+0x8c>
    return;
 800cc7e:	bf00      	nop
  }
}
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20015ed4 	.word	0x20015ed4
 800cc8c:	20015ed8 	.word	0x20015ed8

0800cc90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cc9a:	79fb      	ldrb	r3, [r7, #7]
 800cc9c:	2b08      	cmp	r3, #8
 800cc9e:	d009      	beq.n	800ccb4 <tcp_kill_state+0x24>
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	2b09      	cmp	r3, #9
 800cca4:	d006      	beq.n	800ccb4 <tcp_kill_state+0x24>
 800cca6:	4b1a      	ldr	r3, [pc, #104]	; (800cd10 <tcp_kill_state+0x80>)
 800cca8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ccac:	4919      	ldr	r1, [pc, #100]	; (800cd14 <tcp_kill_state+0x84>)
 800ccae:	481a      	ldr	r0, [pc, #104]	; (800cd18 <tcp_kill_state+0x88>)
 800ccb0:	f006 fff0 	bl	8013c94 <iprintf>

  inactivity = 0;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccbc:	4b17      	ldr	r3, [pc, #92]	; (800cd1c <tcp_kill_state+0x8c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	617b      	str	r3, [r7, #20]
 800ccc2:	e017      	b.n	800ccf4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	7d1b      	ldrb	r3, [r3, #20]
 800ccc8:	79fa      	ldrb	r2, [r7, #7]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d10f      	bne.n	800ccee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccce:	4b14      	ldr	r3, [pc, #80]	; (800cd20 <tcp_kill_state+0x90>)
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	6a1b      	ldr	r3, [r3, #32]
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d807      	bhi.n	800ccee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ccde:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <tcp_kill_state+0x90>)
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	6a1b      	ldr	r3, [r3, #32]
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1e4      	bne.n	800ccc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d003      	beq.n	800cd08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cd00:	2100      	movs	r1, #0
 800cd02:	6938      	ldr	r0, [r7, #16]
 800cd04:	f7ff f956 	bl	800bfb4 <tcp_abandon>
  }
}
 800cd08:	bf00      	nop
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	08015708 	.word	0x08015708
 800cd14:	08015c94 	.word	0x08015c94
 800cd18:	0801574c 	.word	0x0801574c
 800cd1c:	20015ed4 	.word	0x20015ed4
 800cd20:	20015ed8 	.word	0x20015ed8

0800cd24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd32:	4b12      	ldr	r3, [pc, #72]	; (800cd7c <tcp_kill_timewait+0x58>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	60fb      	str	r3, [r7, #12]
 800cd38:	e012      	b.n	800cd60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cd3a:	4b11      	ldr	r3, [pc, #68]	; (800cd80 <tcp_kill_timewait+0x5c>)
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6a1b      	ldr	r3, [r3, #32]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d807      	bhi.n	800cd5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cd4a:	4b0d      	ldr	r3, [pc, #52]	; (800cd80 <tcp_kill_timewait+0x5c>)
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6a1b      	ldr	r3, [r3, #32]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1e9      	bne.n	800cd3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cd6c:	68b8      	ldr	r0, [r7, #8]
 800cd6e:	f7ff f9df 	bl	800c130 <tcp_abort>
  }
}
 800cd72:	bf00      	nop
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20015ee4 	.word	0x20015ee4
 800cd80:	20015ed8 	.word	0x20015ed8

0800cd84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cd8a:	4b10      	ldr	r3, [pc, #64]	; (800cdcc <tcp_handle_closepend+0x48>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd90:	e014      	b.n	800cdbc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	8b5b      	ldrh	r3, [r3, #26]
 800cd9c:	f003 0308 	and.w	r3, r3, #8
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d009      	beq.n	800cdb8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	8b5b      	ldrh	r3, [r3, #26]
 800cda8:	f023 0308 	bic.w	r3, r3, #8
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7ff f86c 	bl	800be90 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1e7      	bne.n	800cd92 <tcp_handle_closepend+0xe>
  }
}
 800cdc2:	bf00      	nop
 800cdc4:	3708      	adds	r7, #8
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	20015ed4 	.word	0x20015ed4

0800cdd0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdda:	2001      	movs	r0, #1
 800cddc:	f7fd fda2 	bl	800a924 <memp_malloc>
 800cde0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d126      	bne.n	800ce36 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cde8:	f7ff ffcc 	bl	800cd84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cdec:	f7ff ff9a 	bl	800cd24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdf0:	2001      	movs	r0, #1
 800cdf2:	f7fd fd97 	bl	800a924 <memp_malloc>
 800cdf6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d11b      	bne.n	800ce36 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cdfe:	2009      	movs	r0, #9
 800ce00:	f7ff ff46 	bl	800cc90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce04:	2001      	movs	r0, #1
 800ce06:	f7fd fd8d 	bl	800a924 <memp_malloc>
 800ce0a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d111      	bne.n	800ce36 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ce12:	2008      	movs	r0, #8
 800ce14:	f7ff ff3c 	bl	800cc90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce18:	2001      	movs	r0, #1
 800ce1a:	f7fd fd83 	bl	800a924 <memp_malloc>
 800ce1e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d107      	bne.n	800ce36 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ce26:	79fb      	ldrb	r3, [r7, #7]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff fee3 	bl	800cbf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce2e:	2001      	movs	r0, #1
 800ce30:	f7fd fd78 	bl	800a924 <memp_malloc>
 800ce34:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d03f      	beq.n	800cebc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ce3c:	229c      	movs	r2, #156	; 0x9c
 800ce3e:	2100      	movs	r1, #0
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f006 ff1f 	bl	8013c84 <memset>
    pcb->prio = prio;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	79fa      	ldrb	r2, [r7, #7]
 800ce4a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce52:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	22ff      	movs	r2, #255	; 0xff
 800ce6a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce72:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2206      	movs	r2, #6
 800ce78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2206      	movs	r2, #6
 800ce80:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce88:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ce92:	4b0d      	ldr	r3, [pc, #52]	; (800cec8 <tcp_alloc+0xf8>)
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ce9a:	4b0c      	ldr	r3, [pc, #48]	; (800cecc <tcp_alloc+0xfc>)
 800ce9c:	781a      	ldrb	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cea8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	4a08      	ldr	r2, [pc, #32]	; (800ced0 <tcp_alloc+0x100>)
 800ceb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	4a07      	ldr	r2, [pc, #28]	; (800ced4 <tcp_alloc+0x104>)
 800ceb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cebc:	68fb      	ldr	r3, [r7, #12]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20015ed8 	.word	0x20015ed8
 800cecc:	2000eef6 	.word	0x2000eef6
 800ced0:	0800cb89 	.word	0x0800cb89
 800ced4:	006ddd00 	.word	0x006ddd00

0800ced8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d107      	bne.n	800cef6 <tcp_pcb_purge+0x1e>
 800cee6:	4b21      	ldr	r3, [pc, #132]	; (800cf6c <tcp_pcb_purge+0x94>)
 800cee8:	f640 0251 	movw	r2, #2129	; 0x851
 800ceec:	4920      	ldr	r1, [pc, #128]	; (800cf70 <tcp_pcb_purge+0x98>)
 800ceee:	4821      	ldr	r0, [pc, #132]	; (800cf74 <tcp_pcb_purge+0x9c>)
 800cef0:	f006 fed0 	bl	8013c94 <iprintf>
 800cef4:	e037      	b.n	800cf66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	7d1b      	ldrb	r3, [r3, #20]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d033      	beq.n	800cf66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cf02:	2b0a      	cmp	r3, #10
 800cf04:	d02f      	beq.n	800cf66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d02b      	beq.n	800cf66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d007      	beq.n	800cf26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fe fb7c 	bl	800b618 <pbuf_free>
      pcb->refused_data = NULL;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f986 	bl	800d240 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf3a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7ff fdc9 	bl	800cad8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff fdc4 	bl	800cad8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	66da      	str	r2, [r3, #108]	; 0x6c
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	08015708 	.word	0x08015708
 800cf70:	08015d54 	.word	0x08015d54
 800cf74:	0801574c 	.word	0x0801574c

0800cf78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d106      	bne.n	800cf96 <tcp_pcb_remove+0x1e>
 800cf88:	4b3e      	ldr	r3, [pc, #248]	; (800d084 <tcp_pcb_remove+0x10c>)
 800cf8a:	f640 0283 	movw	r2, #2179	; 0x883
 800cf8e:	493e      	ldr	r1, [pc, #248]	; (800d088 <tcp_pcb_remove+0x110>)
 800cf90:	483e      	ldr	r0, [pc, #248]	; (800d08c <tcp_pcb_remove+0x114>)
 800cf92:	f006 fe7f 	bl	8013c94 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d106      	bne.n	800cfaa <tcp_pcb_remove+0x32>
 800cf9c:	4b39      	ldr	r3, [pc, #228]	; (800d084 <tcp_pcb_remove+0x10c>)
 800cf9e:	f640 0284 	movw	r2, #2180	; 0x884
 800cfa2:	493b      	ldr	r1, [pc, #236]	; (800d090 <tcp_pcb_remove+0x118>)
 800cfa4:	4839      	ldr	r0, [pc, #228]	; (800d08c <tcp_pcb_remove+0x114>)
 800cfa6:	f006 fe75 	bl	8013c94 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d105      	bne.n	800cfc0 <tcp_pcb_remove+0x48>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68da      	ldr	r2, [r3, #12]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	601a      	str	r2, [r3, #0]
 800cfbe:	e013      	b.n	800cfe8 <tcp_pcb_remove+0x70>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60fb      	str	r3, [r7, #12]
 800cfc6:	e00c      	b.n	800cfe2 <tcp_pcb_remove+0x6a>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d104      	bne.n	800cfdc <tcp_pcb_remove+0x64>
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	68da      	ldr	r2, [r3, #12]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	60da      	str	r2, [r3, #12]
 800cfda:	e005      	b.n	800cfe8 <tcp_pcb_remove+0x70>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	60fb      	str	r3, [r7, #12]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1ef      	bne.n	800cfc8 <tcp_pcb_remove+0x50>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2200      	movs	r2, #0
 800cfec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cfee:	6838      	ldr	r0, [r7, #0]
 800cff0:	f7ff ff72 	bl	800ced8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	7d1b      	ldrb	r3, [r3, #20]
 800cff8:	2b0a      	cmp	r3, #10
 800cffa:	d013      	beq.n	800d024 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d000:	2b01      	cmp	r3, #1
 800d002:	d00f      	beq.n	800d024 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	8b5b      	ldrh	r3, [r3, #26]
 800d008:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d009      	beq.n	800d024 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	8b5b      	ldrh	r3, [r3, #26]
 800d014:	f043 0302 	orr.w	r3, r3, #2
 800d018:	b29a      	uxth	r2, r3
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d01e:	6838      	ldr	r0, [r7, #0]
 800d020:	f002 ff68 	bl	800fef4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	7d1b      	ldrb	r3, [r3, #20]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d020      	beq.n	800d06e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d030:	2b00      	cmp	r3, #0
 800d032:	d006      	beq.n	800d042 <tcp_pcb_remove+0xca>
 800d034:	4b13      	ldr	r3, [pc, #76]	; (800d084 <tcp_pcb_remove+0x10c>)
 800d036:	f640 0293 	movw	r2, #2195	; 0x893
 800d03a:	4916      	ldr	r1, [pc, #88]	; (800d094 <tcp_pcb_remove+0x11c>)
 800d03c:	4813      	ldr	r0, [pc, #76]	; (800d08c <tcp_pcb_remove+0x114>)
 800d03e:	f006 fe29 	bl	8013c94 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d046:	2b00      	cmp	r3, #0
 800d048:	d006      	beq.n	800d058 <tcp_pcb_remove+0xe0>
 800d04a:	4b0e      	ldr	r3, [pc, #56]	; (800d084 <tcp_pcb_remove+0x10c>)
 800d04c:	f640 0294 	movw	r2, #2196	; 0x894
 800d050:	4911      	ldr	r1, [pc, #68]	; (800d098 <tcp_pcb_remove+0x120>)
 800d052:	480e      	ldr	r0, [pc, #56]	; (800d08c <tcp_pcb_remove+0x114>)
 800d054:	f006 fe1e 	bl	8013c94 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d006      	beq.n	800d06e <tcp_pcb_remove+0xf6>
 800d060:	4b08      	ldr	r3, [pc, #32]	; (800d084 <tcp_pcb_remove+0x10c>)
 800d062:	f640 0296 	movw	r2, #2198	; 0x896
 800d066:	490d      	ldr	r1, [pc, #52]	; (800d09c <tcp_pcb_remove+0x124>)
 800d068:	4808      	ldr	r0, [pc, #32]	; (800d08c <tcp_pcb_remove+0x114>)
 800d06a:	f006 fe13 	bl	8013c94 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2200      	movs	r2, #0
 800d072:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	2200      	movs	r2, #0
 800d078:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d07a:	bf00      	nop
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	08015708 	.word	0x08015708
 800d088:	08015d70 	.word	0x08015d70
 800d08c:	0801574c 	.word	0x0801574c
 800d090:	08015d8c 	.word	0x08015d8c
 800d094:	08015dac 	.word	0x08015dac
 800d098:	08015dc4 	.word	0x08015dc4
 800d09c:	08015de0 	.word	0x08015de0

0800d0a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <tcp_next_iss+0x1c>
 800d0ae:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <tcp_next_iss+0x38>)
 800d0b0:	f640 02af 	movw	r2, #2223	; 0x8af
 800d0b4:	4909      	ldr	r1, [pc, #36]	; (800d0dc <tcp_next_iss+0x3c>)
 800d0b6:	480a      	ldr	r0, [pc, #40]	; (800d0e0 <tcp_next_iss+0x40>)
 800d0b8:	f006 fdec 	bl	8013c94 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d0bc:	4b09      	ldr	r3, [pc, #36]	; (800d0e4 <tcp_next_iss+0x44>)
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	4b09      	ldr	r3, [pc, #36]	; (800d0e8 <tcp_next_iss+0x48>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	4a07      	ldr	r2, [pc, #28]	; (800d0e4 <tcp_next_iss+0x44>)
 800d0c8:	6013      	str	r3, [r2, #0]
  return iss;
 800d0ca:	4b06      	ldr	r3, [pc, #24]	; (800d0e4 <tcp_next_iss+0x44>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	08015708 	.word	0x08015708
 800d0dc:	08015df8 	.word	0x08015df8
 800d0e0:	0801574c 	.word	0x0801574c
 800d0e4:	20000014 	.word	0x20000014
 800d0e8:	20015ed8 	.word	0x20015ed8

0800d0ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b086      	sub	sp, #24
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
 800d0f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d106      	bne.n	800d10e <tcp_eff_send_mss_netif+0x22>
 800d100:	4b14      	ldr	r3, [pc, #80]	; (800d154 <tcp_eff_send_mss_netif+0x68>)
 800d102:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d106:	4914      	ldr	r1, [pc, #80]	; (800d158 <tcp_eff_send_mss_netif+0x6c>)
 800d108:	4814      	ldr	r0, [pc, #80]	; (800d15c <tcp_eff_send_mss_netif+0x70>)
 800d10a:	f006 fdc3 	bl	8013c94 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d101      	bne.n	800d118 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d114:	89fb      	ldrh	r3, [r7, #14]
 800d116:	e019      	b.n	800d14c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	8c1b      	ldrh	r3, [r3, #32]
 800d11c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d11e:	8afb      	ldrh	r3, [r7, #22]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d012      	beq.n	800d14a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d124:	2328      	movs	r3, #40	; 0x28
 800d126:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d128:	8afa      	ldrh	r2, [r7, #22]
 800d12a:	8abb      	ldrh	r3, [r7, #20]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d904      	bls.n	800d13a <tcp_eff_send_mss_netif+0x4e>
 800d130:	8afa      	ldrh	r2, [r7, #22]
 800d132:	8abb      	ldrh	r3, [r7, #20]
 800d134:	1ad3      	subs	r3, r2, r3
 800d136:	b29b      	uxth	r3, r3
 800d138:	e000      	b.n	800d13c <tcp_eff_send_mss_netif+0x50>
 800d13a:	2300      	movs	r3, #0
 800d13c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d13e:	8a7a      	ldrh	r2, [r7, #18]
 800d140:	89fb      	ldrh	r3, [r7, #14]
 800d142:	4293      	cmp	r3, r2
 800d144:	bf28      	it	cs
 800d146:	4613      	movcs	r3, r2
 800d148:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d14a:	89fb      	ldrh	r3, [r7, #14]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	08015708 	.word	0x08015708
 800d158:	08015e14 	.word	0x08015e14
 800d15c:	0801574c 	.word	0x0801574c

0800d160 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d119      	bne.n	800d1a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d174:	4b10      	ldr	r3, [pc, #64]	; (800d1b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d176:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d17a:	4910      	ldr	r1, [pc, #64]	; (800d1bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d17c:	4810      	ldr	r0, [pc, #64]	; (800d1c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d17e:	f006 fd89 	bl	8013c94 <iprintf>

  while (pcb != NULL) {
 800d182:	e011      	b.n	800d1a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d108      	bne.n	800d1a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f7fe ffca 	bl	800c130 <tcp_abort>
      pcb = next;
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	60fb      	str	r3, [r7, #12]
 800d1a0:	e002      	b.n	800d1a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1ea      	bne.n	800d184 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d1ae:	bf00      	nop
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	08015708 	.word	0x08015708
 800d1bc:	08015e3c 	.word	0x08015e3c
 800d1c0:	0801574c 	.word	0x0801574c

0800d1c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d02a      	beq.n	800d22a <tcp_netif_ip_addr_changed+0x66>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d026      	beq.n	800d22a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d1dc:	4b15      	ldr	r3, [pc, #84]	; (800d234 <tcp_netif_ip_addr_changed+0x70>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7ff ffbc 	bl	800d160 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d1e8:	4b13      	ldr	r3, [pc, #76]	; (800d238 <tcp_netif_ip_addr_changed+0x74>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff ffb6 	bl	800d160 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d017      	beq.n	800d22a <tcp_netif_ip_addr_changed+0x66>
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d013      	beq.n	800d22a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d202:	4b0e      	ldr	r3, [pc, #56]	; (800d23c <tcp_netif_ip_addr_changed+0x78>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	60fb      	str	r3, [r7, #12]
 800d208:	e00c      	b.n	800d224 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	429a      	cmp	r2, r3
 800d214:	d103      	bne.n	800d21e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1ef      	bne.n	800d20a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d22a:	bf00      	nop
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	20015ed4 	.word	0x20015ed4
 800d238:	20015ee0 	.word	0x20015ee0
 800d23c:	20015edc 	.word	0x20015edc

0800d240 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d254:	4618      	mov	r0, r3
 800d256:	f7ff fc3f 	bl	800cad8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d260:	bf00      	nop
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d268:	b590      	push	{r4, r7, lr}
 800d26a:	b08d      	sub	sp, #52	; 0x34
 800d26c:	af04      	add	r7, sp, #16
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d105      	bne.n	800d284 <tcp_input+0x1c>
 800d278:	4b9b      	ldr	r3, [pc, #620]	; (800d4e8 <tcp_input+0x280>)
 800d27a:	2283      	movs	r2, #131	; 0x83
 800d27c:	499b      	ldr	r1, [pc, #620]	; (800d4ec <tcp_input+0x284>)
 800d27e:	489c      	ldr	r0, [pc, #624]	; (800d4f0 <tcp_input+0x288>)
 800d280:	f006 fd08 	bl	8013c94 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4a9a      	ldr	r2, [pc, #616]	; (800d4f4 <tcp_input+0x28c>)
 800d28a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	895b      	ldrh	r3, [r3, #10]
 800d290:	2b13      	cmp	r3, #19
 800d292:	f240 83c4 	bls.w	800da1e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d296:	4b98      	ldr	r3, [pc, #608]	; (800d4f8 <tcp_input+0x290>)
 800d298:	695a      	ldr	r2, [r3, #20]
 800d29a:	4b97      	ldr	r3, [pc, #604]	; (800d4f8 <tcp_input+0x290>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	f005 fc4f 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f040 83ba 	bne.w	800da22 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d2ae:	4b92      	ldr	r3, [pc, #584]	; (800d4f8 <tcp_input+0x290>)
 800d2b0:	695b      	ldr	r3, [r3, #20]
 800d2b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d2b6:	2be0      	cmp	r3, #224	; 0xe0
 800d2b8:	f000 83b3 	beq.w	800da22 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d2bc:	4b8d      	ldr	r3, [pc, #564]	; (800d4f4 <tcp_input+0x28c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	899b      	ldrh	r3, [r3, #12]
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7fc fe77 	bl	8009fb8 <lwip_htons>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	0b1b      	lsrs	r3, r3, #12
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d2d6:	7cbb      	ldrb	r3, [r7, #18]
 800d2d8:	2b13      	cmp	r3, #19
 800d2da:	f240 83a2 	bls.w	800da22 <tcp_input+0x7ba>
 800d2de:	7cbb      	ldrb	r3, [r7, #18]
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	891b      	ldrh	r3, [r3, #8]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	f200 839b 	bhi.w	800da22 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d2ec:	7cbb      	ldrb	r3, [r7, #18]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	3b14      	subs	r3, #20
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	4b81      	ldr	r3, [pc, #516]	; (800d4fc <tcp_input+0x294>)
 800d2f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d2f8:	4b81      	ldr	r3, [pc, #516]	; (800d500 <tcp_input+0x298>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	895a      	ldrh	r2, [r3, #10]
 800d302:	7cbb      	ldrb	r3, [r7, #18]
 800d304:	b29b      	uxth	r3, r3
 800d306:	429a      	cmp	r2, r3
 800d308:	d309      	bcc.n	800d31e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d30a:	4b7c      	ldr	r3, [pc, #496]	; (800d4fc <tcp_input+0x294>)
 800d30c:	881a      	ldrh	r2, [r3, #0]
 800d30e:	4b7d      	ldr	r3, [pc, #500]	; (800d504 <tcp_input+0x29c>)
 800d310:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d312:	7cbb      	ldrb	r3, [r7, #18]
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7fe f8f8 	bl	800b50c <pbuf_remove_header>
 800d31c:	e04e      	b.n	800d3bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d105      	bne.n	800d332 <tcp_input+0xca>
 800d326:	4b70      	ldr	r3, [pc, #448]	; (800d4e8 <tcp_input+0x280>)
 800d328:	22c2      	movs	r2, #194	; 0xc2
 800d32a:	4977      	ldr	r1, [pc, #476]	; (800d508 <tcp_input+0x2a0>)
 800d32c:	4870      	ldr	r0, [pc, #448]	; (800d4f0 <tcp_input+0x288>)
 800d32e:	f006 fcb1 	bl	8013c94 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d332:	2114      	movs	r1, #20
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7fe f8e9 	bl	800b50c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	895a      	ldrh	r2, [r3, #10]
 800d33e:	4b71      	ldr	r3, [pc, #452]	; (800d504 <tcp_input+0x29c>)
 800d340:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d342:	4b6e      	ldr	r3, [pc, #440]	; (800d4fc <tcp_input+0x294>)
 800d344:	881a      	ldrh	r2, [r3, #0]
 800d346:	4b6f      	ldr	r3, [pc, #444]	; (800d504 <tcp_input+0x29c>)
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d34e:	4b6d      	ldr	r3, [pc, #436]	; (800d504 <tcp_input+0x29c>)
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7fe f8d9 	bl	800b50c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	895b      	ldrh	r3, [r3, #10]
 800d360:	8a3a      	ldrh	r2, [r7, #16]
 800d362:	429a      	cmp	r2, r3
 800d364:	f200 835f 	bhi.w	800da26 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	4a64      	ldr	r2, [pc, #400]	; (800d500 <tcp_input+0x298>)
 800d370:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	8a3a      	ldrh	r2, [r7, #16]
 800d378:	4611      	mov	r1, r2
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fe f8c6 	bl	800b50c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	891a      	ldrh	r2, [r3, #8]
 800d384:	8a3b      	ldrh	r3, [r7, #16]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	b29a      	uxth	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	895b      	ldrh	r3, [r3, #10]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d005      	beq.n	800d3a2 <tcp_input+0x13a>
 800d396:	4b54      	ldr	r3, [pc, #336]	; (800d4e8 <tcp_input+0x280>)
 800d398:	22df      	movs	r2, #223	; 0xdf
 800d39a:	495c      	ldr	r1, [pc, #368]	; (800d50c <tcp_input+0x2a4>)
 800d39c:	4854      	ldr	r0, [pc, #336]	; (800d4f0 <tcp_input+0x288>)
 800d39e:	f006 fc79 	bl	8013c94 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	891a      	ldrh	r2, [r3, #8]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	891b      	ldrh	r3, [r3, #8]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d005      	beq.n	800d3bc <tcp_input+0x154>
 800d3b0:	4b4d      	ldr	r3, [pc, #308]	; (800d4e8 <tcp_input+0x280>)
 800d3b2:	22e0      	movs	r2, #224	; 0xe0
 800d3b4:	4956      	ldr	r1, [pc, #344]	; (800d510 <tcp_input+0x2a8>)
 800d3b6:	484e      	ldr	r0, [pc, #312]	; (800d4f0 <tcp_input+0x288>)
 800d3b8:	f006 fc6c 	bl	8013c94 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d3bc:	4b4d      	ldr	r3, [pc, #308]	; (800d4f4 <tcp_input+0x28c>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	4b4b      	ldr	r3, [pc, #300]	; (800d4f4 <tcp_input+0x28c>)
 800d3c6:	681c      	ldr	r4, [r3, #0]
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	f7fc fdf5 	bl	8009fb8 <lwip_htons>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d3d2:	4b48      	ldr	r3, [pc, #288]	; (800d4f4 <tcp_input+0x28c>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	885b      	ldrh	r3, [r3, #2]
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	4b46      	ldr	r3, [pc, #280]	; (800d4f4 <tcp_input+0x28c>)
 800d3dc:	681c      	ldr	r4, [r3, #0]
 800d3de:	4610      	mov	r0, r2
 800d3e0:	f7fc fdea 	bl	8009fb8 <lwip_htons>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d3e8:	4b42      	ldr	r3, [pc, #264]	; (800d4f4 <tcp_input+0x28c>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	4b41      	ldr	r3, [pc, #260]	; (800d4f4 <tcp_input+0x28c>)
 800d3f0:	681c      	ldr	r4, [r3, #0]
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f7fc fdf5 	bl	8009fe2 <lwip_htonl>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	6063      	str	r3, [r4, #4]
 800d3fc:	6863      	ldr	r3, [r4, #4]
 800d3fe:	4a45      	ldr	r2, [pc, #276]	; (800d514 <tcp_input+0x2ac>)
 800d400:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d402:	4b3c      	ldr	r3, [pc, #240]	; (800d4f4 <tcp_input+0x28c>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	689a      	ldr	r2, [r3, #8]
 800d408:	4b3a      	ldr	r3, [pc, #232]	; (800d4f4 <tcp_input+0x28c>)
 800d40a:	681c      	ldr	r4, [r3, #0]
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fc fde8 	bl	8009fe2 <lwip_htonl>
 800d412:	4603      	mov	r3, r0
 800d414:	60a3      	str	r3, [r4, #8]
 800d416:	68a3      	ldr	r3, [r4, #8]
 800d418:	4a3f      	ldr	r2, [pc, #252]	; (800d518 <tcp_input+0x2b0>)
 800d41a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d41c:	4b35      	ldr	r3, [pc, #212]	; (800d4f4 <tcp_input+0x28c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	89db      	ldrh	r3, [r3, #14]
 800d422:	b29a      	uxth	r2, r3
 800d424:	4b33      	ldr	r3, [pc, #204]	; (800d4f4 <tcp_input+0x28c>)
 800d426:	681c      	ldr	r4, [r3, #0]
 800d428:	4610      	mov	r0, r2
 800d42a:	f7fc fdc5 	bl	8009fb8 <lwip_htons>
 800d42e:	4603      	mov	r3, r0
 800d430:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d432:	4b30      	ldr	r3, [pc, #192]	; (800d4f4 <tcp_input+0x28c>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	899b      	ldrh	r3, [r3, #12]
 800d438:	b29b      	uxth	r3, r3
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7fc fdbc 	bl	8009fb8 <lwip_htons>
 800d440:	4603      	mov	r3, r0
 800d442:	b2db      	uxtb	r3, r3
 800d444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	4b34      	ldr	r3, [pc, #208]	; (800d51c <tcp_input+0x2b4>)
 800d44c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	891a      	ldrh	r2, [r3, #8]
 800d452:	4b33      	ldr	r3, [pc, #204]	; (800d520 <tcp_input+0x2b8>)
 800d454:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d456:	4b31      	ldr	r3, [pc, #196]	; (800d51c <tcp_input+0x2b4>)
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	f003 0303 	and.w	r3, r3, #3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00c      	beq.n	800d47c <tcp_input+0x214>
    tcplen++;
 800d462:	4b2f      	ldr	r3, [pc, #188]	; (800d520 <tcp_input+0x2b8>)
 800d464:	881b      	ldrh	r3, [r3, #0]
 800d466:	3301      	adds	r3, #1
 800d468:	b29a      	uxth	r2, r3
 800d46a:	4b2d      	ldr	r3, [pc, #180]	; (800d520 <tcp_input+0x2b8>)
 800d46c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	891a      	ldrh	r2, [r3, #8]
 800d472:	4b2b      	ldr	r3, [pc, #172]	; (800d520 <tcp_input+0x2b8>)
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	429a      	cmp	r2, r3
 800d478:	f200 82d7 	bhi.w	800da2a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d47c:	2300      	movs	r3, #0
 800d47e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d480:	4b28      	ldr	r3, [pc, #160]	; (800d524 <tcp_input+0x2bc>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	61fb      	str	r3, [r7, #28]
 800d486:	e09d      	b.n	800d5c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	7d1b      	ldrb	r3, [r3, #20]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d105      	bne.n	800d49c <tcp_input+0x234>
 800d490:	4b15      	ldr	r3, [pc, #84]	; (800d4e8 <tcp_input+0x280>)
 800d492:	22fb      	movs	r2, #251	; 0xfb
 800d494:	4924      	ldr	r1, [pc, #144]	; (800d528 <tcp_input+0x2c0>)
 800d496:	4816      	ldr	r0, [pc, #88]	; (800d4f0 <tcp_input+0x288>)
 800d498:	f006 fbfc 	bl	8013c94 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	7d1b      	ldrb	r3, [r3, #20]
 800d4a0:	2b0a      	cmp	r3, #10
 800d4a2:	d105      	bne.n	800d4b0 <tcp_input+0x248>
 800d4a4:	4b10      	ldr	r3, [pc, #64]	; (800d4e8 <tcp_input+0x280>)
 800d4a6:	22fc      	movs	r2, #252	; 0xfc
 800d4a8:	4920      	ldr	r1, [pc, #128]	; (800d52c <tcp_input+0x2c4>)
 800d4aa:	4811      	ldr	r0, [pc, #68]	; (800d4f0 <tcp_input+0x288>)
 800d4ac:	f006 fbf2 	bl	8013c94 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	7d1b      	ldrb	r3, [r3, #20]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d105      	bne.n	800d4c4 <tcp_input+0x25c>
 800d4b8:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <tcp_input+0x280>)
 800d4ba:	22fd      	movs	r2, #253	; 0xfd
 800d4bc:	491c      	ldr	r1, [pc, #112]	; (800d530 <tcp_input+0x2c8>)
 800d4be:	480c      	ldr	r0, [pc, #48]	; (800d4f0 <tcp_input+0x288>)
 800d4c0:	f006 fbe8 	bl	8013c94 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	7a1b      	ldrb	r3, [r3, #8]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d033      	beq.n	800d534 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	7a1a      	ldrb	r2, [r3, #8]
 800d4d0:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <tcp_input+0x290>)
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4d8:	3301      	adds	r3, #1
 800d4da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d029      	beq.n	800d534 <tcp_input+0x2cc>
      prev = pcb;
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	61bb      	str	r3, [r7, #24]
      continue;
 800d4e4:	e06b      	b.n	800d5be <tcp_input+0x356>
 800d4e6:	bf00      	nop
 800d4e8:	08015e70 	.word	0x08015e70
 800d4ec:	08015ea4 	.word	0x08015ea4
 800d4f0:	08015ebc 	.word	0x08015ebc
 800d4f4:	2000ef08 	.word	0x2000ef08
 800d4f8:	200127c0 	.word	0x200127c0
 800d4fc:	2000ef0c 	.word	0x2000ef0c
 800d500:	2000ef10 	.word	0x2000ef10
 800d504:	2000ef0e 	.word	0x2000ef0e
 800d508:	08015ee4 	.word	0x08015ee4
 800d50c:	08015ef4 	.word	0x08015ef4
 800d510:	08015f00 	.word	0x08015f00
 800d514:	2000ef18 	.word	0x2000ef18
 800d518:	2000ef1c 	.word	0x2000ef1c
 800d51c:	2000ef24 	.word	0x2000ef24
 800d520:	2000ef22 	.word	0x2000ef22
 800d524:	20015ed4 	.word	0x20015ed4
 800d528:	08015f20 	.word	0x08015f20
 800d52c:	08015f48 	.word	0x08015f48
 800d530:	08015f74 	.word	0x08015f74
    }

    if (pcb->remote_port == tcphdr->src &&
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	8b1a      	ldrh	r2, [r3, #24]
 800d538:	4b94      	ldr	r3, [pc, #592]	; (800d78c <tcp_input+0x524>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	b29b      	uxth	r3, r3
 800d540:	429a      	cmp	r2, r3
 800d542:	d13a      	bne.n	800d5ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	8ada      	ldrh	r2, [r3, #22]
 800d548:	4b90      	ldr	r3, [pc, #576]	; (800d78c <tcp_input+0x524>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	885b      	ldrh	r3, [r3, #2]
 800d54e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d550:	429a      	cmp	r2, r3
 800d552:	d132      	bne.n	800d5ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	4b8d      	ldr	r3, [pc, #564]	; (800d790 <tcp_input+0x528>)
 800d55a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d12c      	bne.n	800d5ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	4b8a      	ldr	r3, [pc, #552]	; (800d790 <tcp_input+0x528>)
 800d566:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d568:	429a      	cmp	r2, r3
 800d56a:	d126      	bne.n	800d5ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	69fa      	ldr	r2, [r7, #28]
 800d572:	429a      	cmp	r2, r3
 800d574:	d106      	bne.n	800d584 <tcp_input+0x31c>
 800d576:	4b87      	ldr	r3, [pc, #540]	; (800d794 <tcp_input+0x52c>)
 800d578:	f240 120d 	movw	r2, #269	; 0x10d
 800d57c:	4986      	ldr	r1, [pc, #536]	; (800d798 <tcp_input+0x530>)
 800d57e:	4887      	ldr	r0, [pc, #540]	; (800d79c <tcp_input+0x534>)
 800d580:	f006 fb88 	bl	8013c94 <iprintf>
      if (prev != NULL) {
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00a      	beq.n	800d5a0 <tcp_input+0x338>
        prev->next = pcb->next;
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	68da      	ldr	r2, [r3, #12]
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d592:	4b83      	ldr	r3, [pc, #524]	; (800d7a0 <tcp_input+0x538>)
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d59a:	4a81      	ldr	r2, [pc, #516]	; (800d7a0 <tcp_input+0x538>)
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	69fa      	ldr	r2, [r7, #28]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d111      	bne.n	800d5ce <tcp_input+0x366>
 800d5aa:	4b7a      	ldr	r3, [pc, #488]	; (800d794 <tcp_input+0x52c>)
 800d5ac:	f240 1215 	movw	r2, #277	; 0x115
 800d5b0:	497c      	ldr	r1, [pc, #496]	; (800d7a4 <tcp_input+0x53c>)
 800d5b2:	487a      	ldr	r0, [pc, #488]	; (800d79c <tcp_input+0x534>)
 800d5b4:	f006 fb6e 	bl	8013c94 <iprintf>
      break;
 800d5b8:	e009      	b.n	800d5ce <tcp_input+0x366>
    }
    prev = pcb;
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	61fb      	str	r3, [r7, #28]
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f47f af5e 	bne.w	800d488 <tcp_input+0x220>
 800d5cc:	e000      	b.n	800d5d0 <tcp_input+0x368>
      break;
 800d5ce:	bf00      	nop
  }

  if (pcb == NULL) {
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	f040 8095 	bne.w	800d702 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5d8:	4b73      	ldr	r3, [pc, #460]	; (800d7a8 <tcp_input+0x540>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	61fb      	str	r3, [r7, #28]
 800d5de:	e03f      	b.n	800d660 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	7d1b      	ldrb	r3, [r3, #20]
 800d5e4:	2b0a      	cmp	r3, #10
 800d5e6:	d006      	beq.n	800d5f6 <tcp_input+0x38e>
 800d5e8:	4b6a      	ldr	r3, [pc, #424]	; (800d794 <tcp_input+0x52c>)
 800d5ea:	f240 121f 	movw	r2, #287	; 0x11f
 800d5ee:	496f      	ldr	r1, [pc, #444]	; (800d7ac <tcp_input+0x544>)
 800d5f0:	486a      	ldr	r0, [pc, #424]	; (800d79c <tcp_input+0x534>)
 800d5f2:	f006 fb4f 	bl	8013c94 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	7a1b      	ldrb	r3, [r3, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	7a1a      	ldrb	r2, [r3, #8]
 800d602:	4b63      	ldr	r3, [pc, #396]	; (800d790 <tcp_input+0x528>)
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d60a:	3301      	adds	r3, #1
 800d60c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d60e:	429a      	cmp	r2, r3
 800d610:	d122      	bne.n	800d658 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	8b1a      	ldrh	r2, [r3, #24]
 800d616:	4b5d      	ldr	r3, [pc, #372]	; (800d78c <tcp_input+0x524>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	881b      	ldrh	r3, [r3, #0]
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	429a      	cmp	r2, r3
 800d620:	d11b      	bne.n	800d65a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	8ada      	ldrh	r2, [r3, #22]
 800d626:	4b59      	ldr	r3, [pc, #356]	; (800d78c <tcp_input+0x524>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	885b      	ldrh	r3, [r3, #2]
 800d62c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d62e:	429a      	cmp	r2, r3
 800d630:	d113      	bne.n	800d65a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	685a      	ldr	r2, [r3, #4]
 800d636:	4b56      	ldr	r3, [pc, #344]	; (800d790 <tcp_input+0x528>)
 800d638:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d10d      	bne.n	800d65a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	4b53      	ldr	r3, [pc, #332]	; (800d790 <tcp_input+0x528>)
 800d644:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d646:	429a      	cmp	r2, r3
 800d648:	d107      	bne.n	800d65a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d64a:	69f8      	ldr	r0, [r7, #28]
 800d64c:	f000 fb52 	bl	800dcf4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7fd ffe1 	bl	800b618 <pbuf_free>
        return;
 800d656:	e1ee      	b.n	800da36 <tcp_input+0x7ce>
        continue;
 800d658:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	61fb      	str	r3, [r7, #28]
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1bc      	bne.n	800d5e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d666:	2300      	movs	r3, #0
 800d668:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d66a:	4b51      	ldr	r3, [pc, #324]	; (800d7b0 <tcp_input+0x548>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	617b      	str	r3, [r7, #20]
 800d670:	e02a      	b.n	800d6c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	7a1b      	ldrb	r3, [r3, #8]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00c      	beq.n	800d694 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	7a1a      	ldrb	r2, [r3, #8]
 800d67e:	4b44      	ldr	r3, [pc, #272]	; (800d790 <tcp_input+0x528>)
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d686:	3301      	adds	r3, #1
 800d688:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d002      	beq.n	800d694 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	61bb      	str	r3, [r7, #24]
        continue;
 800d692:	e016      	b.n	800d6c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	8ada      	ldrh	r2, [r3, #22]
 800d698:	4b3c      	ldr	r3, [pc, #240]	; (800d78c <tcp_input+0x524>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	885b      	ldrh	r3, [r3, #2]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d10c      	bne.n	800d6be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	4b39      	ldr	r3, [pc, #228]	; (800d790 <tcp_input+0x528>)
 800d6aa:	695b      	ldr	r3, [r3, #20]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d00f      	beq.n	800d6d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00d      	beq.n	800d6d2 <tcp_input+0x46a>
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d009      	beq.n	800d6d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	617b      	str	r3, [r7, #20]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1d1      	bne.n	800d672 <tcp_input+0x40a>
 800d6ce:	e000      	b.n	800d6d2 <tcp_input+0x46a>
            break;
 800d6d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d014      	beq.n	800d702 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00a      	beq.n	800d6f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	68da      	ldr	r2, [r3, #12]
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d6e6:	4b32      	ldr	r3, [pc, #200]	; (800d7b0 <tcp_input+0x548>)
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d6ee:	4a30      	ldr	r2, [pc, #192]	; (800d7b0 <tcp_input+0x548>)
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d6f4:	6978      	ldr	r0, [r7, #20]
 800d6f6:	f000 f9ff 	bl	800daf8 <tcp_listen_input>
      }
      pbuf_free(p);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7fd ff8c 	bl	800b618 <pbuf_free>
      return;
 800d700:	e199      	b.n	800da36 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f000 8160 	beq.w	800d9ca <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d70a:	4b2a      	ldr	r3, [pc, #168]	; (800d7b4 <tcp_input+0x54c>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	891a      	ldrh	r2, [r3, #8]
 800d714:	4b27      	ldr	r3, [pc, #156]	; (800d7b4 <tcp_input+0x54c>)
 800d716:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d718:	4a26      	ldr	r2, [pc, #152]	; (800d7b4 <tcp_input+0x54c>)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d71e:	4b1b      	ldr	r3, [pc, #108]	; (800d78c <tcp_input+0x524>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4a24      	ldr	r2, [pc, #144]	; (800d7b4 <tcp_input+0x54c>)
 800d724:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d726:	4b24      	ldr	r3, [pc, #144]	; (800d7b8 <tcp_input+0x550>)
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d72c:	4b23      	ldr	r3, [pc, #140]	; (800d7bc <tcp_input+0x554>)
 800d72e:	2200      	movs	r2, #0
 800d730:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d732:	4b23      	ldr	r3, [pc, #140]	; (800d7c0 <tcp_input+0x558>)
 800d734:	2200      	movs	r2, #0
 800d736:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d738:	4b22      	ldr	r3, [pc, #136]	; (800d7c4 <tcp_input+0x55c>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	f003 0308 	and.w	r3, r3, #8
 800d740:	2b00      	cmp	r3, #0
 800d742:	d006      	beq.n	800d752 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	7b5b      	ldrb	r3, [r3, #13]
 800d748:	f043 0301 	orr.w	r3, r3, #1
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d756:	2b00      	cmp	r3, #0
 800d758:	d038      	beq.n	800d7cc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d75a:	69f8      	ldr	r0, [r7, #28]
 800d75c:	f7ff f940 	bl	800c9e0 <tcp_process_refused_data>
 800d760:	4603      	mov	r3, r0
 800d762:	f113 0f0d 	cmn.w	r3, #13
 800d766:	d007      	beq.n	800d778 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d02d      	beq.n	800d7cc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d770:	4b15      	ldr	r3, [pc, #84]	; (800d7c8 <tcp_input+0x560>)
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d029      	beq.n	800d7cc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f040 8104 	bne.w	800d98a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d782:	69f8      	ldr	r0, [r7, #28]
 800d784:	f003 f9ce 	bl	8010b24 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d788:	e0ff      	b.n	800d98a <tcp_input+0x722>
 800d78a:	bf00      	nop
 800d78c:	2000ef08 	.word	0x2000ef08
 800d790:	200127c0 	.word	0x200127c0
 800d794:	08015e70 	.word	0x08015e70
 800d798:	08015f9c 	.word	0x08015f9c
 800d79c:	08015ebc 	.word	0x08015ebc
 800d7a0:	20015ed4 	.word	0x20015ed4
 800d7a4:	08015fc8 	.word	0x08015fc8
 800d7a8:	20015ee4 	.word	0x20015ee4
 800d7ac:	08015ff4 	.word	0x08015ff4
 800d7b0:	20015edc 	.word	0x20015edc
 800d7b4:	2000eef8 	.word	0x2000eef8
 800d7b8:	2000ef28 	.word	0x2000ef28
 800d7bc:	2000ef25 	.word	0x2000ef25
 800d7c0:	2000ef20 	.word	0x2000ef20
 800d7c4:	2000ef24 	.word	0x2000ef24
 800d7c8:	2000ef22 	.word	0x2000ef22
      }
    }
    tcp_input_pcb = pcb;
 800d7cc:	4a9b      	ldr	r2, [pc, #620]	; (800da3c <tcp_input+0x7d4>)
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d7d2:	69f8      	ldr	r0, [r7, #28]
 800d7d4:	f000 fb0a 	bl	800ddec <tcp_process>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d7dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7e0:	f113 0f0d 	cmn.w	r3, #13
 800d7e4:	f000 80d3 	beq.w	800d98e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d7e8:	4b95      	ldr	r3, [pc, #596]	; (800da40 <tcp_input+0x7d8>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	f003 0308 	and.w	r3, r3, #8
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d015      	beq.n	800d820 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d008      	beq.n	800d810 <tcp_input+0x5a8>
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d804:	69fa      	ldr	r2, [r7, #28]
 800d806:	6912      	ldr	r2, [r2, #16]
 800d808:	f06f 010d 	mvn.w	r1, #13
 800d80c:	4610      	mov	r0, r2
 800d80e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d810:	69f9      	ldr	r1, [r7, #28]
 800d812:	488c      	ldr	r0, [pc, #560]	; (800da44 <tcp_input+0x7dc>)
 800d814:	f7ff fbb0 	bl	800cf78 <tcp_pcb_remove>
        tcp_free(pcb);
 800d818:	69f8      	ldr	r0, [r7, #28]
 800d81a:	f7fe f9a9 	bl	800bb70 <tcp_free>
 800d81e:	e0c1      	b.n	800d9a4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d824:	4b88      	ldr	r3, [pc, #544]	; (800da48 <tcp_input+0x7e0>)
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d01d      	beq.n	800d868 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d82c:	4b86      	ldr	r3, [pc, #536]	; (800da48 <tcp_input+0x7e0>)
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00a      	beq.n	800d852 <tcp_input+0x5ea>
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d842:	69fa      	ldr	r2, [r7, #28]
 800d844:	6910      	ldr	r0, [r2, #16]
 800d846:	89fa      	ldrh	r2, [r7, #14]
 800d848:	69f9      	ldr	r1, [r7, #28]
 800d84a:	4798      	blx	r3
 800d84c:	4603      	mov	r3, r0
 800d84e:	74fb      	strb	r3, [r7, #19]
 800d850:	e001      	b.n	800d856 <tcp_input+0x5ee>
 800d852:	2300      	movs	r3, #0
 800d854:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d856:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d85a:	f113 0f0d 	cmn.w	r3, #13
 800d85e:	f000 8098 	beq.w	800d992 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d862:	4b79      	ldr	r3, [pc, #484]	; (800da48 <tcp_input+0x7e0>)
 800d864:	2200      	movs	r2, #0
 800d866:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d868:	69f8      	ldr	r0, [r7, #28]
 800d86a:	f000 f905 	bl	800da78 <tcp_input_delayed_close>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	f040 8090 	bne.w	800d996 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d876:	4b75      	ldr	r3, [pc, #468]	; (800da4c <tcp_input+0x7e4>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d041      	beq.n	800d902 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d882:	2b00      	cmp	r3, #0
 800d884:	d006      	beq.n	800d894 <tcp_input+0x62c>
 800d886:	4b72      	ldr	r3, [pc, #456]	; (800da50 <tcp_input+0x7e8>)
 800d888:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d88c:	4971      	ldr	r1, [pc, #452]	; (800da54 <tcp_input+0x7ec>)
 800d88e:	4872      	ldr	r0, [pc, #456]	; (800da58 <tcp_input+0x7f0>)
 800d890:	f006 fa00 	bl	8013c94 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	8b5b      	ldrh	r3, [r3, #26]
 800d898:	f003 0310 	and.w	r3, r3, #16
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d008      	beq.n	800d8b2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d8a0:	4b6a      	ldr	r3, [pc, #424]	; (800da4c <tcp_input+0x7e4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fd feb7 	bl	800b618 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d8aa:	69f8      	ldr	r0, [r7, #28]
 800d8ac:	f7fe fc40 	bl	800c130 <tcp_abort>
            goto aborted;
 800d8b0:	e078      	b.n	800d9a4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00c      	beq.n	800d8d6 <tcp_input+0x66e>
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	6918      	ldr	r0, [r3, #16]
 800d8c6:	4b61      	ldr	r3, [pc, #388]	; (800da4c <tcp_input+0x7e4>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	69f9      	ldr	r1, [r7, #28]
 800d8ce:	47a0      	blx	r4
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	74fb      	strb	r3, [r7, #19]
 800d8d4:	e008      	b.n	800d8e8 <tcp_input+0x680>
 800d8d6:	4b5d      	ldr	r3, [pc, #372]	; (800da4c <tcp_input+0x7e4>)
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	2300      	movs	r3, #0
 800d8dc:	69f9      	ldr	r1, [r7, #28]
 800d8de:	2000      	movs	r0, #0
 800d8e0:	f7ff f952 	bl	800cb88 <tcp_recv_null>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d8e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8ec:	f113 0f0d 	cmn.w	r3, #13
 800d8f0:	d053      	beq.n	800d99a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d8f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d003      	beq.n	800d902 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d8fa:	4b54      	ldr	r3, [pc, #336]	; (800da4c <tcp_input+0x7e4>)
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d902:	4b4f      	ldr	r3, [pc, #316]	; (800da40 <tcp_input+0x7d8>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	f003 0320 	and.w	r3, r3, #32
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d030      	beq.n	800d970 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d912:	2b00      	cmp	r3, #0
 800d914:	d009      	beq.n	800d92a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d91a:	7b5a      	ldrb	r2, [r3, #13]
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d920:	f042 0220 	orr.w	r2, r2, #32
 800d924:	b2d2      	uxtb	r2, r2
 800d926:	735a      	strb	r2, [r3, #13]
 800d928:	e022      	b.n	800d970 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d92e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d932:	d005      	beq.n	800d940 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d938:	3301      	adds	r3, #1
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00b      	beq.n	800d962 <tcp_input+0x6fa>
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	6918      	ldr	r0, [r3, #16]
 800d954:	2300      	movs	r3, #0
 800d956:	2200      	movs	r2, #0
 800d958:	69f9      	ldr	r1, [r7, #28]
 800d95a:	47a0      	blx	r4
 800d95c:	4603      	mov	r3, r0
 800d95e:	74fb      	strb	r3, [r7, #19]
 800d960:	e001      	b.n	800d966 <tcp_input+0x6fe>
 800d962:	2300      	movs	r3, #0
 800d964:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d966:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d96a:	f113 0f0d 	cmn.w	r3, #13
 800d96e:	d016      	beq.n	800d99e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d970:	4b32      	ldr	r3, [pc, #200]	; (800da3c <tcp_input+0x7d4>)
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d976:	69f8      	ldr	r0, [r7, #28]
 800d978:	f000 f87e 	bl	800da78 <tcp_input_delayed_close>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10f      	bne.n	800d9a2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d982:	69f8      	ldr	r0, [r7, #28]
 800d984:	f002 fab6 	bl	800fef4 <tcp_output>
 800d988:	e00c      	b.n	800d9a4 <tcp_input+0x73c>
        goto aborted;
 800d98a:	bf00      	nop
 800d98c:	e00a      	b.n	800d9a4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d98e:	bf00      	nop
 800d990:	e008      	b.n	800d9a4 <tcp_input+0x73c>
              goto aborted;
 800d992:	bf00      	nop
 800d994:	e006      	b.n	800d9a4 <tcp_input+0x73c>
          goto aborted;
 800d996:	bf00      	nop
 800d998:	e004      	b.n	800d9a4 <tcp_input+0x73c>
            goto aborted;
 800d99a:	bf00      	nop
 800d99c:	e002      	b.n	800d9a4 <tcp_input+0x73c>
              goto aborted;
 800d99e:	bf00      	nop
 800d9a0:	e000      	b.n	800d9a4 <tcp_input+0x73c>
          goto aborted;
 800d9a2:	bf00      	nop
    tcp_input_pcb = NULL;
 800d9a4:	4b25      	ldr	r3, [pc, #148]	; (800da3c <tcp_input+0x7d4>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d9aa:	4b28      	ldr	r3, [pc, #160]	; (800da4c <tcp_input+0x7e4>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d9b0:	4b2a      	ldr	r3, [pc, #168]	; (800da5c <tcp_input+0x7f4>)
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d03d      	beq.n	800da34 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800d9b8:	4b28      	ldr	r3, [pc, #160]	; (800da5c <tcp_input+0x7f4>)
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fd fe2b 	bl	800b618 <pbuf_free>
      inseg.p = NULL;
 800d9c2:	4b26      	ldr	r3, [pc, #152]	; (800da5c <tcp_input+0x7f4>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d9c8:	e034      	b.n	800da34 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d9ca:	4b25      	ldr	r3, [pc, #148]	; (800da60 <tcp_input+0x7f8>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	899b      	ldrh	r3, [r3, #12]
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fc faf0 	bl	8009fb8 <lwip_htons>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d118      	bne.n	800da16 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9e4:	4b1f      	ldr	r3, [pc, #124]	; (800da64 <tcp_input+0x7fc>)
 800d9e6:	6819      	ldr	r1, [r3, #0]
 800d9e8:	4b1f      	ldr	r3, [pc, #124]	; (800da68 <tcp_input+0x800>)
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	4b1f      	ldr	r3, [pc, #124]	; (800da6c <tcp_input+0x804>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9f4:	4b1a      	ldr	r3, [pc, #104]	; (800da60 <tcp_input+0x7f8>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9f8:	885b      	ldrh	r3, [r3, #2]
 800d9fa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9fc:	4a18      	ldr	r2, [pc, #96]	; (800da60 <tcp_input+0x7f8>)
 800d9fe:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da00:	8812      	ldrh	r2, [r2, #0]
 800da02:	b292      	uxth	r2, r2
 800da04:	9202      	str	r2, [sp, #8]
 800da06:	9301      	str	r3, [sp, #4]
 800da08:	4b19      	ldr	r3, [pc, #100]	; (800da70 <tcp_input+0x808>)
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	4b19      	ldr	r3, [pc, #100]	; (800da74 <tcp_input+0x80c>)
 800da0e:	4602      	mov	r2, r0
 800da10:	2000      	movs	r0, #0
 800da12:	f003 f835 	bl	8010a80 <tcp_rst>
    pbuf_free(p);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7fd fdfe 	bl	800b618 <pbuf_free>
  return;
 800da1c:	e00a      	b.n	800da34 <tcp_input+0x7cc>
    goto dropped;
 800da1e:	bf00      	nop
 800da20:	e004      	b.n	800da2c <tcp_input+0x7c4>
dropped:
 800da22:	bf00      	nop
 800da24:	e002      	b.n	800da2c <tcp_input+0x7c4>
      goto dropped;
 800da26:	bf00      	nop
 800da28:	e000      	b.n	800da2c <tcp_input+0x7c4>
      goto dropped;
 800da2a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f7fd fdf3 	bl	800b618 <pbuf_free>
 800da32:	e000      	b.n	800da36 <tcp_input+0x7ce>
  return;
 800da34:	bf00      	nop
}
 800da36:	3724      	adds	r7, #36	; 0x24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd90      	pop	{r4, r7, pc}
 800da3c:	20015ee8 	.word	0x20015ee8
 800da40:	2000ef25 	.word	0x2000ef25
 800da44:	20015ed4 	.word	0x20015ed4
 800da48:	2000ef20 	.word	0x2000ef20
 800da4c:	2000ef28 	.word	0x2000ef28
 800da50:	08015e70 	.word	0x08015e70
 800da54:	08016024 	.word	0x08016024
 800da58:	08015ebc 	.word	0x08015ebc
 800da5c:	2000eef8 	.word	0x2000eef8
 800da60:	2000ef08 	.word	0x2000ef08
 800da64:	2000ef1c 	.word	0x2000ef1c
 800da68:	2000ef22 	.word	0x2000ef22
 800da6c:	2000ef18 	.word	0x2000ef18
 800da70:	200127d0 	.word	0x200127d0
 800da74:	200127d4 	.word	0x200127d4

0800da78 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d106      	bne.n	800da94 <tcp_input_delayed_close+0x1c>
 800da86:	4b17      	ldr	r3, [pc, #92]	; (800dae4 <tcp_input_delayed_close+0x6c>)
 800da88:	f240 225a 	movw	r2, #602	; 0x25a
 800da8c:	4916      	ldr	r1, [pc, #88]	; (800dae8 <tcp_input_delayed_close+0x70>)
 800da8e:	4817      	ldr	r0, [pc, #92]	; (800daec <tcp_input_delayed_close+0x74>)
 800da90:	f006 f900 	bl	8013c94 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800da94:	4b16      	ldr	r3, [pc, #88]	; (800daf0 <tcp_input_delayed_close+0x78>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	f003 0310 	and.w	r3, r3, #16
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d01c      	beq.n	800dada <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	8b5b      	ldrh	r3, [r3, #26]
 800daa4:	f003 0310 	and.w	r3, r3, #16
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10d      	bne.n	800dac8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d008      	beq.n	800dac8 <tcp_input_delayed_close+0x50>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	6912      	ldr	r2, [r2, #16]
 800dac0:	f06f 010e 	mvn.w	r1, #14
 800dac4:	4610      	mov	r0, r2
 800dac6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dac8:	6879      	ldr	r1, [r7, #4]
 800daca:	480a      	ldr	r0, [pc, #40]	; (800daf4 <tcp_input_delayed_close+0x7c>)
 800dacc:	f7ff fa54 	bl	800cf78 <tcp_pcb_remove>
    tcp_free(pcb);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7fe f84d 	bl	800bb70 <tcp_free>
    return 1;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e000      	b.n	800dadc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	08015e70 	.word	0x08015e70
 800dae8:	08016040 	.word	0x08016040
 800daec:	08015ebc 	.word	0x08015ebc
 800daf0:	2000ef25 	.word	0x2000ef25
 800daf4:	20015ed4 	.word	0x20015ed4

0800daf8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800daf8:	b590      	push	{r4, r7, lr}
 800dafa:	b08b      	sub	sp, #44	; 0x2c
 800dafc:	af04      	add	r7, sp, #16
 800dafe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800db00:	4b6f      	ldr	r3, [pc, #444]	; (800dcc0 <tcp_listen_input+0x1c8>)
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	f003 0304 	and.w	r3, r3, #4
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f040 80d3 	bne.w	800dcb4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d106      	bne.n	800db22 <tcp_listen_input+0x2a>
 800db14:	4b6b      	ldr	r3, [pc, #428]	; (800dcc4 <tcp_listen_input+0x1cc>)
 800db16:	f240 2281 	movw	r2, #641	; 0x281
 800db1a:	496b      	ldr	r1, [pc, #428]	; (800dcc8 <tcp_listen_input+0x1d0>)
 800db1c:	486b      	ldr	r0, [pc, #428]	; (800dccc <tcp_listen_input+0x1d4>)
 800db1e:	f006 f8b9 	bl	8013c94 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800db22:	4b67      	ldr	r3, [pc, #412]	; (800dcc0 <tcp_listen_input+0x1c8>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	f003 0310 	and.w	r3, r3, #16
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d019      	beq.n	800db62 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db2e:	4b68      	ldr	r3, [pc, #416]	; (800dcd0 <tcp_listen_input+0x1d8>)
 800db30:	6819      	ldr	r1, [r3, #0]
 800db32:	4b68      	ldr	r3, [pc, #416]	; (800dcd4 <tcp_listen_input+0x1dc>)
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	4b67      	ldr	r3, [pc, #412]	; (800dcd8 <tcp_listen_input+0x1e0>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db3e:	4b67      	ldr	r3, [pc, #412]	; (800dcdc <tcp_listen_input+0x1e4>)
 800db40:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db42:	885b      	ldrh	r3, [r3, #2]
 800db44:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db46:	4a65      	ldr	r2, [pc, #404]	; (800dcdc <tcp_listen_input+0x1e4>)
 800db48:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db4a:	8812      	ldrh	r2, [r2, #0]
 800db4c:	b292      	uxth	r2, r2
 800db4e:	9202      	str	r2, [sp, #8]
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	4b63      	ldr	r3, [pc, #396]	; (800dce0 <tcp_listen_input+0x1e8>)
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	4b63      	ldr	r3, [pc, #396]	; (800dce4 <tcp_listen_input+0x1ec>)
 800db58:	4602      	mov	r2, r0
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f002 ff90 	bl	8010a80 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800db60:	e0aa      	b.n	800dcb8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800db62:	4b57      	ldr	r3, [pc, #348]	; (800dcc0 <tcp_listen_input+0x1c8>)
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	f003 0302 	and.w	r3, r3, #2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 80a4 	beq.w	800dcb8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	7d5b      	ldrb	r3, [r3, #21]
 800db74:	4618      	mov	r0, r3
 800db76:	f7ff f92b 	bl	800cdd0 <tcp_alloc>
 800db7a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d111      	bne.n	800dba6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	699b      	ldr	r3, [r3, #24]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00a      	beq.n	800dba0 <tcp_listen_input+0xa8>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	6910      	ldr	r0, [r2, #16]
 800db92:	f04f 32ff 	mov.w	r2, #4294967295
 800db96:	2100      	movs	r1, #0
 800db98:	4798      	blx	r3
 800db9a:	4603      	mov	r3, r0
 800db9c:	73bb      	strb	r3, [r7, #14]
      return;
 800db9e:	e08c      	b.n	800dcba <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dba0:	23f0      	movs	r3, #240	; 0xf0
 800dba2:	73bb      	strb	r3, [r7, #14]
      return;
 800dba4:	e089      	b.n	800dcba <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dba6:	4b50      	ldr	r3, [pc, #320]	; (800dce8 <tcp_listen_input+0x1f0>)
 800dba8:	695a      	ldr	r2, [r3, #20]
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dbae:	4b4e      	ldr	r3, [pc, #312]	; (800dce8 <tcp_listen_input+0x1f0>)
 800dbb0:	691a      	ldr	r2, [r3, #16]
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	8ada      	ldrh	r2, [r3, #22]
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dbbe:	4b47      	ldr	r3, [pc, #284]	; (800dcdc <tcp_listen_input+0x1e4>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	881b      	ldrh	r3, [r3, #0]
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	2203      	movs	r2, #3
 800dbce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dbd0:	4b41      	ldr	r3, [pc, #260]	; (800dcd8 <tcp_listen_input+0x1e0>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	1c5a      	adds	r2, r3, #1
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800dbe2:	6978      	ldr	r0, [r7, #20]
 800dbe4:	f7ff fa5c 	bl	800d0a0 <tcp_next_iss>
 800dbe8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	693a      	ldr	r2, [r7, #16]
 800dbee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	693a      	ldr	r2, [r7, #16]
 800dbf4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	693a      	ldr	r2, [r7, #16]
 800dc00:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dc02:	4b35      	ldr	r3, [pc, #212]	; (800dcd8 <tcp_listen_input+0x1e0>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	1e5a      	subs	r2, r3, #1
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	691a      	ldr	r2, [r3, #16]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	7a5b      	ldrb	r3, [r3, #9]
 800dc1e:	f003 030c 	and.w	r3, r3, #12
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	7a1a      	ldrb	r2, [r3, #8]
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dc30:	4b2e      	ldr	r3, [pc, #184]	; (800dcec <tcp_listen_input+0x1f4>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	60da      	str	r2, [r3, #12]
 800dc38:	4a2c      	ldr	r2, [pc, #176]	; (800dcec <tcp_listen_input+0x1f4>)
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	6013      	str	r3, [r2, #0]
 800dc3e:	f003 f8e1 	bl	8010e04 <tcp_timer_needed>
 800dc42:	4b2b      	ldr	r3, [pc, #172]	; (800dcf0 <tcp_listen_input+0x1f8>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dc48:	6978      	ldr	r0, [r7, #20]
 800dc4a:	f001 fd8f 	bl	800f76c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dc4e:	4b23      	ldr	r3, [pc, #140]	; (800dcdc <tcp_listen_input+0x1e4>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	89db      	ldrh	r3, [r3, #14]
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	3304      	adds	r3, #4
 800dc70:	4618      	mov	r0, r3
 800dc72:	f004 fcd3 	bl	801261c <ip4_route>
 800dc76:	4601      	mov	r1, r0
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f7ff fa34 	bl	800d0ec <tcp_eff_send_mss_netif>
 800dc84:	4603      	mov	r3, r0
 800dc86:	461a      	mov	r2, r3
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800dc8c:	2112      	movs	r1, #18
 800dc8e:	6978      	ldr	r0, [r7, #20]
 800dc90:	f002 f842 	bl	800fd18 <tcp_enqueue_flags>
 800dc94:	4603      	mov	r3, r0
 800dc96:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dc98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d004      	beq.n	800dcaa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800dca0:	2100      	movs	r1, #0
 800dca2:	6978      	ldr	r0, [r7, #20]
 800dca4:	f7fe f986 	bl	800bfb4 <tcp_abandon>
      return;
 800dca8:	e007      	b.n	800dcba <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800dcaa:	6978      	ldr	r0, [r7, #20]
 800dcac:	f002 f922 	bl	800fef4 <tcp_output>
  return;
 800dcb0:	bf00      	nop
 800dcb2:	e001      	b.n	800dcb8 <tcp_listen_input+0x1c0>
    return;
 800dcb4:	bf00      	nop
 800dcb6:	e000      	b.n	800dcba <tcp_listen_input+0x1c2>
  return;
 800dcb8:	bf00      	nop
}
 800dcba:	371c      	adds	r7, #28
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd90      	pop	{r4, r7, pc}
 800dcc0:	2000ef24 	.word	0x2000ef24
 800dcc4:	08015e70 	.word	0x08015e70
 800dcc8:	08016068 	.word	0x08016068
 800dccc:	08015ebc 	.word	0x08015ebc
 800dcd0:	2000ef1c 	.word	0x2000ef1c
 800dcd4:	2000ef22 	.word	0x2000ef22
 800dcd8:	2000ef18 	.word	0x2000ef18
 800dcdc:	2000ef08 	.word	0x2000ef08
 800dce0:	200127d0 	.word	0x200127d0
 800dce4:	200127d4 	.word	0x200127d4
 800dce8:	200127c0 	.word	0x200127c0
 800dcec:	20015ed4 	.word	0x20015ed4
 800dcf0:	20015ed0 	.word	0x20015ed0

0800dcf4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af04      	add	r7, sp, #16
 800dcfa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dcfc:	4b30      	ldr	r3, [pc, #192]	; (800ddc0 <tcp_timewait_input+0xcc>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	f003 0304 	and.w	r3, r3, #4
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d154      	bne.n	800ddb2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d106      	bne.n	800dd1c <tcp_timewait_input+0x28>
 800dd0e:	4b2d      	ldr	r3, [pc, #180]	; (800ddc4 <tcp_timewait_input+0xd0>)
 800dd10:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dd14:	492c      	ldr	r1, [pc, #176]	; (800ddc8 <tcp_timewait_input+0xd4>)
 800dd16:	482d      	ldr	r0, [pc, #180]	; (800ddcc <tcp_timewait_input+0xd8>)
 800dd18:	f005 ffbc 	bl	8013c94 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dd1c:	4b28      	ldr	r3, [pc, #160]	; (800ddc0 <tcp_timewait_input+0xcc>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	f003 0302 	and.w	r3, r3, #2
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d02a      	beq.n	800dd7e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dd28:	4b29      	ldr	r3, [pc, #164]	; (800ddd0 <tcp_timewait_input+0xdc>)
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	db2d      	blt.n	800dd92 <tcp_timewait_input+0x9e>
 800dd36:	4b26      	ldr	r3, [pc, #152]	; (800ddd0 <tcp_timewait_input+0xdc>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd42:	440b      	add	r3, r1
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	dc23      	bgt.n	800dd92 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd4a:	4b22      	ldr	r3, [pc, #136]	; (800ddd4 <tcp_timewait_input+0xe0>)
 800dd4c:	6819      	ldr	r1, [r3, #0]
 800dd4e:	4b22      	ldr	r3, [pc, #136]	; (800ddd8 <tcp_timewait_input+0xe4>)
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	461a      	mov	r2, r3
 800dd54:	4b1e      	ldr	r3, [pc, #120]	; (800ddd0 <tcp_timewait_input+0xdc>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd5a:	4b20      	ldr	r3, [pc, #128]	; (800dddc <tcp_timewait_input+0xe8>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd5e:	885b      	ldrh	r3, [r3, #2]
 800dd60:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd62:	4a1e      	ldr	r2, [pc, #120]	; (800dddc <tcp_timewait_input+0xe8>)
 800dd64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd66:	8812      	ldrh	r2, [r2, #0]
 800dd68:	b292      	uxth	r2, r2
 800dd6a:	9202      	str	r2, [sp, #8]
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	4b1c      	ldr	r3, [pc, #112]	; (800dde0 <tcp_timewait_input+0xec>)
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	4b1c      	ldr	r3, [pc, #112]	; (800dde4 <tcp_timewait_input+0xf0>)
 800dd74:	4602      	mov	r2, r0
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f002 fe82 	bl	8010a80 <tcp_rst>
      return;
 800dd7c:	e01c      	b.n	800ddb8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800dd7e:	4b10      	ldr	r3, [pc, #64]	; (800ddc0 <tcp_timewait_input+0xcc>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	f003 0301 	and.w	r3, r3, #1
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dd8a:	4b17      	ldr	r3, [pc, #92]	; (800dde8 <tcp_timewait_input+0xf4>)
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dd92:	4b11      	ldr	r3, [pc, #68]	; (800ddd8 <tcp_timewait_input+0xe4>)
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00d      	beq.n	800ddb6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	8b5b      	ldrh	r3, [r3, #26]
 800dd9e:	f043 0302 	orr.w	r3, r3, #2
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f002 f8a3 	bl	800fef4 <tcp_output>
  }
  return;
 800ddae:	bf00      	nop
 800ddb0:	e001      	b.n	800ddb6 <tcp_timewait_input+0xc2>
    return;
 800ddb2:	bf00      	nop
 800ddb4:	e000      	b.n	800ddb8 <tcp_timewait_input+0xc4>
  return;
 800ddb6:	bf00      	nop
}
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	2000ef24 	.word	0x2000ef24
 800ddc4:	08015e70 	.word	0x08015e70
 800ddc8:	08016088 	.word	0x08016088
 800ddcc:	08015ebc 	.word	0x08015ebc
 800ddd0:	2000ef18 	.word	0x2000ef18
 800ddd4:	2000ef1c 	.word	0x2000ef1c
 800ddd8:	2000ef22 	.word	0x2000ef22
 800dddc:	2000ef08 	.word	0x2000ef08
 800dde0:	200127d0 	.word	0x200127d0
 800dde4:	200127d4 	.word	0x200127d4
 800dde8:	20015ed8 	.word	0x20015ed8

0800ddec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ddec:	b590      	push	{r4, r7, lr}
 800ddee:	b08d      	sub	sp, #52	; 0x34
 800ddf0:	af04      	add	r7, sp, #16
 800ddf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d106      	bne.n	800de10 <tcp_process+0x24>
 800de02:	4ba5      	ldr	r3, [pc, #660]	; (800e098 <tcp_process+0x2ac>)
 800de04:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800de08:	49a4      	ldr	r1, [pc, #656]	; (800e09c <tcp_process+0x2b0>)
 800de0a:	48a5      	ldr	r0, [pc, #660]	; (800e0a0 <tcp_process+0x2b4>)
 800de0c:	f005 ff42 	bl	8013c94 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800de10:	4ba4      	ldr	r3, [pc, #656]	; (800e0a4 <tcp_process+0x2b8>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d04e      	beq.n	800deba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	7d1b      	ldrb	r3, [r3, #20]
 800de20:	2b02      	cmp	r3, #2
 800de22:	d108      	bne.n	800de36 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de28:	4b9f      	ldr	r3, [pc, #636]	; (800e0a8 <tcp_process+0x2bc>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d123      	bne.n	800de78 <tcp_process+0x8c>
        acceptable = 1;
 800de30:	2301      	movs	r3, #1
 800de32:	76fb      	strb	r3, [r7, #27]
 800de34:	e020      	b.n	800de78 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de3a:	4b9c      	ldr	r3, [pc, #624]	; (800e0ac <tcp_process+0x2c0>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d102      	bne.n	800de48 <tcp_process+0x5c>
        acceptable = 1;
 800de42:	2301      	movs	r3, #1
 800de44:	76fb      	strb	r3, [r7, #27]
 800de46:	e017      	b.n	800de78 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800de48:	4b98      	ldr	r3, [pc, #608]	; (800e0ac <tcp_process+0x2c0>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	db10      	blt.n	800de78 <tcp_process+0x8c>
 800de56:	4b95      	ldr	r3, [pc, #596]	; (800e0ac <tcp_process+0x2c0>)
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5e:	6879      	ldr	r1, [r7, #4]
 800de60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800de62:	440b      	add	r3, r1
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	2b00      	cmp	r3, #0
 800de68:	dc06      	bgt.n	800de78 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	8b5b      	ldrh	r3, [r3, #26]
 800de6e:	f043 0302 	orr.w	r3, r3, #2
 800de72:	b29a      	uxth	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800de78:	7efb      	ldrb	r3, [r7, #27]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d01b      	beq.n	800deb6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	7d1b      	ldrb	r3, [r3, #20]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <tcp_process+0xa8>
 800de86:	4b84      	ldr	r3, [pc, #528]	; (800e098 <tcp_process+0x2ac>)
 800de88:	f44f 724e 	mov.w	r2, #824	; 0x338
 800de8c:	4988      	ldr	r1, [pc, #544]	; (800e0b0 <tcp_process+0x2c4>)
 800de8e:	4884      	ldr	r0, [pc, #528]	; (800e0a0 <tcp_process+0x2b4>)
 800de90:	f005 ff00 	bl	8013c94 <iprintf>
      recv_flags |= TF_RESET;
 800de94:	4b87      	ldr	r3, [pc, #540]	; (800e0b4 <tcp_process+0x2c8>)
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	f043 0308 	orr.w	r3, r3, #8
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	4b85      	ldr	r3, [pc, #532]	; (800e0b4 <tcp_process+0x2c8>)
 800dea0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	8b5b      	ldrh	r3, [r3, #26]
 800dea6:	f023 0301 	bic.w	r3, r3, #1
 800deaa:	b29a      	uxth	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800deb0:	f06f 030d 	mvn.w	r3, #13
 800deb4:	e37a      	b.n	800e5ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	e378      	b.n	800e5ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800deba:	4b7a      	ldr	r3, [pc, #488]	; (800e0a4 <tcp_process+0x2b8>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	f003 0302 	and.w	r3, r3, #2
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d010      	beq.n	800dee8 <tcp_process+0xfc>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	7d1b      	ldrb	r3, [r3, #20]
 800deca:	2b02      	cmp	r3, #2
 800decc:	d00c      	beq.n	800dee8 <tcp_process+0xfc>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	7d1b      	ldrb	r3, [r3, #20]
 800ded2:	2b03      	cmp	r3, #3
 800ded4:	d008      	beq.n	800dee8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	8b5b      	ldrh	r3, [r3, #26]
 800deda:	f043 0302 	orr.w	r3, r3, #2
 800dede:	b29a      	uxth	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	e361      	b.n	800e5ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	8b5b      	ldrh	r3, [r3, #26]
 800deec:	f003 0310 	and.w	r3, r3, #16
 800def0:	2b00      	cmp	r3, #0
 800def2:	d103      	bne.n	800defc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800def4:	4b70      	ldr	r3, [pc, #448]	; (800e0b8 <tcp_process+0x2cc>)
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2200      	movs	r2, #0
 800df00:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f001 fc2d 	bl	800f76c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	7d1b      	ldrb	r3, [r3, #20]
 800df16:	3b02      	subs	r3, #2
 800df18:	2b07      	cmp	r3, #7
 800df1a:	f200 8337 	bhi.w	800e58c <tcp_process+0x7a0>
 800df1e:	a201      	add	r2, pc, #4	; (adr r2, 800df24 <tcp_process+0x138>)
 800df20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df24:	0800df45 	.word	0x0800df45
 800df28:	0800e175 	.word	0x0800e175
 800df2c:	0800e2ed 	.word	0x0800e2ed
 800df30:	0800e317 	.word	0x0800e317
 800df34:	0800e43b 	.word	0x0800e43b
 800df38:	0800e2ed 	.word	0x0800e2ed
 800df3c:	0800e4c7 	.word	0x0800e4c7
 800df40:	0800e557 	.word	0x0800e557
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800df44:	4b57      	ldr	r3, [pc, #348]	; (800e0a4 <tcp_process+0x2b8>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 0310 	and.w	r3, r3, #16
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f000 80e4 	beq.w	800e11a <tcp_process+0x32e>
 800df52:	4b54      	ldr	r3, [pc, #336]	; (800e0a4 <tcp_process+0x2b8>)
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	f003 0302 	and.w	r3, r3, #2
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 80dd 	beq.w	800e11a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	4b50      	ldr	r3, [pc, #320]	; (800e0a8 <tcp_process+0x2bc>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	f040 80d5 	bne.w	800e11a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800df70:	4b4e      	ldr	r3, [pc, #312]	; (800e0ac <tcp_process+0x2c0>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	1c5a      	adds	r2, r3, #1
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800df82:	4b49      	ldr	r3, [pc, #292]	; (800e0a8 <tcp_process+0x2bc>)
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800df8a:	4b4c      	ldr	r3, [pc, #304]	; (800e0bc <tcp_process+0x2d0>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	89db      	ldrh	r3, [r3, #14]
 800df90:	b29a      	uxth	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dfa4:	4b41      	ldr	r3, [pc, #260]	; (800e0ac <tcp_process+0x2c0>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	1e5a      	subs	r2, r3, #1
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2204      	movs	r2, #4
 800dfb2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f004 fb2d 	bl	801261c <ip4_route>
 800dfc2:	4601      	mov	r1, r0
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	461a      	mov	r2, r3
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f7ff f88e 	bl	800d0ec <tcp_eff_send_mss_netif>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfdc:	009a      	lsls	r2, r3, #2
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	f241 111c 	movw	r1, #4380	; 0x111c
 800dfe8:	428b      	cmp	r3, r1
 800dfea:	bf38      	it	cc
 800dfec:	460b      	movcc	r3, r1
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d204      	bcs.n	800dffc <tcp_process+0x210>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	e00d      	b.n	800e018 <tcp_process+0x22c>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e000:	005b      	lsls	r3, r3, #1
 800e002:	f241 121c 	movw	r2, #4380	; 0x111c
 800e006:	4293      	cmp	r3, r2
 800e008:	d904      	bls.n	800e014 <tcp_process+0x228>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e00e:	005b      	lsls	r3, r3, #1
 800e010:	b29b      	uxth	r3, r3
 800e012:	e001      	b.n	800e018 <tcp_process+0x22c>
 800e014:	f241 131c 	movw	r3, #4380	; 0x111c
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e024:	2b00      	cmp	r3, #0
 800e026:	d106      	bne.n	800e036 <tcp_process+0x24a>
 800e028:	4b1b      	ldr	r3, [pc, #108]	; (800e098 <tcp_process+0x2ac>)
 800e02a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e02e:	4924      	ldr	r1, [pc, #144]	; (800e0c0 <tcp_process+0x2d4>)
 800e030:	481b      	ldr	r0, [pc, #108]	; (800e0a0 <tcp_process+0x2b4>)
 800e032:	f005 fe2f 	bl	8013c94 <iprintf>
        --pcb->snd_queuelen;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e03c:	3b01      	subs	r3, #1
 800e03e:	b29a      	uxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e04a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d111      	bne.n	800e076 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e056:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d106      	bne.n	800e06c <tcp_process+0x280>
 800e05e:	4b0e      	ldr	r3, [pc, #56]	; (800e098 <tcp_process+0x2ac>)
 800e060:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e064:	4917      	ldr	r1, [pc, #92]	; (800e0c4 <tcp_process+0x2d8>)
 800e066:	480e      	ldr	r0, [pc, #56]	; (800e0a0 <tcp_process+0x2b4>)
 800e068:	f005 fe14 	bl	8013c94 <iprintf>
          pcb->unsent = rseg->next;
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	66da      	str	r2, [r3, #108]	; 0x6c
 800e074:	e003      	b.n	800e07e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e076:	69fb      	ldr	r3, [r7, #28]
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e07e:	69f8      	ldr	r0, [r7, #28]
 800e080:	f7fe fd3e 	bl	800cb00 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d11d      	bne.n	800e0c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e092:	861a      	strh	r2, [r3, #48]	; 0x30
 800e094:	e01f      	b.n	800e0d6 <tcp_process+0x2ea>
 800e096:	bf00      	nop
 800e098:	08015e70 	.word	0x08015e70
 800e09c:	080160a8 	.word	0x080160a8
 800e0a0:	08015ebc 	.word	0x08015ebc
 800e0a4:	2000ef24 	.word	0x2000ef24
 800e0a8:	2000ef1c 	.word	0x2000ef1c
 800e0ac:	2000ef18 	.word	0x2000ef18
 800e0b0:	080160c4 	.word	0x080160c4
 800e0b4:	2000ef25 	.word	0x2000ef25
 800e0b8:	20015ed8 	.word	0x20015ed8
 800e0bc:	2000ef08 	.word	0x2000ef08
 800e0c0:	080160e4 	.word	0x080160e4
 800e0c4:	080160fc 	.word	0x080160fc
        } else {
          pcb->rtime = 0;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00a      	beq.n	800e0f6 <tcp_process+0x30a>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	6910      	ldr	r0, [r2, #16]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	6879      	ldr	r1, [r7, #4]
 800e0ee:	4798      	blx	r3
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	76bb      	strb	r3, [r7, #26]
 800e0f4:	e001      	b.n	800e0fa <tcp_process+0x30e>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e0fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e0fe:	f113 0f0d 	cmn.w	r3, #13
 800e102:	d102      	bne.n	800e10a <tcp_process+0x31e>
          return ERR_ABRT;
 800e104:	f06f 030c 	mvn.w	r3, #12
 800e108:	e250      	b.n	800e5ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	8b5b      	ldrh	r3, [r3, #26]
 800e10e:	f043 0302 	orr.w	r3, r3, #2
 800e112:	b29a      	uxth	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e118:	e23a      	b.n	800e590 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e11a:	4b9d      	ldr	r3, [pc, #628]	; (800e390 <tcp_process+0x5a4>)
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	f003 0310 	and.w	r3, r3, #16
 800e122:	2b00      	cmp	r3, #0
 800e124:	f000 8234 	beq.w	800e590 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e128:	4b9a      	ldr	r3, [pc, #616]	; (800e394 <tcp_process+0x5a8>)
 800e12a:	6819      	ldr	r1, [r3, #0]
 800e12c:	4b9a      	ldr	r3, [pc, #616]	; (800e398 <tcp_process+0x5ac>)
 800e12e:	881b      	ldrh	r3, [r3, #0]
 800e130:	461a      	mov	r2, r3
 800e132:	4b9a      	ldr	r3, [pc, #616]	; (800e39c <tcp_process+0x5b0>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e138:	4b99      	ldr	r3, [pc, #612]	; (800e3a0 <tcp_process+0x5b4>)
 800e13a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e13c:	885b      	ldrh	r3, [r3, #2]
 800e13e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e140:	4a97      	ldr	r2, [pc, #604]	; (800e3a0 <tcp_process+0x5b4>)
 800e142:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e144:	8812      	ldrh	r2, [r2, #0]
 800e146:	b292      	uxth	r2, r2
 800e148:	9202      	str	r2, [sp, #8]
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	4b95      	ldr	r3, [pc, #596]	; (800e3a4 <tcp_process+0x5b8>)
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	4b95      	ldr	r3, [pc, #596]	; (800e3a8 <tcp_process+0x5bc>)
 800e152:	4602      	mov	r2, r0
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f002 fc93 	bl	8010a80 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e160:	2b05      	cmp	r3, #5
 800e162:	f200 8215 	bhi.w	800e590 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f002 fa51 	bl	8010614 <tcp_rexmit_rto>
      break;
 800e172:	e20d      	b.n	800e590 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e174:	4b86      	ldr	r3, [pc, #536]	; (800e390 <tcp_process+0x5a4>)
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	f003 0310 	and.w	r3, r3, #16
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f000 80a1 	beq.w	800e2c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e182:	4b84      	ldr	r3, [pc, #528]	; (800e394 <tcp_process+0x5a8>)
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	3b01      	subs	r3, #1
 800e18e:	2b00      	cmp	r3, #0
 800e190:	db7e      	blt.n	800e290 <tcp_process+0x4a4>
 800e192:	4b80      	ldr	r3, [pc, #512]	; (800e394 <tcp_process+0x5a8>)
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	dc77      	bgt.n	800e290 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2204      	movs	r2, #4
 800e1a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d102      	bne.n	800e1b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e1ae:	23fa      	movs	r3, #250	; 0xfa
 800e1b0:	76bb      	strb	r3, [r7, #26]
 800e1b2:	e01d      	b.n	800e1f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1b8:	699b      	ldr	r3, [r3, #24]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <tcp_process+0x3e0>
 800e1be:	4b7b      	ldr	r3, [pc, #492]	; (800e3ac <tcp_process+0x5c0>)
 800e1c0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e1c4:	497a      	ldr	r1, [pc, #488]	; (800e3b0 <tcp_process+0x5c4>)
 800e1c6:	487b      	ldr	r0, [pc, #492]	; (800e3b4 <tcp_process+0x5c8>)
 800e1c8:	f005 fd64 	bl	8013c94 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00a      	beq.n	800e1ec <tcp_process+0x400>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	6910      	ldr	r0, [r2, #16]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	6879      	ldr	r1, [r7, #4]
 800e1e4:	4798      	blx	r3
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	76bb      	strb	r3, [r7, #26]
 800e1ea:	e001      	b.n	800e1f0 <tcp_process+0x404>
 800e1ec:	23f0      	movs	r3, #240	; 0xf0
 800e1ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e1f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00a      	beq.n	800e20e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e1f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e1fc:	f113 0f0d 	cmn.w	r3, #13
 800e200:	d002      	beq.n	800e208 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7fd ff94 	bl	800c130 <tcp_abort>
            }
            return ERR_ABRT;
 800e208:	f06f 030c 	mvn.w	r3, #12
 800e20c:	e1ce      	b.n	800e5ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 fae0 	bl	800e7d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e214:	4b68      	ldr	r3, [pc, #416]	; (800e3b8 <tcp_process+0x5cc>)
 800e216:	881b      	ldrh	r3, [r3, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d005      	beq.n	800e228 <tcp_process+0x43c>
            recv_acked--;
 800e21c:	4b66      	ldr	r3, [pc, #408]	; (800e3b8 <tcp_process+0x5cc>)
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	3b01      	subs	r3, #1
 800e222:	b29a      	uxth	r2, r3
 800e224:	4b64      	ldr	r3, [pc, #400]	; (800e3b8 <tcp_process+0x5cc>)
 800e226:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e22c:	009a      	lsls	r2, r3, #2
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e232:	005b      	lsls	r3, r3, #1
 800e234:	f241 111c 	movw	r1, #4380	; 0x111c
 800e238:	428b      	cmp	r3, r1
 800e23a:	bf38      	it	cc
 800e23c:	460b      	movcc	r3, r1
 800e23e:	429a      	cmp	r2, r3
 800e240:	d204      	bcs.n	800e24c <tcp_process+0x460>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	b29b      	uxth	r3, r3
 800e24a:	e00d      	b.n	800e268 <tcp_process+0x47c>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e250:	005b      	lsls	r3, r3, #1
 800e252:	f241 121c 	movw	r2, #4380	; 0x111c
 800e256:	4293      	cmp	r3, r2
 800e258:	d904      	bls.n	800e264 <tcp_process+0x478>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	b29b      	uxth	r3, r3
 800e262:	e001      	b.n	800e268 <tcp_process+0x47c>
 800e264:	f241 131c 	movw	r3, #4380	; 0x111c
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e26e:	4b53      	ldr	r3, [pc, #332]	; (800e3bc <tcp_process+0x5d0>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	f003 0320 	and.w	r3, r3, #32
 800e276:	2b00      	cmp	r3, #0
 800e278:	d037      	beq.n	800e2ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	8b5b      	ldrh	r3, [r3, #26]
 800e27e:	f043 0302 	orr.w	r3, r3, #2
 800e282:	b29a      	uxth	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2207      	movs	r2, #7
 800e28c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e28e:	e02c      	b.n	800e2ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e290:	4b40      	ldr	r3, [pc, #256]	; (800e394 <tcp_process+0x5a8>)
 800e292:	6819      	ldr	r1, [r3, #0]
 800e294:	4b40      	ldr	r3, [pc, #256]	; (800e398 <tcp_process+0x5ac>)
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	461a      	mov	r2, r3
 800e29a:	4b40      	ldr	r3, [pc, #256]	; (800e39c <tcp_process+0x5b0>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2a0:	4b3f      	ldr	r3, [pc, #252]	; (800e3a0 <tcp_process+0x5b4>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2a4:	885b      	ldrh	r3, [r3, #2]
 800e2a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2a8:	4a3d      	ldr	r2, [pc, #244]	; (800e3a0 <tcp_process+0x5b4>)
 800e2aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2ac:	8812      	ldrh	r2, [r2, #0]
 800e2ae:	b292      	uxth	r2, r2
 800e2b0:	9202      	str	r2, [sp, #8]
 800e2b2:	9301      	str	r3, [sp, #4]
 800e2b4:	4b3b      	ldr	r3, [pc, #236]	; (800e3a4 <tcp_process+0x5b8>)
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	4b3b      	ldr	r3, [pc, #236]	; (800e3a8 <tcp_process+0x5bc>)
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f002 fbdf 	bl	8010a80 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e2c2:	e167      	b.n	800e594 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e2c4:	4b32      	ldr	r3, [pc, #200]	; (800e390 <tcp_process+0x5a4>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	f003 0302 	and.w	r3, r3, #2
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 8161 	beq.w	800e594 <tcp_process+0x7a8>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d6:	1e5a      	subs	r2, r3, #1
 800e2d8:	4b30      	ldr	r3, [pc, #192]	; (800e39c <tcp_process+0x5b0>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	f040 8159 	bne.w	800e594 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f002 f9b8 	bl	8010658 <tcp_rexmit>
      break;
 800e2e8:	e154      	b.n	800e594 <tcp_process+0x7a8>
 800e2ea:	e153      	b.n	800e594 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 fa71 	bl	800e7d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e2f2:	4b32      	ldr	r3, [pc, #200]	; (800e3bc <tcp_process+0x5d0>)
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	f003 0320 	and.w	r3, r3, #32
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f000 814c 	beq.w	800e598 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	8b5b      	ldrh	r3, [r3, #26]
 800e304:	f043 0302 	orr.w	r3, r3, #2
 800e308:	b29a      	uxth	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2207      	movs	r2, #7
 800e312:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e314:	e140      	b.n	800e598 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fa5c 	bl	800e7d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e31c:	4b27      	ldr	r3, [pc, #156]	; (800e3bc <tcp_process+0x5d0>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	f003 0320 	and.w	r3, r3, #32
 800e324:	2b00      	cmp	r3, #0
 800e326:	d071      	beq.n	800e40c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e328:	4b19      	ldr	r3, [pc, #100]	; (800e390 <tcp_process+0x5a4>)
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	f003 0310 	and.w	r3, r3, #16
 800e330:	2b00      	cmp	r3, #0
 800e332:	d060      	beq.n	800e3f6 <tcp_process+0x60a>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e338:	4b16      	ldr	r3, [pc, #88]	; (800e394 <tcp_process+0x5a8>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d15a      	bne.n	800e3f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e344:	2b00      	cmp	r3, #0
 800e346:	d156      	bne.n	800e3f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	8b5b      	ldrh	r3, [r3, #26]
 800e34c:	f043 0302 	orr.w	r3, r3, #2
 800e350:	b29a      	uxth	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7fe fdbe 	bl	800ced8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e35c:	4b18      	ldr	r3, [pc, #96]	; (800e3c0 <tcp_process+0x5d4>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	429a      	cmp	r2, r3
 800e364:	d105      	bne.n	800e372 <tcp_process+0x586>
 800e366:	4b16      	ldr	r3, [pc, #88]	; (800e3c0 <tcp_process+0x5d4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	4a14      	ldr	r2, [pc, #80]	; (800e3c0 <tcp_process+0x5d4>)
 800e36e:	6013      	str	r3, [r2, #0]
 800e370:	e02e      	b.n	800e3d0 <tcp_process+0x5e4>
 800e372:	4b13      	ldr	r3, [pc, #76]	; (800e3c0 <tcp_process+0x5d4>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	617b      	str	r3, [r7, #20]
 800e378:	e027      	b.n	800e3ca <tcp_process+0x5de>
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	429a      	cmp	r2, r3
 800e382:	d11f      	bne.n	800e3c4 <tcp_process+0x5d8>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	68da      	ldr	r2, [r3, #12]
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	60da      	str	r2, [r3, #12]
 800e38c:	e020      	b.n	800e3d0 <tcp_process+0x5e4>
 800e38e:	bf00      	nop
 800e390:	2000ef24 	.word	0x2000ef24
 800e394:	2000ef1c 	.word	0x2000ef1c
 800e398:	2000ef22 	.word	0x2000ef22
 800e39c:	2000ef18 	.word	0x2000ef18
 800e3a0:	2000ef08 	.word	0x2000ef08
 800e3a4:	200127d0 	.word	0x200127d0
 800e3a8:	200127d4 	.word	0x200127d4
 800e3ac:	08015e70 	.word	0x08015e70
 800e3b0:	08016110 	.word	0x08016110
 800e3b4:	08015ebc 	.word	0x08015ebc
 800e3b8:	2000ef20 	.word	0x2000ef20
 800e3bc:	2000ef25 	.word	0x2000ef25
 800e3c0:	20015ed4 	.word	0x20015ed4
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	617b      	str	r3, [r7, #20]
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1d4      	bne.n	800e37a <tcp_process+0x58e>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	60da      	str	r2, [r3, #12]
 800e3d6:	4b77      	ldr	r3, [pc, #476]	; (800e5b4 <tcp_process+0x7c8>)
 800e3d8:	2201      	movs	r2, #1
 800e3da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	220a      	movs	r2, #10
 800e3e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e3e2:	4b75      	ldr	r3, [pc, #468]	; (800e5b8 <tcp_process+0x7cc>)
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	60da      	str	r2, [r3, #12]
 800e3ea:	4a73      	ldr	r2, [pc, #460]	; (800e5b8 <tcp_process+0x7cc>)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	f002 fd08 	bl	8010e04 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e3f4:	e0d2      	b.n	800e59c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	8b5b      	ldrh	r3, [r3, #26]
 800e3fa:	f043 0302 	orr.w	r3, r3, #2
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2208      	movs	r2, #8
 800e408:	751a      	strb	r2, [r3, #20]
      break;
 800e40a:	e0c7      	b.n	800e59c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e40c:	4b6b      	ldr	r3, [pc, #428]	; (800e5bc <tcp_process+0x7d0>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	f003 0310 	and.w	r3, r3, #16
 800e414:	2b00      	cmp	r3, #0
 800e416:	f000 80c1 	beq.w	800e59c <tcp_process+0x7b0>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e41e:	4b68      	ldr	r3, [pc, #416]	; (800e5c0 <tcp_process+0x7d4>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	429a      	cmp	r2, r3
 800e424:	f040 80ba 	bne.w	800e59c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f040 80b5 	bne.w	800e59c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2206      	movs	r2, #6
 800e436:	751a      	strb	r2, [r3, #20]
      break;
 800e438:	e0b0      	b.n	800e59c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f9ca 	bl	800e7d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e440:	4b60      	ldr	r3, [pc, #384]	; (800e5c4 <tcp_process+0x7d8>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	f003 0320 	and.w	r3, r3, #32
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f000 80a9 	beq.w	800e5a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	8b5b      	ldrh	r3, [r3, #26]
 800e452:	f043 0302 	orr.w	r3, r3, #2
 800e456:	b29a      	uxth	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7fe fd3b 	bl	800ced8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e462:	4b59      	ldr	r3, [pc, #356]	; (800e5c8 <tcp_process+0x7dc>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d105      	bne.n	800e478 <tcp_process+0x68c>
 800e46c:	4b56      	ldr	r3, [pc, #344]	; (800e5c8 <tcp_process+0x7dc>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	4a55      	ldr	r2, [pc, #340]	; (800e5c8 <tcp_process+0x7dc>)
 800e474:	6013      	str	r3, [r2, #0]
 800e476:	e013      	b.n	800e4a0 <tcp_process+0x6b4>
 800e478:	4b53      	ldr	r3, [pc, #332]	; (800e5c8 <tcp_process+0x7dc>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	613b      	str	r3, [r7, #16]
 800e47e:	e00c      	b.n	800e49a <tcp_process+0x6ae>
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	429a      	cmp	r2, r3
 800e488:	d104      	bne.n	800e494 <tcp_process+0x6a8>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	68da      	ldr	r2, [r3, #12]
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	60da      	str	r2, [r3, #12]
 800e492:	e005      	b.n	800e4a0 <tcp_process+0x6b4>
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	613b      	str	r3, [r7, #16]
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1ef      	bne.n	800e480 <tcp_process+0x694>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	60da      	str	r2, [r3, #12]
 800e4a6:	4b43      	ldr	r3, [pc, #268]	; (800e5b4 <tcp_process+0x7c8>)
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	220a      	movs	r2, #10
 800e4b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e4b2:	4b41      	ldr	r3, [pc, #260]	; (800e5b8 <tcp_process+0x7cc>)
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	60da      	str	r2, [r3, #12]
 800e4ba:	4a3f      	ldr	r2, [pc, #252]	; (800e5b8 <tcp_process+0x7cc>)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6013      	str	r3, [r2, #0]
 800e4c0:	f002 fca0 	bl	8010e04 <tcp_timer_needed>
      }
      break;
 800e4c4:	e06c      	b.n	800e5a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f984 	bl	800e7d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e4cc:	4b3b      	ldr	r3, [pc, #236]	; (800e5bc <tcp_process+0x7d0>)
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	f003 0310 	and.w	r3, r3, #16
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d065      	beq.n	800e5a4 <tcp_process+0x7b8>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4dc:	4b38      	ldr	r3, [pc, #224]	; (800e5c0 <tcp_process+0x7d4>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d15f      	bne.n	800e5a4 <tcp_process+0x7b8>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d15b      	bne.n	800e5a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f7fe fcf3 	bl	800ced8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e4f2:	4b35      	ldr	r3, [pc, #212]	; (800e5c8 <tcp_process+0x7dc>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d105      	bne.n	800e508 <tcp_process+0x71c>
 800e4fc:	4b32      	ldr	r3, [pc, #200]	; (800e5c8 <tcp_process+0x7dc>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	4a31      	ldr	r2, [pc, #196]	; (800e5c8 <tcp_process+0x7dc>)
 800e504:	6013      	str	r3, [r2, #0]
 800e506:	e013      	b.n	800e530 <tcp_process+0x744>
 800e508:	4b2f      	ldr	r3, [pc, #188]	; (800e5c8 <tcp_process+0x7dc>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	60fb      	str	r3, [r7, #12]
 800e50e:	e00c      	b.n	800e52a <tcp_process+0x73e>
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	429a      	cmp	r2, r3
 800e518:	d104      	bne.n	800e524 <tcp_process+0x738>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	60da      	str	r2, [r3, #12]
 800e522:	e005      	b.n	800e530 <tcp_process+0x744>
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	60fb      	str	r3, [r7, #12]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1ef      	bne.n	800e510 <tcp_process+0x724>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	60da      	str	r2, [r3, #12]
 800e536:	4b1f      	ldr	r3, [pc, #124]	; (800e5b4 <tcp_process+0x7c8>)
 800e538:	2201      	movs	r2, #1
 800e53a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	220a      	movs	r2, #10
 800e540:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e542:	4b1d      	ldr	r3, [pc, #116]	; (800e5b8 <tcp_process+0x7cc>)
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	60da      	str	r2, [r3, #12]
 800e54a:	4a1b      	ldr	r2, [pc, #108]	; (800e5b8 <tcp_process+0x7cc>)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6013      	str	r3, [r2, #0]
 800e550:	f002 fc58 	bl	8010e04 <tcp_timer_needed>
      }
      break;
 800e554:	e026      	b.n	800e5a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 f93c 	bl	800e7d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e55c:	4b17      	ldr	r3, [pc, #92]	; (800e5bc <tcp_process+0x7d0>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f003 0310 	and.w	r3, r3, #16
 800e564:	2b00      	cmp	r3, #0
 800e566:	d01f      	beq.n	800e5a8 <tcp_process+0x7bc>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e56c:	4b14      	ldr	r3, [pc, #80]	; (800e5c0 <tcp_process+0x7d4>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	429a      	cmp	r2, r3
 800e572:	d119      	bne.n	800e5a8 <tcp_process+0x7bc>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d115      	bne.n	800e5a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e57c:	4b11      	ldr	r3, [pc, #68]	; (800e5c4 <tcp_process+0x7d8>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f043 0310 	orr.w	r3, r3, #16
 800e584:	b2da      	uxtb	r2, r3
 800e586:	4b0f      	ldr	r3, [pc, #60]	; (800e5c4 <tcp_process+0x7d8>)
 800e588:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e58a:	e00d      	b.n	800e5a8 <tcp_process+0x7bc>
    default:
      break;
 800e58c:	bf00      	nop
 800e58e:	e00c      	b.n	800e5aa <tcp_process+0x7be>
      break;
 800e590:	bf00      	nop
 800e592:	e00a      	b.n	800e5aa <tcp_process+0x7be>
      break;
 800e594:	bf00      	nop
 800e596:	e008      	b.n	800e5aa <tcp_process+0x7be>
      break;
 800e598:	bf00      	nop
 800e59a:	e006      	b.n	800e5aa <tcp_process+0x7be>
      break;
 800e59c:	bf00      	nop
 800e59e:	e004      	b.n	800e5aa <tcp_process+0x7be>
      break;
 800e5a0:	bf00      	nop
 800e5a2:	e002      	b.n	800e5aa <tcp_process+0x7be>
      break;
 800e5a4:	bf00      	nop
 800e5a6:	e000      	b.n	800e5aa <tcp_process+0x7be>
      break;
 800e5a8:	bf00      	nop
  }
  return ERR_OK;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3724      	adds	r7, #36	; 0x24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd90      	pop	{r4, r7, pc}
 800e5b4:	20015ed0 	.word	0x20015ed0
 800e5b8:	20015ee4 	.word	0x20015ee4
 800e5bc:	2000ef24 	.word	0x2000ef24
 800e5c0:	2000ef1c 	.word	0x2000ef1c
 800e5c4:	2000ef25 	.word	0x2000ef25
 800e5c8:	20015ed4 	.word	0x20015ed4

0800e5cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e5cc:	b590      	push	{r4, r7, lr}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d106      	bne.n	800e5ea <tcp_oos_insert_segment+0x1e>
 800e5dc:	4b3b      	ldr	r3, [pc, #236]	; (800e6cc <tcp_oos_insert_segment+0x100>)
 800e5de:	f240 421f 	movw	r2, #1055	; 0x41f
 800e5e2:	493b      	ldr	r1, [pc, #236]	; (800e6d0 <tcp_oos_insert_segment+0x104>)
 800e5e4:	483b      	ldr	r0, [pc, #236]	; (800e6d4 <tcp_oos_insert_segment+0x108>)
 800e5e6:	f005 fb55 	bl	8013c94 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	899b      	ldrh	r3, [r3, #12]
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fb fce0 	bl	8009fb8 <lwip_htons>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	2b00      	cmp	r3, #0
 800e602:	d028      	beq.n	800e656 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e604:	6838      	ldr	r0, [r7, #0]
 800e606:	f7fe fa67 	bl	800cad8 <tcp_segs_free>
    next = NULL;
 800e60a:	2300      	movs	r3, #0
 800e60c:	603b      	str	r3, [r7, #0]
 800e60e:	e056      	b.n	800e6be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	899b      	ldrh	r3, [r3, #12]
 800e616:	b29b      	uxth	r3, r3
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fb fccd 	bl	8009fb8 <lwip_htons>
 800e61e:	4603      	mov	r3, r0
 800e620:	b2db      	uxtb	r3, r3
 800e622:	f003 0301 	and.w	r3, r3, #1
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00d      	beq.n	800e646 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	899b      	ldrh	r3, [r3, #12]
 800e630:	b29c      	uxth	r4, r3
 800e632:	2001      	movs	r0, #1
 800e634:	f7fb fcc0 	bl	8009fb8 <lwip_htons>
 800e638:	4603      	mov	r3, r0
 800e63a:	461a      	mov	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	4322      	orrs	r2, r4
 800e642:	b292      	uxth	r2, r2
 800e644:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f7fe fa55 	bl	800cb00 <tcp_seg_free>
    while (next &&
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00e      	beq.n	800e67a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	891b      	ldrh	r3, [r3, #8]
 800e660:	461a      	mov	r2, r3
 800e662:	4b1d      	ldr	r3, [pc, #116]	; (800e6d8 <tcp_oos_insert_segment+0x10c>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	441a      	add	r2, r3
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	6839      	ldr	r1, [r7, #0]
 800e670:	8909      	ldrh	r1, [r1, #8]
 800e672:	440b      	add	r3, r1
 800e674:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e676:	2b00      	cmp	r3, #0
 800e678:	daca      	bge.n	800e610 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d01e      	beq.n	800e6be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	891b      	ldrh	r3, [r3, #8]
 800e684:	461a      	mov	r2, r3
 800e686:	4b14      	ldr	r3, [pc, #80]	; (800e6d8 <tcp_oos_insert_segment+0x10c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	441a      	add	r2, r3
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e694:	2b00      	cmp	r3, #0
 800e696:	dd12      	ble.n	800e6be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	4b0d      	ldr	r3, [pc, #52]	; (800e6d8 <tcp_oos_insert_segment+0x10c>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	685a      	ldr	r2, [r3, #4]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	891b      	ldrh	r3, [r3, #8]
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	f7fc fe27 	bl	800b30c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	683a      	ldr	r2, [r7, #0]
 800e6c2:	601a      	str	r2, [r3, #0]
}
 800e6c4:	bf00      	nop
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd90      	pop	{r4, r7, pc}
 800e6cc:	08015e70 	.word	0x08015e70
 800e6d0:	08016130 	.word	0x08016130
 800e6d4:	08015ebc 	.word	0x08015ebc
 800e6d8:	2000ef18 	.word	0x2000ef18

0800e6dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e6dc:	b5b0      	push	{r4, r5, r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
 800e6e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e6ea:	e03e      	b.n	800e76a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fd f81a 	bl	800b734 <pbuf_clen>
 800e700:	4603      	mov	r3, r0
 800e702:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e70a:	8a7a      	ldrh	r2, [r7, #18]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d906      	bls.n	800e71e <tcp_free_acked_segments+0x42>
 800e710:	4b2a      	ldr	r3, [pc, #168]	; (800e7bc <tcp_free_acked_segments+0xe0>)
 800e712:	f240 4257 	movw	r2, #1111	; 0x457
 800e716:	492a      	ldr	r1, [pc, #168]	; (800e7c0 <tcp_free_acked_segments+0xe4>)
 800e718:	482a      	ldr	r0, [pc, #168]	; (800e7c4 <tcp_free_acked_segments+0xe8>)
 800e71a:	f005 fabb 	bl	8013c94 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e724:	8a7b      	ldrh	r3, [r7, #18]
 800e726:	1ad3      	subs	r3, r2, r3
 800e728:	b29a      	uxth	r2, r3
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	891a      	ldrh	r2, [r3, #8]
 800e734:	4b24      	ldr	r3, [pc, #144]	; (800e7c8 <tcp_free_acked_segments+0xec>)
 800e736:	881b      	ldrh	r3, [r3, #0]
 800e738:	4413      	add	r3, r2
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	4b22      	ldr	r3, [pc, #136]	; (800e7c8 <tcp_free_acked_segments+0xec>)
 800e73e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e740:	6978      	ldr	r0, [r7, #20]
 800e742:	f7fe f9dd 	bl	800cb00 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00c      	beq.n	800e76a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d109      	bne.n	800e76a <tcp_free_acked_segments+0x8e>
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d106      	bne.n	800e76a <tcp_free_acked_segments+0x8e>
 800e75c:	4b17      	ldr	r3, [pc, #92]	; (800e7bc <tcp_free_acked_segments+0xe0>)
 800e75e:	f240 4262 	movw	r2, #1122	; 0x462
 800e762:	491a      	ldr	r1, [pc, #104]	; (800e7cc <tcp_free_acked_segments+0xf0>)
 800e764:	4817      	ldr	r0, [pc, #92]	; (800e7c4 <tcp_free_acked_segments+0xe8>)
 800e766:	f005 fa95 	bl	8013c94 <iprintf>
  while (seg_list != NULL &&
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d020      	beq.n	800e7b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	4618      	mov	r0, r3
 800e778:	f7fb fc33 	bl	8009fe2 <lwip_htonl>
 800e77c:	4604      	mov	r4, r0
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	891b      	ldrh	r3, [r3, #8]
 800e782:	461d      	mov	r5, r3
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	899b      	ldrh	r3, [r3, #12]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fb fc13 	bl	8009fb8 <lwip_htons>
 800e792:	4603      	mov	r3, r0
 800e794:	b2db      	uxtb	r3, r3
 800e796:	f003 0303 	and.w	r3, r3, #3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <tcp_free_acked_segments+0xc6>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e000      	b.n	800e7a4 <tcp_free_acked_segments+0xc8>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	442b      	add	r3, r5
 800e7a6:	18e2      	adds	r2, r4, r3
 800e7a8:	4b09      	ldr	r3, [pc, #36]	; (800e7d0 <tcp_free_acked_segments+0xf4>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	dd9c      	ble.n	800e6ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e7b2:	68bb      	ldr	r3, [r7, #8]
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e7bc:	08015e70 	.word	0x08015e70
 800e7c0:	08016158 	.word	0x08016158
 800e7c4:	08015ebc 	.word	0x08015ebc
 800e7c8:	2000ef20 	.word	0x2000ef20
 800e7cc:	08016180 	.word	0x08016180
 800e7d0:	2000ef1c 	.word	0x2000ef1c

0800e7d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e7d4:	b5b0      	push	{r4, r5, r7, lr}
 800e7d6:	b094      	sub	sp, #80	; 0x50
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d106      	bne.n	800e7f4 <tcp_receive+0x20>
 800e7e6:	4ba6      	ldr	r3, [pc, #664]	; (800ea80 <tcp_receive+0x2ac>)
 800e7e8:	f240 427b 	movw	r2, #1147	; 0x47b
 800e7ec:	49a5      	ldr	r1, [pc, #660]	; (800ea84 <tcp_receive+0x2b0>)
 800e7ee:	48a6      	ldr	r0, [pc, #664]	; (800ea88 <tcp_receive+0x2b4>)
 800e7f0:	f005 fa50 	bl	8013c94 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	7d1b      	ldrb	r3, [r3, #20]
 800e7f8:	2b03      	cmp	r3, #3
 800e7fa:	d806      	bhi.n	800e80a <tcp_receive+0x36>
 800e7fc:	4ba0      	ldr	r3, [pc, #640]	; (800ea80 <tcp_receive+0x2ac>)
 800e7fe:	f240 427c 	movw	r2, #1148	; 0x47c
 800e802:	49a2      	ldr	r1, [pc, #648]	; (800ea8c <tcp_receive+0x2b8>)
 800e804:	48a0      	ldr	r0, [pc, #640]	; (800ea88 <tcp_receive+0x2b4>)
 800e806:	f005 fa45 	bl	8013c94 <iprintf>

  if (flags & TCP_ACK) {
 800e80a:	4ba1      	ldr	r3, [pc, #644]	; (800ea90 <tcp_receive+0x2bc>)
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	f003 0310 	and.w	r3, r3, #16
 800e812:	2b00      	cmp	r3, #0
 800e814:	f000 8263 	beq.w	800ecde <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e81e:	461a      	mov	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e824:	4413      	add	r3, r2
 800e826:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e82c:	4b99      	ldr	r3, [pc, #612]	; (800ea94 <tcp_receive+0x2c0>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	2b00      	cmp	r3, #0
 800e834:	db1b      	blt.n	800e86e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e83a:	4b96      	ldr	r3, [pc, #600]	; (800ea94 <tcp_receive+0x2c0>)
 800e83c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e83e:	429a      	cmp	r2, r3
 800e840:	d106      	bne.n	800e850 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e846:	4b94      	ldr	r3, [pc, #592]	; (800ea98 <tcp_receive+0x2c4>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	db0e      	blt.n	800e86e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e854:	4b90      	ldr	r3, [pc, #576]	; (800ea98 <tcp_receive+0x2c4>)
 800e856:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e858:	429a      	cmp	r2, r3
 800e85a:	d125      	bne.n	800e8a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e85c:	4b8f      	ldr	r3, [pc, #572]	; (800ea9c <tcp_receive+0x2c8>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	89db      	ldrh	r3, [r3, #14]
 800e862:	b29a      	uxth	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d91c      	bls.n	800e8a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e86e:	4b8b      	ldr	r3, [pc, #556]	; (800ea9c <tcp_receive+0x2c8>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	89db      	ldrh	r3, [r3, #14]
 800e874:	b29a      	uxth	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e888:	429a      	cmp	r2, r3
 800e88a:	d205      	bcs.n	800e898 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e898:	4b7e      	ldr	r3, [pc, #504]	; (800ea94 <tcp_receive+0x2c0>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e8a0:	4b7d      	ldr	r3, [pc, #500]	; (800ea98 <tcp_receive+0x2c4>)
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e8a8:	4b7b      	ldr	r3, [pc, #492]	; (800ea98 <tcp_receive+0x2c4>)
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8b0:	1ad3      	subs	r3, r2, r3
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	dc58      	bgt.n	800e968 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e8b6:	4b7a      	ldr	r3, [pc, #488]	; (800eaa0 <tcp_receive+0x2cc>)
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d14b      	bne.n	800e956 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e8c8:	4413      	add	r3, r2
 800e8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d142      	bne.n	800e956 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	db3d      	blt.n	800e956 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8de:	4b6e      	ldr	r3, [pc, #440]	; (800ea98 <tcp_receive+0x2c4>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d137      	bne.n	800e956 <tcp_receive+0x182>
              found_dupack = 1;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8f0:	2bff      	cmp	r3, #255	; 0xff
 800e8f2:	d007      	beq.n	800e904 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e90a:	2b03      	cmp	r3, #3
 800e90c:	d91b      	bls.n	800e946 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e918:	4413      	add	r3, r2
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e922:	429a      	cmp	r2, r3
 800e924:	d30a      	bcc.n	800e93c <tcp_receive+0x168>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e930:	4413      	add	r3, r2
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e93a:	e004      	b.n	800e946 <tcp_receive+0x172>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e942:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	d902      	bls.n	800e956 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f001 feed 	bl	8010730 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f040 8160 	bne.w	800ec1e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e966:	e15a      	b.n	800ec1e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e968:	4b4b      	ldr	r3, [pc, #300]	; (800ea98 <tcp_receive+0x2c4>)
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	3b01      	subs	r3, #1
 800e974:	2b00      	cmp	r3, #0
 800e976:	f2c0 814d 	blt.w	800ec14 <tcp_receive+0x440>
 800e97a:	4b47      	ldr	r3, [pc, #284]	; (800ea98 <tcp_receive+0x2c4>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e982:	1ad3      	subs	r3, r2, r3
 800e984:	2b00      	cmp	r3, #0
 800e986:	f300 8145 	bgt.w	800ec14 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	8b5b      	ldrh	r3, [r3, #26]
 800e98e:	f003 0304 	and.w	r3, r3, #4
 800e992:	2b00      	cmp	r3, #0
 800e994:	d010      	beq.n	800e9b8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	8b5b      	ldrh	r3, [r3, #26]
 800e99a:	f023 0304 	bic.w	r3, r3, #4
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9c6:	10db      	asrs	r3, r3, #3
 800e9c8:	b21b      	sxth	r3, r3
 800e9ca:	b29a      	uxth	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	4413      	add	r3, r2
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	b21a      	sxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ea98 <tcp_receive+0x2c4>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e9f8:	4b27      	ldr	r3, [pc, #156]	; (800ea98 <tcp_receive+0x2c4>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	7d1b      	ldrb	r3, [r3, #20]
 800ea04:	2b03      	cmp	r3, #3
 800ea06:	f240 8096 	bls.w	800eb36 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d244      	bcs.n	800eaa4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	8b5b      	ldrh	r3, [r3, #26]
 800ea1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <tcp_receive+0x256>
 800ea26:	2301      	movs	r3, #1
 800ea28:	e000      	b.n	800ea2c <tcp_receive+0x258>
 800ea2a:	2302      	movs	r3, #2
 800ea2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ea30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea3a:	fb12 f303 	smulbb	r3, r2, r3
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea42:	4293      	cmp	r3, r2
 800ea44:	bf28      	it	cs
 800ea46:	4613      	movcs	r3, r2
 800ea48:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea52:	4413      	add	r3, r2
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d309      	bcc.n	800ea74 <tcp_receive+0x2a0>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea68:	4413      	add	r3, r2
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea72:	e060      	b.n	800eb36 <tcp_receive+0x362>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea7e:	e05a      	b.n	800eb36 <tcp_receive+0x362>
 800ea80:	08015e70 	.word	0x08015e70
 800ea84:	080161a0 	.word	0x080161a0
 800ea88:	08015ebc 	.word	0x08015ebc
 800ea8c:	080161bc 	.word	0x080161bc
 800ea90:	2000ef24 	.word	0x2000ef24
 800ea94:	2000ef18 	.word	0x2000ef18
 800ea98:	2000ef1c 	.word	0x2000ef1c
 800ea9c:	2000ef08 	.word	0x2000ef08
 800eaa0:	2000ef22 	.word	0x2000ef22
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eaaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eaac:	4413      	add	r3, r2
 800eaae:	b29a      	uxth	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d309      	bcc.n	800eace <tcp_receive+0x2fa>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eac0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eac2:	4413      	add	r3, r2
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eacc:	e004      	b.n	800ead8 <tcp_receive+0x304>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ead4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d326      	bcc.n	800eb36 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb08:	4413      	add	r3, r2
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d30a      	bcc.n	800eb2c <tcp_receive+0x358>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb20:	4413      	add	r3, r2
 800eb22:	b29a      	uxth	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eb2a:	e004      	b.n	800eb36 <tcp_receive+0x362>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb3e:	4a98      	ldr	r2, [pc, #608]	; (800eda0 <tcp_receive+0x5cc>)
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff fdcb 	bl	800e6dc <tcp_free_acked_segments>
 800eb46:	4602      	mov	r2, r0
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb54:	4a93      	ldr	r2, [pc, #588]	; (800eda4 <tcp_receive+0x5d0>)
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff fdc0 	bl	800e6dc <tcp_free_acked_segments>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d104      	bne.n	800eb74 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb70:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb72:	e002      	b.n	800eb7a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d103      	bne.n	800eb90 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800eb96:	4b84      	ldr	r3, [pc, #528]	; (800eda8 <tcp_receive+0x5d4>)
 800eb98:	881b      	ldrh	r3, [r3, #0]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	8b5b      	ldrh	r3, [r3, #26]
 800eba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d035      	beq.n	800ec1c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d118      	bne.n	800ebea <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00c      	beq.n	800ebda <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fb fa08 	bl	8009fe2 <lwip_htonl>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	dc20      	bgt.n	800ec1c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	8b5b      	ldrh	r3, [r3, #26]
 800ebde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebe8:	e018      	b.n	800ec1c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7fb f9f3 	bl	8009fe2 <lwip_htonl>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	1ae3      	subs	r3, r4, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	dc0b      	bgt.n	800ec1c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	8b5b      	ldrh	r3, [r3, #26]
 800ec08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec12:	e003      	b.n	800ec1c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f001 ff85 	bl	8010b24 <tcp_send_empty_ack>
 800ec1a:	e000      	b.n	800ec1e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec1c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d05b      	beq.n	800ecde <tcp_receive+0x50a>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec2a:	4b60      	ldr	r3, [pc, #384]	; (800edac <tcp_receive+0x5d8>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	1ad3      	subs	r3, r2, r3
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	da54      	bge.n	800ecde <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ec34:	4b5e      	ldr	r3, [pc, #376]	; (800edb0 <tcp_receive+0x5dc>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	1ad3      	subs	r3, r2, r3
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ec48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec52:	10db      	asrs	r3, r3, #3
 800ec54:	b21b      	sxth	r3, r3
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec6c:	4413      	add	r3, r2
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	b21a      	sxth	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ec76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	da05      	bge.n	800ec8a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ec7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec82:	425b      	negs	r3, r3
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ec8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec94:	109b      	asrs	r3, r3, #2
 800ec96:	b21b      	sxth	r3, r3
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ecae:	4413      	add	r3, r2
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	b21a      	sxth	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ecbe:	10db      	asrs	r3, r3, #3
 800ecc0:	b21b      	sxth	r3, r3
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	4413      	add	r3, r2
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	b21a      	sxth	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ecde:	4b35      	ldr	r3, [pc, #212]	; (800edb4 <tcp_receive+0x5e0>)
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f000 84e1 	beq.w	800f6aa <tcp_receive+0xed6>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	7d1b      	ldrb	r3, [r3, #20]
 800ecec:	2b06      	cmp	r3, #6
 800ecee:	f200 84dc 	bhi.w	800f6aa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecf6:	4b30      	ldr	r3, [pc, #192]	; (800edb8 <tcp_receive+0x5e4>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	1ad3      	subs	r3, r2, r3
 800ecfc:	3b01      	subs	r3, #1
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f2c0 808e 	blt.w	800ee20 <tcp_receive+0x64c>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed08:	4b2a      	ldr	r3, [pc, #168]	; (800edb4 <tcp_receive+0x5e0>)
 800ed0a:	881b      	ldrh	r3, [r3, #0]
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	4b2a      	ldr	r3, [pc, #168]	; (800edb8 <tcp_receive+0x5e4>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	440b      	add	r3, r1
 800ed14:	1ad3      	subs	r3, r2, r3
 800ed16:	3301      	adds	r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f300 8081 	bgt.w	800ee20 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ed1e:	4b27      	ldr	r3, [pc, #156]	; (800edbc <tcp_receive+0x5e8>)
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed28:	4b23      	ldr	r3, [pc, #140]	; (800edb8 <tcp_receive+0x5e4>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ed30:	4b22      	ldr	r3, [pc, #136]	; (800edbc <tcp_receive+0x5e8>)
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d106      	bne.n	800ed46 <tcp_receive+0x572>
 800ed38:	4b21      	ldr	r3, [pc, #132]	; (800edc0 <tcp_receive+0x5ec>)
 800ed3a:	f240 5294 	movw	r2, #1428	; 0x594
 800ed3e:	4921      	ldr	r1, [pc, #132]	; (800edc4 <tcp_receive+0x5f0>)
 800ed40:	4821      	ldr	r0, [pc, #132]	; (800edc8 <tcp_receive+0x5f4>)
 800ed42:	f004 ffa7 	bl	8013c94 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ed46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d906      	bls.n	800ed5e <tcp_receive+0x58a>
 800ed50:	4b1b      	ldr	r3, [pc, #108]	; (800edc0 <tcp_receive+0x5ec>)
 800ed52:	f240 5295 	movw	r2, #1429	; 0x595
 800ed56:	491d      	ldr	r1, [pc, #116]	; (800edcc <tcp_receive+0x5f8>)
 800ed58:	481b      	ldr	r0, [pc, #108]	; (800edc8 <tcp_receive+0x5f4>)
 800ed5a:	f004 ff9b 	bl	8013c94 <iprintf>
      off = (u16_t)off32;
 800ed5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ed64:	4b15      	ldr	r3, [pc, #84]	; (800edbc <tcp_receive+0x5e8>)
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	891b      	ldrh	r3, [r3, #8]
 800ed6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d906      	bls.n	800ed80 <tcp_receive+0x5ac>
 800ed72:	4b13      	ldr	r3, [pc, #76]	; (800edc0 <tcp_receive+0x5ec>)
 800ed74:	f240 5297 	movw	r2, #1431	; 0x597
 800ed78:	4915      	ldr	r1, [pc, #84]	; (800edd0 <tcp_receive+0x5fc>)
 800ed7a:	4813      	ldr	r0, [pc, #76]	; (800edc8 <tcp_receive+0x5f4>)
 800ed7c:	f004 ff8a 	bl	8013c94 <iprintf>
      inseg.len -= off;
 800ed80:	4b0e      	ldr	r3, [pc, #56]	; (800edbc <tcp_receive+0x5e8>)
 800ed82:	891a      	ldrh	r2, [r3, #8]
 800ed84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	b29a      	uxth	r2, r3
 800ed8c:	4b0b      	ldr	r3, [pc, #44]	; (800edbc <tcp_receive+0x5e8>)
 800ed8e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ed90:	4b0a      	ldr	r3, [pc, #40]	; (800edbc <tcp_receive+0x5e8>)
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	891a      	ldrh	r2, [r3, #8]
 800ed96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ed9e:	e029      	b.n	800edf4 <tcp_receive+0x620>
 800eda0:	080161d8 	.word	0x080161d8
 800eda4:	080161e0 	.word	0x080161e0
 800eda8:	2000ef20 	.word	0x2000ef20
 800edac:	2000ef1c 	.word	0x2000ef1c
 800edb0:	20015ed8 	.word	0x20015ed8
 800edb4:	2000ef22 	.word	0x2000ef22
 800edb8:	2000ef18 	.word	0x2000ef18
 800edbc:	2000eef8 	.word	0x2000eef8
 800edc0:	08015e70 	.word	0x08015e70
 800edc4:	080161e8 	.word	0x080161e8
 800edc8:	08015ebc 	.word	0x08015ebc
 800edcc:	080161f8 	.word	0x080161f8
 800edd0:	08016208 	.word	0x08016208
        off -= p->len;
 800edd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd6:	895b      	ldrh	r3, [r3, #10]
 800edd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eddc:	1ad3      	subs	r3, r2, r3
 800edde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ede2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ede4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ede6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ede8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edea:	2200      	movs	r2, #0
 800edec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800edee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800edf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf6:	895b      	ldrh	r3, [r3, #10]
 800edf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d8e9      	bhi.n	800edd4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ee00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee04:	4619      	mov	r1, r3
 800ee06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee08:	f7fc fb80 	bl	800b50c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee10:	4a91      	ldr	r2, [pc, #580]	; (800f058 <tcp_receive+0x884>)
 800ee12:	6013      	str	r3, [r2, #0]
 800ee14:	4b91      	ldr	r3, [pc, #580]	; (800f05c <tcp_receive+0x888>)
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	4a8f      	ldr	r2, [pc, #572]	; (800f058 <tcp_receive+0x884>)
 800ee1a:	6812      	ldr	r2, [r2, #0]
 800ee1c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ee1e:	e00d      	b.n	800ee3c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ee20:	4b8d      	ldr	r3, [pc, #564]	; (800f058 <tcp_receive+0x884>)
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee28:	1ad3      	subs	r3, r2, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	da06      	bge.n	800ee3c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	8b5b      	ldrh	r3, [r3, #26]
 800ee32:	f043 0302 	orr.w	r3, r3, #2
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee3c:	4b86      	ldr	r3, [pc, #536]	; (800f058 <tcp_receive+0x884>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee44:	1ad3      	subs	r3, r2, r3
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f2c0 842a 	blt.w	800f6a0 <tcp_receive+0xecc>
 800ee4c:	4b82      	ldr	r3, [pc, #520]	; (800f058 <tcp_receive+0x884>)
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee54:	6879      	ldr	r1, [r7, #4]
 800ee56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee58:	440b      	add	r3, r1
 800ee5a:	1ad3      	subs	r3, r2, r3
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f300 841e 	bgt.w	800f6a0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee68:	4b7b      	ldr	r3, [pc, #492]	; (800f058 <tcp_receive+0x884>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	f040 829a 	bne.w	800f3a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ee72:	4b7a      	ldr	r3, [pc, #488]	; (800f05c <tcp_receive+0x888>)
 800ee74:	891c      	ldrh	r4, [r3, #8]
 800ee76:	4b79      	ldr	r3, [pc, #484]	; (800f05c <tcp_receive+0x888>)
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	899b      	ldrh	r3, [r3, #12]
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fb f89a 	bl	8009fb8 <lwip_htons>
 800ee84:	4603      	mov	r3, r0
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	f003 0303 	and.w	r3, r3, #3
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d001      	beq.n	800ee94 <tcp_receive+0x6c0>
 800ee90:	2301      	movs	r3, #1
 800ee92:	e000      	b.n	800ee96 <tcp_receive+0x6c2>
 800ee94:	2300      	movs	r3, #0
 800ee96:	4423      	add	r3, r4
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	4b71      	ldr	r3, [pc, #452]	; (800f060 <tcp_receive+0x88c>)
 800ee9c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eea2:	4b6f      	ldr	r3, [pc, #444]	; (800f060 <tcp_receive+0x88c>)
 800eea4:	881b      	ldrh	r3, [r3, #0]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d275      	bcs.n	800ef96 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eeaa:	4b6c      	ldr	r3, [pc, #432]	; (800f05c <tcp_receive+0x888>)
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	899b      	ldrh	r3, [r3, #12]
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fb f880 	bl	8009fb8 <lwip_htons>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	f003 0301 	and.w	r3, r3, #1
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d01f      	beq.n	800ef04 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800eec4:	4b65      	ldr	r3, [pc, #404]	; (800f05c <tcp_receive+0x888>)
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	899b      	ldrh	r3, [r3, #12]
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	b21b      	sxth	r3, r3
 800eece:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eed2:	b21c      	sxth	r4, r3
 800eed4:	4b61      	ldr	r3, [pc, #388]	; (800f05c <tcp_receive+0x888>)
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	899b      	ldrh	r3, [r3, #12]
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fb f86b 	bl	8009fb8 <lwip_htons>
 800eee2:	4603      	mov	r3, r0
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fb f862 	bl	8009fb8 <lwip_htons>
 800eef4:	4603      	mov	r3, r0
 800eef6:	b21b      	sxth	r3, r3
 800eef8:	4323      	orrs	r3, r4
 800eefa:	b21a      	sxth	r2, r3
 800eefc:	4b57      	ldr	r3, [pc, #348]	; (800f05c <tcp_receive+0x888>)
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	b292      	uxth	r2, r2
 800ef02:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef08:	4b54      	ldr	r3, [pc, #336]	; (800f05c <tcp_receive+0x888>)
 800ef0a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ef0c:	4b53      	ldr	r3, [pc, #332]	; (800f05c <tcp_receive+0x888>)
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	899b      	ldrh	r3, [r3, #12]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fb f84f 	bl	8009fb8 <lwip_htons>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	f003 0302 	and.w	r3, r3, #2
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d005      	beq.n	800ef32 <tcp_receive+0x75e>
            inseg.len -= 1;
 800ef26:	4b4d      	ldr	r3, [pc, #308]	; (800f05c <tcp_receive+0x888>)
 800ef28:	891b      	ldrh	r3, [r3, #8]
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	4b4b      	ldr	r3, [pc, #300]	; (800f05c <tcp_receive+0x888>)
 800ef30:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ef32:	4b4a      	ldr	r3, [pc, #296]	; (800f05c <tcp_receive+0x888>)
 800ef34:	685a      	ldr	r2, [r3, #4]
 800ef36:	4b49      	ldr	r3, [pc, #292]	; (800f05c <tcp_receive+0x888>)
 800ef38:	891b      	ldrh	r3, [r3, #8]
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	f7fc f9e5 	bl	800b30c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ef42:	4b46      	ldr	r3, [pc, #280]	; (800f05c <tcp_receive+0x888>)
 800ef44:	891c      	ldrh	r4, [r3, #8]
 800ef46:	4b45      	ldr	r3, [pc, #276]	; (800f05c <tcp_receive+0x888>)
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	899b      	ldrh	r3, [r3, #12]
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fb f832 	bl	8009fb8 <lwip_htons>
 800ef54:	4603      	mov	r3, r0
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	f003 0303 	and.w	r3, r3, #3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d001      	beq.n	800ef64 <tcp_receive+0x790>
 800ef60:	2301      	movs	r3, #1
 800ef62:	e000      	b.n	800ef66 <tcp_receive+0x792>
 800ef64:	2300      	movs	r3, #0
 800ef66:	4423      	add	r3, r4
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	4b3d      	ldr	r3, [pc, #244]	; (800f060 <tcp_receive+0x88c>)
 800ef6c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ef6e:	4b3c      	ldr	r3, [pc, #240]	; (800f060 <tcp_receive+0x88c>)
 800ef70:	881b      	ldrh	r3, [r3, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	4b38      	ldr	r3, [pc, #224]	; (800f058 <tcp_receive+0x884>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	441a      	add	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	6879      	ldr	r1, [r7, #4]
 800ef80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef82:	440b      	add	r3, r1
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d006      	beq.n	800ef96 <tcp_receive+0x7c2>
 800ef88:	4b36      	ldr	r3, [pc, #216]	; (800f064 <tcp_receive+0x890>)
 800ef8a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800ef8e:	4936      	ldr	r1, [pc, #216]	; (800f068 <tcp_receive+0x894>)
 800ef90:	4836      	ldr	r0, [pc, #216]	; (800f06c <tcp_receive+0x898>)
 800ef92:	f004 fe7f 	bl	8013c94 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f000 80e7 	beq.w	800f16e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800efa0:	4b2e      	ldr	r3, [pc, #184]	; (800f05c <tcp_receive+0x888>)
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	899b      	ldrh	r3, [r3, #12]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fb f805 	bl	8009fb8 <lwip_htons>
 800efae:	4603      	mov	r3, r0
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	f003 0301 	and.w	r3, r3, #1
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d010      	beq.n	800efdc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800efba:	e00a      	b.n	800efd2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efc0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800efcc:	68f8      	ldr	r0, [r7, #12]
 800efce:	f7fd fd97 	bl	800cb00 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1f0      	bne.n	800efbc <tcp_receive+0x7e8>
 800efda:	e0c8      	b.n	800f16e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efe0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800efe2:	e052      	b.n	800f08a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800efe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	899b      	ldrh	r3, [r3, #12]
 800efea:	b29b      	uxth	r3, r3
 800efec:	4618      	mov	r0, r3
 800efee:	f7fa ffe3 	bl	8009fb8 <lwip_htons>
 800eff2:	4603      	mov	r3, r0
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	f003 0301 	and.w	r3, r3, #1
 800effa:	2b00      	cmp	r3, #0
 800effc:	d03d      	beq.n	800f07a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800effe:	4b17      	ldr	r3, [pc, #92]	; (800f05c <tcp_receive+0x888>)
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	899b      	ldrh	r3, [r3, #12]
 800f004:	b29b      	uxth	r3, r3
 800f006:	4618      	mov	r0, r3
 800f008:	f7fa ffd6 	bl	8009fb8 <lwip_htons>
 800f00c:	4603      	mov	r3, r0
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f014:	2b00      	cmp	r3, #0
 800f016:	d130      	bne.n	800f07a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f018:	4b10      	ldr	r3, [pc, #64]	; (800f05c <tcp_receive+0x888>)
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	899b      	ldrh	r3, [r3, #12]
 800f01e:	b29c      	uxth	r4, r3
 800f020:	2001      	movs	r0, #1
 800f022:	f7fa ffc9 	bl	8009fb8 <lwip_htons>
 800f026:	4603      	mov	r3, r0
 800f028:	461a      	mov	r2, r3
 800f02a:	4b0c      	ldr	r3, [pc, #48]	; (800f05c <tcp_receive+0x888>)
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	4322      	orrs	r2, r4
 800f030:	b292      	uxth	r2, r2
 800f032:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f034:	4b09      	ldr	r3, [pc, #36]	; (800f05c <tcp_receive+0x888>)
 800f036:	891c      	ldrh	r4, [r3, #8]
 800f038:	4b08      	ldr	r3, [pc, #32]	; (800f05c <tcp_receive+0x888>)
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	899b      	ldrh	r3, [r3, #12]
 800f03e:	b29b      	uxth	r3, r3
 800f040:	4618      	mov	r0, r3
 800f042:	f7fa ffb9 	bl	8009fb8 <lwip_htons>
 800f046:	4603      	mov	r3, r0
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	f003 0303 	and.w	r3, r3, #3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00e      	beq.n	800f070 <tcp_receive+0x89c>
 800f052:	2301      	movs	r3, #1
 800f054:	e00d      	b.n	800f072 <tcp_receive+0x89e>
 800f056:	bf00      	nop
 800f058:	2000ef18 	.word	0x2000ef18
 800f05c:	2000eef8 	.word	0x2000eef8
 800f060:	2000ef22 	.word	0x2000ef22
 800f064:	08015e70 	.word	0x08015e70
 800f068:	08016218 	.word	0x08016218
 800f06c:	08015ebc 	.word	0x08015ebc
 800f070:	2300      	movs	r3, #0
 800f072:	4423      	add	r3, r4
 800f074:	b29a      	uxth	r2, r3
 800f076:	4b98      	ldr	r3, [pc, #608]	; (800f2d8 <tcp_receive+0xb04>)
 800f078:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f07c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f084:	6938      	ldr	r0, [r7, #16]
 800f086:	f7fd fd3b 	bl	800cb00 <tcp_seg_free>
            while (next &&
 800f08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00e      	beq.n	800f0ae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f090:	4b91      	ldr	r3, [pc, #580]	; (800f2d8 <tcp_receive+0xb04>)
 800f092:	881b      	ldrh	r3, [r3, #0]
 800f094:	461a      	mov	r2, r3
 800f096:	4b91      	ldr	r3, [pc, #580]	; (800f2dc <tcp_receive+0xb08>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	441a      	add	r2, r3
 800f09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0a4:	8909      	ldrh	r1, [r1, #8]
 800f0a6:	440b      	add	r3, r1
 800f0a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	da9a      	bge.n	800efe4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d059      	beq.n	800f168 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f0b4:	4b88      	ldr	r3, [pc, #544]	; (800f2d8 <tcp_receive+0xb04>)
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	4b88      	ldr	r3, [pc, #544]	; (800f2dc <tcp_receive+0xb08>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	441a      	add	r2, r3
 800f0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	dd4d      	ble.n	800f168 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	4b81      	ldr	r3, [pc, #516]	; (800f2dc <tcp_receive+0xb08>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	1ad3      	subs	r3, r2, r3
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	4b80      	ldr	r3, [pc, #512]	; (800f2e0 <tcp_receive+0xb0c>)
 800f0e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f0e2:	4b7f      	ldr	r3, [pc, #508]	; (800f2e0 <tcp_receive+0xb0c>)
 800f0e4:	68db      	ldr	r3, [r3, #12]
 800f0e6:	899b      	ldrh	r3, [r3, #12]
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fa ff64 	bl	8009fb8 <lwip_htons>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	f003 0302 	and.w	r3, r3, #2
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d005      	beq.n	800f108 <tcp_receive+0x934>
                inseg.len -= 1;
 800f0fc:	4b78      	ldr	r3, [pc, #480]	; (800f2e0 <tcp_receive+0xb0c>)
 800f0fe:	891b      	ldrh	r3, [r3, #8]
 800f100:	3b01      	subs	r3, #1
 800f102:	b29a      	uxth	r2, r3
 800f104:	4b76      	ldr	r3, [pc, #472]	; (800f2e0 <tcp_receive+0xb0c>)
 800f106:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f108:	4b75      	ldr	r3, [pc, #468]	; (800f2e0 <tcp_receive+0xb0c>)
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	4b74      	ldr	r3, [pc, #464]	; (800f2e0 <tcp_receive+0xb0c>)
 800f10e:	891b      	ldrh	r3, [r3, #8]
 800f110:	4619      	mov	r1, r3
 800f112:	4610      	mov	r0, r2
 800f114:	f7fc f8fa 	bl	800b30c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f118:	4b71      	ldr	r3, [pc, #452]	; (800f2e0 <tcp_receive+0xb0c>)
 800f11a:	891c      	ldrh	r4, [r3, #8]
 800f11c:	4b70      	ldr	r3, [pc, #448]	; (800f2e0 <tcp_receive+0xb0c>)
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	899b      	ldrh	r3, [r3, #12]
 800f122:	b29b      	uxth	r3, r3
 800f124:	4618      	mov	r0, r3
 800f126:	f7fa ff47 	bl	8009fb8 <lwip_htons>
 800f12a:	4603      	mov	r3, r0
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	f003 0303 	and.w	r3, r3, #3
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <tcp_receive+0x966>
 800f136:	2301      	movs	r3, #1
 800f138:	e000      	b.n	800f13c <tcp_receive+0x968>
 800f13a:	2300      	movs	r3, #0
 800f13c:	4423      	add	r3, r4
 800f13e:	b29a      	uxth	r2, r3
 800f140:	4b65      	ldr	r3, [pc, #404]	; (800f2d8 <tcp_receive+0xb04>)
 800f142:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f144:	4b64      	ldr	r3, [pc, #400]	; (800f2d8 <tcp_receive+0xb04>)
 800f146:	881b      	ldrh	r3, [r3, #0]
 800f148:	461a      	mov	r2, r3
 800f14a:	4b64      	ldr	r3, [pc, #400]	; (800f2dc <tcp_receive+0xb08>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	441a      	add	r2, r3
 800f150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	429a      	cmp	r2, r3
 800f158:	d006      	beq.n	800f168 <tcp_receive+0x994>
 800f15a:	4b62      	ldr	r3, [pc, #392]	; (800f2e4 <tcp_receive+0xb10>)
 800f15c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800f160:	4961      	ldr	r1, [pc, #388]	; (800f2e8 <tcp_receive+0xb14>)
 800f162:	4862      	ldr	r0, [pc, #392]	; (800f2ec <tcp_receive+0xb18>)
 800f164:	f004 fd96 	bl	8013c94 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f16c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f16e:	4b5a      	ldr	r3, [pc, #360]	; (800f2d8 <tcp_receive+0xb04>)
 800f170:	881b      	ldrh	r3, [r3, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	4b59      	ldr	r3, [pc, #356]	; (800f2dc <tcp_receive+0xb08>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	441a      	add	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f182:	4b55      	ldr	r3, [pc, #340]	; (800f2d8 <tcp_receive+0xb04>)
 800f184:	881b      	ldrh	r3, [r3, #0]
 800f186:	429a      	cmp	r2, r3
 800f188:	d206      	bcs.n	800f198 <tcp_receive+0x9c4>
 800f18a:	4b56      	ldr	r3, [pc, #344]	; (800f2e4 <tcp_receive+0xb10>)
 800f18c:	f240 6207 	movw	r2, #1543	; 0x607
 800f190:	4957      	ldr	r1, [pc, #348]	; (800f2f0 <tcp_receive+0xb1c>)
 800f192:	4856      	ldr	r0, [pc, #344]	; (800f2ec <tcp_receive+0xb18>)
 800f194:	f004 fd7e 	bl	8013c94 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f19c:	4b4e      	ldr	r3, [pc, #312]	; (800f2d8 <tcp_receive+0xb04>)
 800f19e:	881b      	ldrh	r3, [r3, #0]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f7fc ffcd 	bl	800c148 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f1ae:	4b4c      	ldr	r3, [pc, #304]	; (800f2e0 <tcp_receive+0xb0c>)
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	891b      	ldrh	r3, [r3, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d006      	beq.n	800f1c6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f1b8:	4b49      	ldr	r3, [pc, #292]	; (800f2e0 <tcp_receive+0xb0c>)
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	4a4d      	ldr	r2, [pc, #308]	; (800f2f4 <tcp_receive+0xb20>)
 800f1be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f1c0:	4b47      	ldr	r3, [pc, #284]	; (800f2e0 <tcp_receive+0xb0c>)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f1c6:	4b46      	ldr	r3, [pc, #280]	; (800f2e0 <tcp_receive+0xb0c>)
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	899b      	ldrh	r3, [r3, #12]
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fa fef2 	bl	8009fb8 <lwip_htons>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	f003 0301 	and.w	r3, r3, #1
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f000 80b8 	beq.w	800f352 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f1e2:	4b45      	ldr	r3, [pc, #276]	; (800f2f8 <tcp_receive+0xb24>)
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	f043 0320 	orr.w	r3, r3, #32
 800f1ea:	b2da      	uxtb	r2, r3
 800f1ec:	4b42      	ldr	r3, [pc, #264]	; (800f2f8 <tcp_receive+0xb24>)
 800f1ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f1f0:	e0af      	b.n	800f352 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	4a36      	ldr	r2, [pc, #216]	; (800f2dc <tcp_receive+0xb08>)
 800f202:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	891b      	ldrh	r3, [r3, #8]
 800f208:	461c      	mov	r4, r3
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	899b      	ldrh	r3, [r3, #12]
 800f210:	b29b      	uxth	r3, r3
 800f212:	4618      	mov	r0, r3
 800f214:	f7fa fed0 	bl	8009fb8 <lwip_htons>
 800f218:	4603      	mov	r3, r0
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	f003 0303 	and.w	r3, r3, #3
 800f220:	2b00      	cmp	r3, #0
 800f222:	d001      	beq.n	800f228 <tcp_receive+0xa54>
 800f224:	2301      	movs	r3, #1
 800f226:	e000      	b.n	800f22a <tcp_receive+0xa56>
 800f228:	2300      	movs	r3, #0
 800f22a:	191a      	adds	r2, r3, r4
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f230:	441a      	add	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f23a:	461c      	mov	r4, r3
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	891b      	ldrh	r3, [r3, #8]
 800f240:	461d      	mov	r5, r3
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	899b      	ldrh	r3, [r3, #12]
 800f248:	b29b      	uxth	r3, r3
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fa feb4 	bl	8009fb8 <lwip_htons>
 800f250:	4603      	mov	r3, r0
 800f252:	b2db      	uxtb	r3, r3
 800f254:	f003 0303 	and.w	r3, r3, #3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d001      	beq.n	800f260 <tcp_receive+0xa8c>
 800f25c:	2301      	movs	r3, #1
 800f25e:	e000      	b.n	800f262 <tcp_receive+0xa8e>
 800f260:	2300      	movs	r3, #0
 800f262:	442b      	add	r3, r5
 800f264:	429c      	cmp	r4, r3
 800f266:	d206      	bcs.n	800f276 <tcp_receive+0xaa2>
 800f268:	4b1e      	ldr	r3, [pc, #120]	; (800f2e4 <tcp_receive+0xb10>)
 800f26a:	f240 622c 	movw	r2, #1580	; 0x62c
 800f26e:	4923      	ldr	r1, [pc, #140]	; (800f2fc <tcp_receive+0xb28>)
 800f270:	481e      	ldr	r0, [pc, #120]	; (800f2ec <tcp_receive+0xb18>)
 800f272:	f004 fd0f 	bl	8013c94 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	891b      	ldrh	r3, [r3, #8]
 800f27a:	461c      	mov	r4, r3
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	899b      	ldrh	r3, [r3, #12]
 800f282:	b29b      	uxth	r3, r3
 800f284:	4618      	mov	r0, r3
 800f286:	f7fa fe97 	bl	8009fb8 <lwip_htons>
 800f28a:	4603      	mov	r3, r0
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	f003 0303 	and.w	r3, r3, #3
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <tcp_receive+0xac6>
 800f296:	2301      	movs	r3, #1
 800f298:	e000      	b.n	800f29c <tcp_receive+0xac8>
 800f29a:	2300      	movs	r3, #0
 800f29c:	1919      	adds	r1, r3, r4
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2a2:	b28b      	uxth	r3, r1
 800f2a4:	1ad3      	subs	r3, r2, r3
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7fc ff4b 	bl	800c148 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	891b      	ldrh	r3, [r3, #8]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d028      	beq.n	800f30e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f2bc:	4b0d      	ldr	r3, [pc, #52]	; (800f2f4 <tcp_receive+0xb20>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d01d      	beq.n	800f300 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f2c4:	4b0b      	ldr	r3, [pc, #44]	; (800f2f4 <tcp_receive+0xb20>)
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	4610      	mov	r0, r2
 800f2d0:	f7fc fa70 	bl	800b7b4 <pbuf_cat>
 800f2d4:	e018      	b.n	800f308 <tcp_receive+0xb34>
 800f2d6:	bf00      	nop
 800f2d8:	2000ef22 	.word	0x2000ef22
 800f2dc:	2000ef18 	.word	0x2000ef18
 800f2e0:	2000eef8 	.word	0x2000eef8
 800f2e4:	08015e70 	.word	0x08015e70
 800f2e8:	08016250 	.word	0x08016250
 800f2ec:	08015ebc 	.word	0x08015ebc
 800f2f0:	0801628c 	.word	0x0801628c
 800f2f4:	2000ef28 	.word	0x2000ef28
 800f2f8:	2000ef25 	.word	0x2000ef25
 800f2fc:	080162ac 	.word	0x080162ac
            } else {
              recv_data = cseg->p;
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	4a70      	ldr	r2, [pc, #448]	; (800f4c8 <tcp_receive+0xcf4>)
 800f306:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	2200      	movs	r2, #0
 800f30c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	899b      	ldrh	r3, [r3, #12]
 800f314:	b29b      	uxth	r3, r3
 800f316:	4618      	mov	r0, r3
 800f318:	f7fa fe4e 	bl	8009fb8 <lwip_htons>
 800f31c:	4603      	mov	r3, r0
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00d      	beq.n	800f344 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f328:	4b68      	ldr	r3, [pc, #416]	; (800f4cc <tcp_receive+0xcf8>)
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	f043 0320 	orr.w	r3, r3, #32
 800f330:	b2da      	uxtb	r2, r3
 800f332:	4b66      	ldr	r3, [pc, #408]	; (800f4cc <tcp_receive+0xcf8>)
 800f334:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	7d1b      	ldrb	r3, [r3, #20]
 800f33a:	2b04      	cmp	r3, #4
 800f33c:	d102      	bne.n	800f344 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2207      	movs	r2, #7
 800f342:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f34c:	68b8      	ldr	r0, [r7, #8]
 800f34e:	f7fd fbd7 	bl	800cb00 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f356:	2b00      	cmp	r3, #0
 800f358:	d008      	beq.n	800f36c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f366:	429a      	cmp	r2, r3
 800f368:	f43f af43 	beq.w	800f1f2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	8b5b      	ldrh	r3, [r3, #26]
 800f370:	f003 0301 	and.w	r3, r3, #1
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00e      	beq.n	800f396 <tcp_receive+0xbc2>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	8b5b      	ldrh	r3, [r3, #26]
 800f37c:	f023 0301 	bic.w	r3, r3, #1
 800f380:	b29a      	uxth	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	835a      	strh	r2, [r3, #26]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	8b5b      	ldrh	r3, [r3, #26]
 800f38a:	f043 0302 	orr.w	r3, r3, #2
 800f38e:	b29a      	uxth	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f394:	e188      	b.n	800f6a8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	8b5b      	ldrh	r3, [r3, #26]
 800f39a:	f043 0301 	orr.w	r3, r3, #1
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f3a4:	e180      	b.n	800f6a8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d106      	bne.n	800f3bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f3ae:	4848      	ldr	r0, [pc, #288]	; (800f4d0 <tcp_receive+0xcfc>)
 800f3b0:	f7fd fbbe 	bl	800cb30 <tcp_seg_copy>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	675a      	str	r2, [r3, #116]	; 0x74
 800f3ba:	e16d      	b.n	800f698 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3c6:	e157      	b.n	800f678 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ca:	68db      	ldr	r3, [r3, #12]
 800f3cc:	685a      	ldr	r2, [r3, #4]
 800f3ce:	4b41      	ldr	r3, [pc, #260]	; (800f4d4 <tcp_receive+0xd00>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d11d      	bne.n	800f412 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f3d6:	4b3e      	ldr	r3, [pc, #248]	; (800f4d0 <tcp_receive+0xcfc>)
 800f3d8:	891a      	ldrh	r2, [r3, #8]
 800f3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3dc:	891b      	ldrh	r3, [r3, #8]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	f240 814f 	bls.w	800f682 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f3e4:	483a      	ldr	r0, [pc, #232]	; (800f4d0 <tcp_receive+0xcfc>)
 800f3e6:	f7fd fba3 	bl	800cb30 <tcp_seg_copy>
 800f3ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 8149 	beq.w	800f686 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d003      	beq.n	800f402 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fc:	697a      	ldr	r2, [r7, #20]
 800f3fe:	601a      	str	r2, [r3, #0]
 800f400:	e002      	b.n	800f408 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	697a      	ldr	r2, [r7, #20]
 800f406:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f40a:	6978      	ldr	r0, [r7, #20]
 800f40c:	f7ff f8de 	bl	800e5cc <tcp_oos_insert_segment>
                }
                break;
 800f410:	e139      	b.n	800f686 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f414:	2b00      	cmp	r3, #0
 800f416:	d117      	bne.n	800f448 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f418:	4b2e      	ldr	r3, [pc, #184]	; (800f4d4 <tcp_receive+0xd00>)
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	da57      	bge.n	800f4d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f428:	4829      	ldr	r0, [pc, #164]	; (800f4d0 <tcp_receive+0xcfc>)
 800f42a:	f7fd fb81 	bl	800cb30 <tcp_seg_copy>
 800f42e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f000 8129 	beq.w	800f68a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	69ba      	ldr	r2, [r7, #24]
 800f43c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f43e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f440:	69b8      	ldr	r0, [r7, #24]
 800f442:	f7ff f8c3 	bl	800e5cc <tcp_oos_insert_segment>
                  }
                  break;
 800f446:	e120      	b.n	800f68a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f448:	4b22      	ldr	r3, [pc, #136]	; (800f4d4 <tcp_receive+0xd00>)
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	1ad3      	subs	r3, r2, r3
 800f454:	3b01      	subs	r3, #1
 800f456:	2b00      	cmp	r3, #0
 800f458:	db3e      	blt.n	800f4d8 <tcp_receive+0xd04>
 800f45a:	4b1e      	ldr	r3, [pc, #120]	; (800f4d4 <tcp_receive+0xd00>)
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	3301      	adds	r3, #1
 800f468:	2b00      	cmp	r3, #0
 800f46a:	dc35      	bgt.n	800f4d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f46c:	4818      	ldr	r0, [pc, #96]	; (800f4d0 <tcp_receive+0xcfc>)
 800f46e:	f7fd fb5f 	bl	800cb30 <tcp_seg_copy>
 800f472:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 8109 	beq.w	800f68e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f484:	8912      	ldrh	r2, [r2, #8]
 800f486:	441a      	add	r2, r3
 800f488:	4b12      	ldr	r3, [pc, #72]	; (800f4d4 <tcp_receive+0xd00>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	dd12      	ble.n	800f4b8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f492:	4b10      	ldr	r3, [pc, #64]	; (800f4d4 <tcp_receive+0xd00>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	b29a      	uxth	r2, r3
 800f498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4aa:	685a      	ldr	r2, [r3, #4]
 800f4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ae:	891b      	ldrh	r3, [r3, #8]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	f7fb ff2a 	bl	800b30c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ba:	69fa      	ldr	r2, [r7, #28]
 800f4bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f4be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4c0:	69f8      	ldr	r0, [r7, #28]
 800f4c2:	f7ff f883 	bl	800e5cc <tcp_oos_insert_segment>
                  }
                  break;
 800f4c6:	e0e2      	b.n	800f68e <tcp_receive+0xeba>
 800f4c8:	2000ef28 	.word	0x2000ef28
 800f4cc:	2000ef25 	.word	0x2000ef25
 800f4d0:	2000eef8 	.word	0x2000eef8
 800f4d4:	2000ef18 	.word	0x2000ef18
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f040 80c6 	bne.w	800f672 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f4e6:	4b80      	ldr	r3, [pc, #512]	; (800f6e8 <tcp_receive+0xf14>)
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f340 80bd 	ble.w	800f672 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	899b      	ldrh	r3, [r3, #12]
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	4618      	mov	r0, r3
 800f502:	f7fa fd59 	bl	8009fb8 <lwip_htons>
 800f506:	4603      	mov	r3, r0
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	f003 0301 	and.w	r3, r3, #1
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f040 80bf 	bne.w	800f692 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f514:	4875      	ldr	r0, [pc, #468]	; (800f6ec <tcp_receive+0xf18>)
 800f516:	f7fd fb0b 	bl	800cb30 <tcp_seg_copy>
 800f51a:	4602      	mov	r2, r0
 800f51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	f000 80b6 	beq.w	800f696 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f532:	8912      	ldrh	r2, [r2, #8]
 800f534:	441a      	add	r2, r3
 800f536:	4b6c      	ldr	r3, [pc, #432]	; (800f6e8 <tcp_receive+0xf14>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	dd12      	ble.n	800f566 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f540:	4b69      	ldr	r3, [pc, #420]	; (800f6e8 <tcp_receive+0xf14>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	b29a      	uxth	r2, r3
 800f546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	b29a      	uxth	r2, r3
 800f552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f554:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55c:	891b      	ldrh	r3, [r3, #8]
 800f55e:	4619      	mov	r1, r3
 800f560:	4610      	mov	r0, r2
 800f562:	f7fb fed3 	bl	800b30c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f566:	4b62      	ldr	r3, [pc, #392]	; (800f6f0 <tcp_receive+0xf1c>)
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	461a      	mov	r2, r3
 800f56c:	4b5e      	ldr	r3, [pc, #376]	; (800f6e8 <tcp_receive+0xf14>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	441a      	add	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f576:	6879      	ldr	r1, [r7, #4]
 800f578:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f57a:	440b      	add	r3, r1
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f340 8089 	ble.w	800f696 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	899b      	ldrh	r3, [r3, #12]
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fa fd12 	bl	8009fb8 <lwip_htons>
 800f594:	4603      	mov	r3, r0
 800f596:	b2db      	uxtb	r3, r3
 800f598:	f003 0301 	and.w	r3, r3, #1
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d022      	beq.n	800f5e6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	899b      	ldrh	r3, [r3, #12]
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	b21b      	sxth	r3, r3
 800f5ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f5b0:	b21c      	sxth	r4, r3
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	68db      	ldr	r3, [r3, #12]
 800f5b8:	899b      	ldrh	r3, [r3, #12]
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fa fcfb 	bl	8009fb8 <lwip_htons>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fa fcf2 	bl	8009fb8 <lwip_htons>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	b21b      	sxth	r3, r3
 800f5d8:	4323      	orrs	r3, r4
 800f5da:	b21a      	sxth	r2, r3
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	b292      	uxth	r2, r2
 800f5e4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5f0:	4413      	add	r3, r2
 800f5f2:	b299      	uxth	r1, r3
 800f5f4:	4b3c      	ldr	r3, [pc, #240]	; (800f6e8 <tcp_receive+0xf14>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	1a8a      	subs	r2, r1, r2
 800f600:	b292      	uxth	r2, r2
 800f602:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	685a      	ldr	r2, [r3, #4]
 800f60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	891b      	ldrh	r3, [r3, #8]
 800f610:	4619      	mov	r1, r3
 800f612:	4610      	mov	r0, r2
 800f614:	f7fb fe7a 	bl	800b30c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	891c      	ldrh	r4, [r3, #8]
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	899b      	ldrh	r3, [r3, #12]
 800f626:	b29b      	uxth	r3, r3
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fa fcc5 	bl	8009fb8 <lwip_htons>
 800f62e:	4603      	mov	r3, r0
 800f630:	b2db      	uxtb	r3, r3
 800f632:	f003 0303 	and.w	r3, r3, #3
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <tcp_receive+0xe6a>
 800f63a:	2301      	movs	r3, #1
 800f63c:	e000      	b.n	800f640 <tcp_receive+0xe6c>
 800f63e:	2300      	movs	r3, #0
 800f640:	4423      	add	r3, r4
 800f642:	b29a      	uxth	r2, r3
 800f644:	4b2a      	ldr	r3, [pc, #168]	; (800f6f0 <tcp_receive+0xf1c>)
 800f646:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f648:	4b29      	ldr	r3, [pc, #164]	; (800f6f0 <tcp_receive+0xf1c>)
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	461a      	mov	r2, r3
 800f64e:	4b26      	ldr	r3, [pc, #152]	; (800f6e8 <tcp_receive+0xf14>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	441a      	add	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f658:	6879      	ldr	r1, [r7, #4]
 800f65a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f65c:	440b      	add	r3, r1
 800f65e:	429a      	cmp	r2, r3
 800f660:	d019      	beq.n	800f696 <tcp_receive+0xec2>
 800f662:	4b24      	ldr	r3, [pc, #144]	; (800f6f4 <tcp_receive+0xf20>)
 800f664:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f668:	4923      	ldr	r1, [pc, #140]	; (800f6f8 <tcp_receive+0xf24>)
 800f66a:	4824      	ldr	r0, [pc, #144]	; (800f6fc <tcp_receive+0xf28>)
 800f66c:	f004 fb12 	bl	8013c94 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f670:	e011      	b.n	800f696 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	63bb      	str	r3, [r7, #56]	; 0x38
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f47f aea4 	bne.w	800f3c8 <tcp_receive+0xbf4>
 800f680:	e00a      	b.n	800f698 <tcp_receive+0xec4>
                break;
 800f682:	bf00      	nop
 800f684:	e008      	b.n	800f698 <tcp_receive+0xec4>
                break;
 800f686:	bf00      	nop
 800f688:	e006      	b.n	800f698 <tcp_receive+0xec4>
                  break;
 800f68a:	bf00      	nop
 800f68c:	e004      	b.n	800f698 <tcp_receive+0xec4>
                  break;
 800f68e:	bf00      	nop
 800f690:	e002      	b.n	800f698 <tcp_receive+0xec4>
                  break;
 800f692:	bf00      	nop
 800f694:	e000      	b.n	800f698 <tcp_receive+0xec4>
                break;
 800f696:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f001 fa43 	bl	8010b24 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f69e:	e003      	b.n	800f6a8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f001 fa3f 	bl	8010b24 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f6a6:	e01a      	b.n	800f6de <tcp_receive+0xf0a>
 800f6a8:	e019      	b.n	800f6de <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f6aa:	4b0f      	ldr	r3, [pc, #60]	; (800f6e8 <tcp_receive+0xf14>)
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b2:	1ad3      	subs	r3, r2, r3
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	db0a      	blt.n	800f6ce <tcp_receive+0xefa>
 800f6b8:	4b0b      	ldr	r3, [pc, #44]	; (800f6e8 <tcp_receive+0xf14>)
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c0:	6879      	ldr	r1, [r7, #4]
 800f6c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6c4:	440b      	add	r3, r1
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	dd07      	ble.n	800f6de <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	8b5b      	ldrh	r3, [r3, #26]
 800f6d2:	f043 0302 	orr.w	r3, r3, #2
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f6dc:	e7ff      	b.n	800f6de <tcp_receive+0xf0a>
 800f6de:	bf00      	nop
 800f6e0:	3750      	adds	r7, #80	; 0x50
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2000ef18 	.word	0x2000ef18
 800f6ec:	2000eef8 	.word	0x2000eef8
 800f6f0:	2000ef22 	.word	0x2000ef22
 800f6f4:	08015e70 	.word	0x08015e70
 800f6f8:	08016218 	.word	0x08016218
 800f6fc:	08015ebc 	.word	0x08015ebc

0800f700 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f700:	b480      	push	{r7}
 800f702:	b083      	sub	sp, #12
 800f704:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f706:	4b15      	ldr	r3, [pc, #84]	; (800f75c <tcp_get_next_optbyte+0x5c>)
 800f708:	881b      	ldrh	r3, [r3, #0]
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	b291      	uxth	r1, r2
 800f70e:	4a13      	ldr	r2, [pc, #76]	; (800f75c <tcp_get_next_optbyte+0x5c>)
 800f710:	8011      	strh	r1, [r2, #0]
 800f712:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f714:	4b12      	ldr	r3, [pc, #72]	; (800f760 <tcp_get_next_optbyte+0x60>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d004      	beq.n	800f726 <tcp_get_next_optbyte+0x26>
 800f71c:	4b11      	ldr	r3, [pc, #68]	; (800f764 <tcp_get_next_optbyte+0x64>)
 800f71e:	881b      	ldrh	r3, [r3, #0]
 800f720:	88fa      	ldrh	r2, [r7, #6]
 800f722:	429a      	cmp	r2, r3
 800f724:	d208      	bcs.n	800f738 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f726:	4b10      	ldr	r3, [pc, #64]	; (800f768 <tcp_get_next_optbyte+0x68>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3314      	adds	r3, #20
 800f72c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f72e:	88fb      	ldrh	r3, [r7, #6]
 800f730:	683a      	ldr	r2, [r7, #0]
 800f732:	4413      	add	r3, r2
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	e00b      	b.n	800f750 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f738:	88fb      	ldrh	r3, [r7, #6]
 800f73a:	b2da      	uxtb	r2, r3
 800f73c:	4b09      	ldr	r3, [pc, #36]	; (800f764 <tcp_get_next_optbyte+0x64>)
 800f73e:	881b      	ldrh	r3, [r3, #0]
 800f740:	b2db      	uxtb	r3, r3
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f746:	4b06      	ldr	r3, [pc, #24]	; (800f760 <tcp_get_next_optbyte+0x60>)
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	797b      	ldrb	r3, [r7, #5]
 800f74c:	4413      	add	r3, r2
 800f74e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f750:	4618      	mov	r0, r3
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr
 800f75c:	2000ef14 	.word	0x2000ef14
 800f760:	2000ef10 	.word	0x2000ef10
 800f764:	2000ef0e 	.word	0x2000ef0e
 800f768:	2000ef08 	.word	0x2000ef08

0800f76c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d106      	bne.n	800f788 <tcp_parseopt+0x1c>
 800f77a:	4b31      	ldr	r3, [pc, #196]	; (800f840 <tcp_parseopt+0xd4>)
 800f77c:	f240 727d 	movw	r2, #1917	; 0x77d
 800f780:	4930      	ldr	r1, [pc, #192]	; (800f844 <tcp_parseopt+0xd8>)
 800f782:	4831      	ldr	r0, [pc, #196]	; (800f848 <tcp_parseopt+0xdc>)
 800f784:	f004 fa86 	bl	8013c94 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f788:	4b30      	ldr	r3, [pc, #192]	; (800f84c <tcp_parseopt+0xe0>)
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d053      	beq.n	800f838 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f790:	4b2f      	ldr	r3, [pc, #188]	; (800f850 <tcp_parseopt+0xe4>)
 800f792:	2200      	movs	r2, #0
 800f794:	801a      	strh	r2, [r3, #0]
 800f796:	e043      	b.n	800f820 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800f798:	f7ff ffb2 	bl	800f700 <tcp_get_next_optbyte>
 800f79c:	4603      	mov	r3, r0
 800f79e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f7a0:	7bfb      	ldrb	r3, [r7, #15]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d03c      	beq.n	800f820 <tcp_parseopt+0xb4>
 800f7a6:	2b02      	cmp	r3, #2
 800f7a8:	d002      	beq.n	800f7b0 <tcp_parseopt+0x44>
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d03f      	beq.n	800f82e <tcp_parseopt+0xc2>
 800f7ae:	e026      	b.n	800f7fe <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f7b0:	f7ff ffa6 	bl	800f700 <tcp_get_next_optbyte>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b04      	cmp	r3, #4
 800f7b8:	d13b      	bne.n	800f832 <tcp_parseopt+0xc6>
 800f7ba:	4b25      	ldr	r3, [pc, #148]	; (800f850 <tcp_parseopt+0xe4>)
 800f7bc:	881b      	ldrh	r3, [r3, #0]
 800f7be:	3302      	adds	r3, #2
 800f7c0:	4a22      	ldr	r2, [pc, #136]	; (800f84c <tcp_parseopt+0xe0>)
 800f7c2:	8812      	ldrh	r2, [r2, #0]
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	dc34      	bgt.n	800f832 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f7c8:	f7ff ff9a 	bl	800f700 <tcp_get_next_optbyte>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	021b      	lsls	r3, r3, #8
 800f7d2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f7d4:	f7ff ff94 	bl	800f700 <tcp_get_next_optbyte>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	89bb      	ldrh	r3, [r7, #12]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f7e2:	89bb      	ldrh	r3, [r7, #12]
 800f7e4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f7e8:	d804      	bhi.n	800f7f4 <tcp_parseopt+0x88>
 800f7ea:	89bb      	ldrh	r3, [r7, #12]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <tcp_parseopt+0x88>
 800f7f0:	89ba      	ldrh	r2, [r7, #12]
 800f7f2:	e001      	b.n	800f7f8 <tcp_parseopt+0x8c>
 800f7f4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f7fc:	e010      	b.n	800f820 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f7fe:	f7ff ff7f 	bl	800f700 <tcp_get_next_optbyte>
 800f802:	4603      	mov	r3, r0
 800f804:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f806:	7afb      	ldrb	r3, [r7, #11]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d914      	bls.n	800f836 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f80c:	7afb      	ldrb	r3, [r7, #11]
 800f80e:	b29a      	uxth	r2, r3
 800f810:	4b0f      	ldr	r3, [pc, #60]	; (800f850 <tcp_parseopt+0xe4>)
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	4413      	add	r3, r2
 800f816:	b29b      	uxth	r3, r3
 800f818:	3b02      	subs	r3, #2
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	4b0c      	ldr	r3, [pc, #48]	; (800f850 <tcp_parseopt+0xe4>)
 800f81e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f820:	4b0b      	ldr	r3, [pc, #44]	; (800f850 <tcp_parseopt+0xe4>)
 800f822:	881a      	ldrh	r2, [r3, #0]
 800f824:	4b09      	ldr	r3, [pc, #36]	; (800f84c <tcp_parseopt+0xe0>)
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d3b5      	bcc.n	800f798 <tcp_parseopt+0x2c>
 800f82c:	e004      	b.n	800f838 <tcp_parseopt+0xcc>
          return;
 800f82e:	bf00      	nop
 800f830:	e002      	b.n	800f838 <tcp_parseopt+0xcc>
            return;
 800f832:	bf00      	nop
 800f834:	e000      	b.n	800f838 <tcp_parseopt+0xcc>
            return;
 800f836:	bf00      	nop
      }
    }
  }
}
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	08015e70 	.word	0x08015e70
 800f844:	080162d4 	.word	0x080162d4
 800f848:	08015ebc 	.word	0x08015ebc
 800f84c:	2000ef0c 	.word	0x2000ef0c
 800f850:	2000ef14 	.word	0x2000ef14

0800f854 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f854:	b480      	push	{r7}
 800f856:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f858:	4b05      	ldr	r3, [pc, #20]	; (800f870 <tcp_trigger_input_pcb_close+0x1c>)
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	f043 0310 	orr.w	r3, r3, #16
 800f860:	b2da      	uxtb	r2, r3
 800f862:	4b03      	ldr	r3, [pc, #12]	; (800f870 <tcp_trigger_input_pcb_close+0x1c>)
 800f864:	701a      	strb	r2, [r3, #0]
}
 800f866:	bf00      	nop
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr
 800f870:	2000ef25 	.word	0x2000ef25

0800f874 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00a      	beq.n	800f89c <tcp_route+0x28>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	7a1b      	ldrb	r3, [r3, #8]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d006      	beq.n	800f89c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	7a1b      	ldrb	r3, [r3, #8]
 800f892:	4618      	mov	r0, r3
 800f894:	f7fb fb36 	bl	800af04 <netif_get_by_index>
 800f898:	4603      	mov	r3, r0
 800f89a:	e003      	b.n	800f8a4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f002 febd 	bl	801261c <ip4_route>
 800f8a2:	4603      	mov	r3, r0
  }
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f8ac:	b590      	push	{r4, r7, lr}
 800f8ae:	b087      	sub	sp, #28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	603b      	str	r3, [r7, #0]
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d105      	bne.n	800f8ce <tcp_create_segment+0x22>
 800f8c2:	4b44      	ldr	r3, [pc, #272]	; (800f9d4 <tcp_create_segment+0x128>)
 800f8c4:	22a3      	movs	r2, #163	; 0xa3
 800f8c6:	4944      	ldr	r1, [pc, #272]	; (800f9d8 <tcp_create_segment+0x12c>)
 800f8c8:	4844      	ldr	r0, [pc, #272]	; (800f9dc <tcp_create_segment+0x130>)
 800f8ca:	f004 f9e3 	bl	8013c94 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d105      	bne.n	800f8e0 <tcp_create_segment+0x34>
 800f8d4:	4b3f      	ldr	r3, [pc, #252]	; (800f9d4 <tcp_create_segment+0x128>)
 800f8d6:	22a4      	movs	r2, #164	; 0xa4
 800f8d8:	4941      	ldr	r1, [pc, #260]	; (800f9e0 <tcp_create_segment+0x134>)
 800f8da:	4840      	ldr	r0, [pc, #256]	; (800f9dc <tcp_create_segment+0x130>)
 800f8dc:	f004 f9da 	bl	8013c94 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	f003 0304 	and.w	r3, r3, #4
 800f8ec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f8ee:	2003      	movs	r0, #3
 800f8f0:	f7fb f818 	bl	800a924 <memp_malloc>
 800f8f4:	6138      	str	r0, [r7, #16]
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d104      	bne.n	800f906 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f8fc:	68b8      	ldr	r0, [r7, #8]
 800f8fe:	f7fb fe8b 	bl	800b618 <pbuf_free>
    return NULL;
 800f902:	2300      	movs	r3, #0
 800f904:	e061      	b.n	800f9ca <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f90c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	2200      	movs	r2, #0
 800f912:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	891a      	ldrh	r2, [r3, #8]
 800f91e:	7dfb      	ldrb	r3, [r7, #23]
 800f920:	b29b      	uxth	r3, r3
 800f922:	429a      	cmp	r2, r3
 800f924:	d205      	bcs.n	800f932 <tcp_create_segment+0x86>
 800f926:	4b2b      	ldr	r3, [pc, #172]	; (800f9d4 <tcp_create_segment+0x128>)
 800f928:	22b0      	movs	r2, #176	; 0xb0
 800f92a:	492e      	ldr	r1, [pc, #184]	; (800f9e4 <tcp_create_segment+0x138>)
 800f92c:	482b      	ldr	r0, [pc, #172]	; (800f9dc <tcp_create_segment+0x130>)
 800f92e:	f004 f9b1 	bl	8013c94 <iprintf>
  seg->len = p->tot_len - optlen;
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	891a      	ldrh	r2, [r3, #8]
 800f936:	7dfb      	ldrb	r3, [r7, #23]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f942:	2114      	movs	r1, #20
 800f944:	68b8      	ldr	r0, [r7, #8]
 800f946:	f7fb fdd1 	bl	800b4ec <pbuf_add_header>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d004      	beq.n	800f95a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f950:	6938      	ldr	r0, [r7, #16]
 800f952:	f7fd f8d5 	bl	800cb00 <tcp_seg_free>
    return NULL;
 800f956:	2300      	movs	r3, #0
 800f958:	e037      	b.n	800f9ca <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	685a      	ldr	r2, [r3, #4]
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	8ada      	ldrh	r2, [r3, #22]
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	68dc      	ldr	r4, [r3, #12]
 800f96c:	4610      	mov	r0, r2
 800f96e:	f7fa fb23 	bl	8009fb8 <lwip_htons>
 800f972:	4603      	mov	r3, r0
 800f974:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	8b1a      	ldrh	r2, [r3, #24]
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	68dc      	ldr	r4, [r3, #12]
 800f97e:	4610      	mov	r0, r2
 800f980:	f7fa fb1a 	bl	8009fb8 <lwip_htons>
 800f984:	4603      	mov	r3, r0
 800f986:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	68dc      	ldr	r4, [r3, #12]
 800f98c:	6838      	ldr	r0, [r7, #0]
 800f98e:	f7fa fb28 	bl	8009fe2 <lwip_htonl>
 800f992:	4603      	mov	r3, r0
 800f994:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f996:	7dfb      	ldrb	r3, [r7, #23]
 800f998:	089b      	lsrs	r3, r3, #2
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	3305      	adds	r3, #5
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	031b      	lsls	r3, r3, #12
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	79fb      	ldrb	r3, [r7, #7]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	68dc      	ldr	r4, [r3, #12]
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	f7fa fb00 	bl	8009fb8 <lwip_htons>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	749a      	strb	r2, [r3, #18]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	74da      	strb	r2, [r3, #19]
  return seg;
 800f9c8:	693b      	ldr	r3, [r7, #16]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	371c      	adds	r7, #28
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd90      	pop	{r4, r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	080162f0 	.word	0x080162f0
 800f9d8:	08016324 	.word	0x08016324
 800f9dc:	08016344 	.word	0x08016344
 800f9e0:	0801636c 	.word	0x0801636c
 800f9e4:	08016390 	.word	0x08016390

0800f9e8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b08b      	sub	sp, #44	; 0x2c
 800f9ec:	af02      	add	r7, sp, #8
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	61fb      	str	r3, [r7, #28]
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d106      	bne.n	800fa14 <tcp_split_unsent_seg+0x2c>
 800fa06:	4b95      	ldr	r3, [pc, #596]	; (800fc5c <tcp_split_unsent_seg+0x274>)
 800fa08:	f240 324b 	movw	r2, #843	; 0x34b
 800fa0c:	4994      	ldr	r1, [pc, #592]	; (800fc60 <tcp_split_unsent_seg+0x278>)
 800fa0e:	4895      	ldr	r0, [pc, #596]	; (800fc64 <tcp_split_unsent_seg+0x27c>)
 800fa10:	f004 f940 	bl	8013c94 <iprintf>

  useg = pcb->unsent;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa18:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d102      	bne.n	800fa26 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fa20:	f04f 33ff 	mov.w	r3, #4294967295
 800fa24:	e116      	b.n	800fc54 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fa26:	887b      	ldrh	r3, [r7, #2]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d109      	bne.n	800fa40 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fa2c:	4b8b      	ldr	r3, [pc, #556]	; (800fc5c <tcp_split_unsent_seg+0x274>)
 800fa2e:	f240 3253 	movw	r2, #851	; 0x353
 800fa32:	498d      	ldr	r1, [pc, #564]	; (800fc68 <tcp_split_unsent_seg+0x280>)
 800fa34:	488b      	ldr	r0, [pc, #556]	; (800fc64 <tcp_split_unsent_seg+0x27c>)
 800fa36:	f004 f92d 	bl	8013c94 <iprintf>
    return ERR_VAL;
 800fa3a:	f06f 0305 	mvn.w	r3, #5
 800fa3e:	e109      	b.n	800fc54 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	891b      	ldrh	r3, [r3, #8]
 800fa44:	887a      	ldrh	r2, [r7, #2]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d301      	bcc.n	800fa4e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	e102      	b.n	800fc54 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa52:	887a      	ldrh	r2, [r7, #2]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d906      	bls.n	800fa66 <tcp_split_unsent_seg+0x7e>
 800fa58:	4b80      	ldr	r3, [pc, #512]	; (800fc5c <tcp_split_unsent_seg+0x274>)
 800fa5a:	f240 325b 	movw	r2, #859	; 0x35b
 800fa5e:	4983      	ldr	r1, [pc, #524]	; (800fc6c <tcp_split_unsent_seg+0x284>)
 800fa60:	4880      	ldr	r0, [pc, #512]	; (800fc64 <tcp_split_unsent_seg+0x27c>)
 800fa62:	f004 f917 	bl	8013c94 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	891b      	ldrh	r3, [r3, #8]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <tcp_split_unsent_seg+0x94>
 800fa6e:	4b7b      	ldr	r3, [pc, #492]	; (800fc5c <tcp_split_unsent_seg+0x274>)
 800fa70:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fa74:	497e      	ldr	r1, [pc, #504]	; (800fc70 <tcp_split_unsent_seg+0x288>)
 800fa76:	487b      	ldr	r0, [pc, #492]	; (800fc64 <tcp_split_unsent_seg+0x27c>)
 800fa78:	f004 f90c 	bl	8013c94 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	7a9b      	ldrb	r3, [r3, #10]
 800fa80:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fa82:	7bfb      	ldrb	r3, [r7, #15]
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	f003 0304 	and.w	r3, r3, #4
 800fa8c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	891a      	ldrh	r2, [r3, #8]
 800fa92:	887b      	ldrh	r3, [r7, #2]
 800fa94:	1ad3      	subs	r3, r2, r3
 800fa96:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fa98:	7bbb      	ldrb	r3, [r7, #14]
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	89bb      	ldrh	r3, [r7, #12]
 800fa9e:	4413      	add	r3, r2
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800faa6:	4619      	mov	r1, r3
 800faa8:	2036      	movs	r0, #54	; 0x36
 800faaa:	f7fb fad5 	bl	800b058 <pbuf_alloc>
 800faae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f000 80b7 	beq.w	800fc26 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	891a      	ldrh	r2, [r3, #8]
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	891b      	ldrh	r3, [r3, #8]
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	887b      	ldrh	r3, [r7, #2]
 800fac8:	4413      	add	r3, r2
 800faca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	6858      	ldr	r0, [r3, #4]
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	685a      	ldr	r2, [r3, #4]
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
 800fad6:	18d1      	adds	r1, r2, r3
 800fad8:	897b      	ldrh	r3, [r7, #10]
 800fada:	89ba      	ldrh	r2, [r7, #12]
 800fadc:	f7fb ff92 	bl	800ba04 <pbuf_copy_partial>
 800fae0:	4603      	mov	r3, r0
 800fae2:	461a      	mov	r2, r3
 800fae4:	89bb      	ldrh	r3, [r7, #12]
 800fae6:	4293      	cmp	r3, r2
 800fae8:	f040 809f 	bne.w	800fc2a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	899b      	ldrh	r3, [r3, #12]
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fa fa5f 	bl	8009fb8 <lwip_htons>
 800fafa:	4603      	mov	r3, r0
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb02:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fb04:	2300      	movs	r3, #0
 800fb06:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fb08:	7efb      	ldrb	r3, [r7, #27]
 800fb0a:	f003 0308 	and.w	r3, r3, #8
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d007      	beq.n	800fb22 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fb12:	7efb      	ldrb	r3, [r7, #27]
 800fb14:	f023 0308 	bic.w	r3, r3, #8
 800fb18:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fb1a:	7ebb      	ldrb	r3, [r7, #26]
 800fb1c:	f043 0308 	orr.w	r3, r3, #8
 800fb20:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fb22:	7efb      	ldrb	r3, [r7, #27]
 800fb24:	f003 0301 	and.w	r3, r3, #1
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d007      	beq.n	800fb3c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fb2c:	7efb      	ldrb	r3, [r7, #27]
 800fb2e:	f023 0301 	bic.w	r3, r3, #1
 800fb32:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fb34:	7ebb      	ldrb	r3, [r7, #26]
 800fb36:	f043 0301 	orr.w	r3, r3, #1
 800fb3a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fa fa4d 	bl	8009fe2 <lwip_htonl>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	887b      	ldrh	r3, [r7, #2]
 800fb4c:	18d1      	adds	r1, r2, r3
 800fb4e:	7eba      	ldrb	r2, [r7, #26]
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	460b      	mov	r3, r1
 800fb56:	6939      	ldr	r1, [r7, #16]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff fea7 	bl	800f8ac <tcp_create_segment>
 800fb5e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d063      	beq.n	800fc2e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fb fde2 	bl	800b734 <pbuf_clen>
 800fb70:	4603      	mov	r3, r0
 800fb72:	461a      	mov	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb7a:	1a9b      	subs	r3, r3, r2
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	6858      	ldr	r0, [r3, #4]
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	891a      	ldrh	r2, [r3, #8]
 800fb8e:	89bb      	ldrh	r3, [r7, #12]
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	4619      	mov	r1, r3
 800fb96:	f7fb fbb9 	bl	800b30c <pbuf_realloc>
  useg->len -= remainder;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	891a      	ldrh	r2, [r3, #8]
 800fb9e:	89bb      	ldrh	r3, [r7, #12]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	899b      	ldrh	r3, [r3, #12]
 800fbae:	b29c      	uxth	r4, r3
 800fbb0:	7efb      	ldrb	r3, [r7, #27]
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7fa f9ff 	bl	8009fb8 <lwip_htons>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	4322      	orrs	r2, r4
 800fbc4:	b292      	uxth	r2, r2
 800fbc6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fb fdb1 	bl	800b734 <pbuf_clen>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbdc:	4413      	add	r3, r2
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fb fda2 	bl	800b734 <pbuf_clen>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbfa:	4413      	add	r3, r2
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	69fa      	ldr	r2, [r7, #28]
 800fc10:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d103      	bne.n	800fc22 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fc22:	2300      	movs	r3, #0
 800fc24:	e016      	b.n	800fc54 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fc26:	bf00      	nop
 800fc28:	e002      	b.n	800fc30 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fc2a:	bf00      	nop
 800fc2c:	e000      	b.n	800fc30 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fc2e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d006      	beq.n	800fc44 <tcp_split_unsent_seg+0x25c>
 800fc36:	4b09      	ldr	r3, [pc, #36]	; (800fc5c <tcp_split_unsent_seg+0x274>)
 800fc38:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fc3c:	490d      	ldr	r1, [pc, #52]	; (800fc74 <tcp_split_unsent_seg+0x28c>)
 800fc3e:	4809      	ldr	r0, [pc, #36]	; (800fc64 <tcp_split_unsent_seg+0x27c>)
 800fc40:	f004 f828 	bl	8013c94 <iprintf>
  if (p != NULL) {
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d002      	beq.n	800fc50 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fc4a:	6938      	ldr	r0, [r7, #16]
 800fc4c:	f7fb fce4 	bl	800b618 <pbuf_free>
  }

  return ERR_MEM;
 800fc50:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3724      	adds	r7, #36	; 0x24
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd90      	pop	{r4, r7, pc}
 800fc5c:	080162f0 	.word	0x080162f0
 800fc60:	08016684 	.word	0x08016684
 800fc64:	08016344 	.word	0x08016344
 800fc68:	080166a8 	.word	0x080166a8
 800fc6c:	080166cc 	.word	0x080166cc
 800fc70:	080166dc 	.word	0x080166dc
 800fc74:	080166ec 	.word	0x080166ec

0800fc78 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fc78:	b590      	push	{r4, r7, lr}
 800fc7a:	b085      	sub	sp, #20
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d106      	bne.n	800fc94 <tcp_send_fin+0x1c>
 800fc86:	4b21      	ldr	r3, [pc, #132]	; (800fd0c <tcp_send_fin+0x94>)
 800fc88:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fc8c:	4920      	ldr	r1, [pc, #128]	; (800fd10 <tcp_send_fin+0x98>)
 800fc8e:	4821      	ldr	r0, [pc, #132]	; (800fd14 <tcp_send_fin+0x9c>)
 800fc90:	f004 f800 	bl	8013c94 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d02e      	beq.n	800fcfa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fca0:	60fb      	str	r3, [r7, #12]
 800fca2:	e002      	b.n	800fcaa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1f8      	bne.n	800fca4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	899b      	ldrh	r3, [r3, #12]
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fa f97c 	bl	8009fb8 <lwip_htons>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	f003 0307 	and.w	r3, r3, #7
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d116      	bne.n	800fcfa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	899b      	ldrh	r3, [r3, #12]
 800fcd2:	b29c      	uxth	r4, r3
 800fcd4:	2001      	movs	r0, #1
 800fcd6:	f7fa f96f 	bl	8009fb8 <lwip_htons>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	461a      	mov	r2, r3
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	4322      	orrs	r2, r4
 800fce4:	b292      	uxth	r2, r2
 800fce6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	8b5b      	ldrh	r3, [r3, #26]
 800fcec:	f043 0320 	orr.w	r3, r3, #32
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	e004      	b.n	800fd04 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fcfa:	2101      	movs	r1, #1
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 f80b 	bl	800fd18 <tcp_enqueue_flags>
 800fd02:	4603      	mov	r3, r0
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3714      	adds	r7, #20
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd90      	pop	{r4, r7, pc}
 800fd0c:	080162f0 	.word	0x080162f0
 800fd10:	080166f8 	.word	0x080166f8
 800fd14:	08016344 	.word	0x08016344

0800fd18 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b08a      	sub	sp, #40	; 0x28
 800fd1c:	af02      	add	r7, sp, #8
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	460b      	mov	r3, r1
 800fd22:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fd24:	2300      	movs	r3, #0
 800fd26:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fd2c:	78fb      	ldrb	r3, [r7, #3]
 800fd2e:	f003 0303 	and.w	r3, r3, #3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d106      	bne.n	800fd44 <tcp_enqueue_flags+0x2c>
 800fd36:	4b67      	ldr	r3, [pc, #412]	; (800fed4 <tcp_enqueue_flags+0x1bc>)
 800fd38:	f240 4212 	movw	r2, #1042	; 0x412
 800fd3c:	4966      	ldr	r1, [pc, #408]	; (800fed8 <tcp_enqueue_flags+0x1c0>)
 800fd3e:	4867      	ldr	r0, [pc, #412]	; (800fedc <tcp_enqueue_flags+0x1c4>)
 800fd40:	f003 ffa8 	bl	8013c94 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d106      	bne.n	800fd58 <tcp_enqueue_flags+0x40>
 800fd4a:	4b62      	ldr	r3, [pc, #392]	; (800fed4 <tcp_enqueue_flags+0x1bc>)
 800fd4c:	f240 4213 	movw	r2, #1043	; 0x413
 800fd50:	4963      	ldr	r1, [pc, #396]	; (800fee0 <tcp_enqueue_flags+0x1c8>)
 800fd52:	4862      	ldr	r0, [pc, #392]	; (800fedc <tcp_enqueue_flags+0x1c4>)
 800fd54:	f003 ff9e 	bl	8013c94 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fd58:	78fb      	ldrb	r3, [r7, #3]
 800fd5a:	f003 0302 	and.w	r3, r3, #2
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fd62:	2301      	movs	r3, #1
 800fd64:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd66:	7ffb      	ldrb	r3, [r7, #31]
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	f003 0304 	and.w	r3, r3, #4
 800fd70:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fd72:	7dfb      	ldrb	r3, [r7, #23]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	2036      	movs	r0, #54	; 0x36
 800fd7e:	f7fb f96b 	bl	800b058 <pbuf_alloc>
 800fd82:	6138      	str	r0, [r7, #16]
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d109      	bne.n	800fd9e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	8b5b      	ldrh	r3, [r3, #26]
 800fd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fd98:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9c:	e095      	b.n	800feca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	895a      	ldrh	r2, [r3, #10]
 800fda2:	7dfb      	ldrb	r3, [r7, #23]
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d206      	bcs.n	800fdb8 <tcp_enqueue_flags+0xa0>
 800fdaa:	4b4a      	ldr	r3, [pc, #296]	; (800fed4 <tcp_enqueue_flags+0x1bc>)
 800fdac:	f240 423a 	movw	r2, #1082	; 0x43a
 800fdb0:	494c      	ldr	r1, [pc, #304]	; (800fee4 <tcp_enqueue_flags+0x1cc>)
 800fdb2:	484a      	ldr	r0, [pc, #296]	; (800fedc <tcp_enqueue_flags+0x1c4>)
 800fdb4:	f003 ff6e 	bl	8013c94 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fdbc:	78fa      	ldrb	r2, [r7, #3]
 800fdbe:	7ffb      	ldrb	r3, [r7, #31]
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	6939      	ldr	r1, [r7, #16]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7ff fd70 	bl	800f8ac <tcp_create_segment>
 800fdcc:	60f8      	str	r0, [r7, #12]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d109      	bne.n	800fde8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	8b5b      	ldrh	r3, [r3, #26]
 800fdd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fde2:	f04f 33ff 	mov.w	r3, #4294967295
 800fde6:	e070      	b.n	800feca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	f003 0303 	and.w	r3, r3, #3
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d006      	beq.n	800fe02 <tcp_enqueue_flags+0xea>
 800fdf4:	4b37      	ldr	r3, [pc, #220]	; (800fed4 <tcp_enqueue_flags+0x1bc>)
 800fdf6:	f240 4242 	movw	r2, #1090	; 0x442
 800fdfa:	493b      	ldr	r1, [pc, #236]	; (800fee8 <tcp_enqueue_flags+0x1d0>)
 800fdfc:	4837      	ldr	r0, [pc, #220]	; (800fedc <tcp_enqueue_flags+0x1c4>)
 800fdfe:	f003 ff49 	bl	8013c94 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	891b      	ldrh	r3, [r3, #8]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d006      	beq.n	800fe18 <tcp_enqueue_flags+0x100>
 800fe0a:	4b32      	ldr	r3, [pc, #200]	; (800fed4 <tcp_enqueue_flags+0x1bc>)
 800fe0c:	f240 4243 	movw	r2, #1091	; 0x443
 800fe10:	4936      	ldr	r1, [pc, #216]	; (800feec <tcp_enqueue_flags+0x1d4>)
 800fe12:	4832      	ldr	r0, [pc, #200]	; (800fedc <tcp_enqueue_flags+0x1c4>)
 800fe14:	f003 ff3e 	bl	8013c94 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d103      	bne.n	800fe28 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	66da      	str	r2, [r3, #108]	; 0x6c
 800fe26:	e00d      	b.n	800fe44 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe2c:	61bb      	str	r3, [r7, #24]
 800fe2e:	e002      	b.n	800fe36 <tcp_enqueue_flags+0x11e>
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	61bb      	str	r3, [r7, #24]
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d1f8      	bne.n	800fe30 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fe4c:	78fb      	ldrb	r3, [r7, #3]
 800fe4e:	f003 0302 	and.w	r3, r3, #2
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d104      	bne.n	800fe60 <tcp_enqueue_flags+0x148>
 800fe56:	78fb      	ldrb	r3, [r7, #3]
 800fe58:	f003 0301 	and.w	r3, r3, #1
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe64:	1c5a      	adds	r2, r3, #1
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fe6a:	78fb      	ldrb	r3, [r7, #3]
 800fe6c:	f003 0301 	and.w	r3, r3, #1
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d006      	beq.n	800fe82 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	8b5b      	ldrh	r3, [r3, #26]
 800fe78:	f043 0320 	orr.w	r3, r3, #32
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fb fc54 	bl	800b734 <pbuf_clen>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	461a      	mov	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe96:	4413      	add	r3, r2
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00e      	beq.n	800fec8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10a      	bne.n	800fec8 <tcp_enqueue_flags+0x1b0>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d106      	bne.n	800fec8 <tcp_enqueue_flags+0x1b0>
 800feba:	4b06      	ldr	r3, [pc, #24]	; (800fed4 <tcp_enqueue_flags+0x1bc>)
 800febc:	f240 4266 	movw	r2, #1126	; 0x466
 800fec0:	490b      	ldr	r1, [pc, #44]	; (800fef0 <tcp_enqueue_flags+0x1d8>)
 800fec2:	4806      	ldr	r0, [pc, #24]	; (800fedc <tcp_enqueue_flags+0x1c4>)
 800fec4:	f003 fee6 	bl	8013c94 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3720      	adds	r7, #32
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	080162f0 	.word	0x080162f0
 800fed8:	08016714 	.word	0x08016714
 800fedc:	08016344 	.word	0x08016344
 800fee0:	0801676c 	.word	0x0801676c
 800fee4:	0801678c 	.word	0x0801678c
 800fee8:	080167c8 	.word	0x080167c8
 800feec:	080167e0 	.word	0x080167e0
 800fef0:	0801680c 	.word	0x0801680c

0800fef4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fef4:	b5b0      	push	{r4, r5, r7, lr}
 800fef6:	b08a      	sub	sp, #40	; 0x28
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d106      	bne.n	800ff10 <tcp_output+0x1c>
 800ff02:	4ba0      	ldr	r3, [pc, #640]	; (8010184 <tcp_output+0x290>)
 800ff04:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ff08:	499f      	ldr	r1, [pc, #636]	; (8010188 <tcp_output+0x294>)
 800ff0a:	48a0      	ldr	r0, [pc, #640]	; (801018c <tcp_output+0x298>)
 800ff0c:	f003 fec2 	bl	8013c94 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	7d1b      	ldrb	r3, [r3, #20]
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d106      	bne.n	800ff26 <tcp_output+0x32>
 800ff18:	4b9a      	ldr	r3, [pc, #616]	; (8010184 <tcp_output+0x290>)
 800ff1a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800ff1e:	499c      	ldr	r1, [pc, #624]	; (8010190 <tcp_output+0x29c>)
 800ff20:	489a      	ldr	r0, [pc, #616]	; (801018c <tcp_output+0x298>)
 800ff22:	f003 feb7 	bl	8013c94 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ff26:	4b9b      	ldr	r3, [pc, #620]	; (8010194 <tcp_output+0x2a0>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d101      	bne.n	800ff34 <tcp_output+0x40>
    return ERR_OK;
 800ff30:	2300      	movs	r3, #0
 800ff32:	e1d2      	b.n	80102da <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d203      	bcs.n	800ff4c <tcp_output+0x58>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff4a:	e002      	b.n	800ff52 <tcp_output+0x5e>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff52:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff58:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d10b      	bne.n	800ff78 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8b5b      	ldrh	r3, [r3, #26]
 800ff64:	f003 0302 	and.w	r3, r3, #2
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	f000 81a9 	beq.w	80102c0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f000 fdd8 	bl	8010b24 <tcp_send_empty_ack>
 800ff74:	4603      	mov	r3, r0
 800ff76:	e1b0      	b.n	80102da <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ff78:	6879      	ldr	r1, [r7, #4]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	461a      	mov	r2, r3
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7ff fc77 	bl	800f874 <tcp_route>
 800ff86:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d102      	bne.n	800ff94 <tcp_output+0xa0>
    return ERR_RTE;
 800ff8e:	f06f 0303 	mvn.w	r3, #3
 800ff92:	e1a2      	b.n	80102da <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d003      	beq.n	800ffa2 <tcp_output+0xae>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d111      	bne.n	800ffc6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d002      	beq.n	800ffae <tcp_output+0xba>
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	e000      	b.n	800ffb0 <tcp_output+0xbc>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d102      	bne.n	800ffbe <tcp_output+0xca>
      return ERR_RTE;
 800ffb8:	f06f 0303 	mvn.w	r3, #3
 800ffbc:	e18d      	b.n	80102da <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fa f808 	bl	8009fe2 <lwip_htonl>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffd8:	1ad3      	subs	r3, r2, r3
 800ffda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffdc:	8912      	ldrh	r2, [r2, #8]
 800ffde:	4413      	add	r3, r2
 800ffe0:	69ba      	ldr	r2, [r7, #24]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d227      	bcs.n	8010036 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffec:	461a      	mov	r2, r3
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d114      	bne.n	801001e <tcp_output+0x12a>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d110      	bne.n	801001e <tcp_output+0x12a>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010002:	2b00      	cmp	r3, #0
 8010004:	d10b      	bne.n	801001e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2201      	movs	r2, #1
 8010012:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2200      	movs	r2, #0
 801001a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	8b5b      	ldrh	r3, [r3, #26]
 8010022:	f003 0302 	and.w	r3, r3, #2
 8010026:	2b00      	cmp	r3, #0
 8010028:	f000 814c 	beq.w	80102c4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 fd79 	bl	8010b24 <tcp_send_empty_ack>
 8010032:	4603      	mov	r3, r0
 8010034:	e151      	b.n	80102da <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010042:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010044:	6a3b      	ldr	r3, [r7, #32]
 8010046:	2b00      	cmp	r3, #0
 8010048:	f000 811b 	beq.w	8010282 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801004c:	e002      	b.n	8010054 <tcp_output+0x160>
 801004e:	6a3b      	ldr	r3, [r7, #32]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	623b      	str	r3, [r7, #32]
 8010054:	6a3b      	ldr	r3, [r7, #32]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1f8      	bne.n	801004e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801005c:	e111      	b.n	8010282 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	899b      	ldrh	r3, [r3, #12]
 8010064:	b29b      	uxth	r3, r3
 8010066:	4618      	mov	r0, r3
 8010068:	f7f9 ffa6 	bl	8009fb8 <lwip_htons>
 801006c:	4603      	mov	r3, r0
 801006e:	b2db      	uxtb	r3, r3
 8010070:	f003 0304 	and.w	r3, r3, #4
 8010074:	2b00      	cmp	r3, #0
 8010076:	d006      	beq.n	8010086 <tcp_output+0x192>
 8010078:	4b42      	ldr	r3, [pc, #264]	; (8010184 <tcp_output+0x290>)
 801007a:	f240 5237 	movw	r2, #1335	; 0x537
 801007e:	4946      	ldr	r1, [pc, #280]	; (8010198 <tcp_output+0x2a4>)
 8010080:	4842      	ldr	r0, [pc, #264]	; (801018c <tcp_output+0x298>)
 8010082:	f003 fe07 	bl	8013c94 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801008a:	2b00      	cmp	r3, #0
 801008c:	d01f      	beq.n	80100ce <tcp_output+0x1da>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	8b5b      	ldrh	r3, [r3, #26]
 8010092:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010096:	2b00      	cmp	r3, #0
 8010098:	d119      	bne.n	80100ce <tcp_output+0x1da>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d00b      	beq.n	80100ba <tcp_output+0x1c6>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d110      	bne.n	80100ce <tcp_output+0x1da>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b0:	891a      	ldrh	r2, [r3, #8]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d209      	bcs.n	80100ce <tcp_output+0x1da>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d004      	beq.n	80100ce <tcp_output+0x1da>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100ca:	2b08      	cmp	r3, #8
 80100cc:	d901      	bls.n	80100d2 <tcp_output+0x1de>
 80100ce:	2301      	movs	r3, #1
 80100d0:	e000      	b.n	80100d4 <tcp_output+0x1e0>
 80100d2:	2300      	movs	r3, #0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d106      	bne.n	80100e6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	8b5b      	ldrh	r3, [r3, #26]
 80100dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f000 80e3 	beq.w	80102ac <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	7d1b      	ldrb	r3, [r3, #20]
 80100ea:	2b02      	cmp	r3, #2
 80100ec:	d00d      	beq.n	801010a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80100ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	899b      	ldrh	r3, [r3, #12]
 80100f4:	b29c      	uxth	r4, r3
 80100f6:	2010      	movs	r0, #16
 80100f8:	f7f9 ff5e 	bl	8009fb8 <lwip_htons>
 80100fc:	4603      	mov	r3, r0
 80100fe:	461a      	mov	r2, r3
 8010100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	4322      	orrs	r2, r4
 8010106:	b292      	uxth	r2, r2
 8010108:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801010a:	697a      	ldr	r2, [r7, #20]
 801010c:	6879      	ldr	r1, [r7, #4]
 801010e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010110:	f000 f908 	bl	8010324 <tcp_output_segment>
 8010114:	4603      	mov	r3, r0
 8010116:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d009      	beq.n	8010134 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	8b5b      	ldrh	r3, [r3, #26]
 8010124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010128:	b29a      	uxth	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	835a      	strh	r2, [r3, #26]
      return err;
 801012e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010132:	e0d2      	b.n	80102da <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	7d1b      	ldrb	r3, [r3, #20]
 8010140:	2b02      	cmp	r3, #2
 8010142:	d006      	beq.n	8010152 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	8b5b      	ldrh	r3, [r3, #26]
 8010148:	f023 0303 	bic.w	r3, r3, #3
 801014c:	b29a      	uxth	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	f7f9 ff42 	bl	8009fe2 <lwip_htonl>
 801015e:	4604      	mov	r4, r0
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	891b      	ldrh	r3, [r3, #8]
 8010164:	461d      	mov	r5, r3
 8010166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	899b      	ldrh	r3, [r3, #12]
 801016c:	b29b      	uxth	r3, r3
 801016e:	4618      	mov	r0, r3
 8010170:	f7f9 ff22 	bl	8009fb8 <lwip_htons>
 8010174:	4603      	mov	r3, r0
 8010176:	b2db      	uxtb	r3, r3
 8010178:	f003 0303 	and.w	r3, r3, #3
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00d      	beq.n	801019c <tcp_output+0x2a8>
 8010180:	2301      	movs	r3, #1
 8010182:	e00c      	b.n	801019e <tcp_output+0x2aa>
 8010184:	080162f0 	.word	0x080162f0
 8010188:	08016834 	.word	0x08016834
 801018c:	08016344 	.word	0x08016344
 8010190:	0801684c 	.word	0x0801684c
 8010194:	20015ee8 	.word	0x20015ee8
 8010198:	08016874 	.word	0x08016874
 801019c:	2300      	movs	r3, #0
 801019e:	442b      	add	r3, r5
 80101a0:	4423      	add	r3, r4
 80101a2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	1ad3      	subs	r3, r2, r3
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	da02      	bge.n	80101b6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	68ba      	ldr	r2, [r7, #8]
 80101b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80101b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b8:	891b      	ldrh	r3, [r3, #8]
 80101ba:	461c      	mov	r4, r3
 80101bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	899b      	ldrh	r3, [r3, #12]
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7f9 fef7 	bl	8009fb8 <lwip_htons>
 80101ca:	4603      	mov	r3, r0
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	f003 0303 	and.w	r3, r3, #3
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d001      	beq.n	80101da <tcp_output+0x2e6>
 80101d6:	2301      	movs	r3, #1
 80101d8:	e000      	b.n	80101dc <tcp_output+0x2e8>
 80101da:	2300      	movs	r3, #0
 80101dc:	4423      	add	r3, r4
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d049      	beq.n	8010276 <tcp_output+0x382>
      seg->next = NULL;
 80101e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e4:	2200      	movs	r2, #0
 80101e6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d105      	bne.n	80101fc <tcp_output+0x308>
        pcb->unacked = seg;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101f4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	623b      	str	r3, [r7, #32]
 80101fa:	e03f      	b.n	801027c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80101fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	4618      	mov	r0, r3
 8010204:	f7f9 feed 	bl	8009fe2 <lwip_htonl>
 8010208:	4604      	mov	r4, r0
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	4618      	mov	r0, r3
 8010212:	f7f9 fee6 	bl	8009fe2 <lwip_htonl>
 8010216:	4603      	mov	r3, r0
 8010218:	1ae3      	subs	r3, r4, r3
 801021a:	2b00      	cmp	r3, #0
 801021c:	da24      	bge.n	8010268 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	3370      	adds	r3, #112	; 0x70
 8010222:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010224:	e002      	b.n	801022c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d011      	beq.n	8010258 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	f7f9 fed0 	bl	8009fe2 <lwip_htonl>
 8010242:	4604      	mov	r4, r0
 8010244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	4618      	mov	r0, r3
 801024c:	f7f9 fec9 	bl	8009fe2 <lwip_htonl>
 8010250:	4603      	mov	r3, r0
 8010252:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010254:	2b00      	cmp	r3, #0
 8010256:	dbe6      	blt.n	8010226 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010264:	601a      	str	r2, [r3, #0]
 8010266:	e009      	b.n	801027c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010268:	6a3b      	ldr	r3, [r7, #32]
 801026a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801026c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801026e:	6a3b      	ldr	r3, [r7, #32]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	623b      	str	r3, [r7, #32]
 8010274:	e002      	b.n	801027c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010278:	f7fc fc42 	bl	800cb00 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010280:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010284:	2b00      	cmp	r3, #0
 8010286:	d012      	beq.n	80102ae <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	4618      	mov	r0, r3
 8010290:	f7f9 fea7 	bl	8009fe2 <lwip_htonl>
 8010294:	4602      	mov	r2, r0
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801029a:	1ad3      	subs	r3, r2, r3
 801029c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801029e:	8912      	ldrh	r2, [r2, #8]
 80102a0:	4413      	add	r3, r2
  while (seg != NULL &&
 80102a2:	69ba      	ldr	r2, [r7, #24]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	f4bf aeda 	bcs.w	801005e <tcp_output+0x16a>
 80102aa:	e000      	b.n	80102ae <tcp_output+0x3ba>
      break;
 80102ac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d108      	bne.n	80102c8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80102be:	e004      	b.n	80102ca <tcp_output+0x3d6>
    goto output_done;
 80102c0:	bf00      	nop
 80102c2:	e002      	b.n	80102ca <tcp_output+0x3d6>
    goto output_done;
 80102c4:	bf00      	nop
 80102c6:	e000      	b.n	80102ca <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80102c8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	8b5b      	ldrh	r3, [r3, #26]
 80102ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3728      	adds	r7, #40	; 0x28
 80102de:	46bd      	mov	sp, r7
 80102e0:	bdb0      	pop	{r4, r5, r7, pc}
 80102e2:	bf00      	nop

080102e4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d106      	bne.n	8010300 <tcp_output_segment_busy+0x1c>
 80102f2:	4b09      	ldr	r3, [pc, #36]	; (8010318 <tcp_output_segment_busy+0x34>)
 80102f4:	f240 529a 	movw	r2, #1434	; 0x59a
 80102f8:	4908      	ldr	r1, [pc, #32]	; (801031c <tcp_output_segment_busy+0x38>)
 80102fa:	4809      	ldr	r0, [pc, #36]	; (8010320 <tcp_output_segment_busy+0x3c>)
 80102fc:	f003 fcca 	bl	8013c94 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	7b9b      	ldrb	r3, [r3, #14]
 8010306:	2b01      	cmp	r3, #1
 8010308:	d001      	beq.n	801030e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801030a:	2301      	movs	r3, #1
 801030c:	e000      	b.n	8010310 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801030e:	2300      	movs	r3, #0
}
 8010310:	4618      	mov	r0, r3
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}
 8010318:	080162f0 	.word	0x080162f0
 801031c:	0801688c 	.word	0x0801688c
 8010320:	08016344 	.word	0x08016344

08010324 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010324:	b5b0      	push	{r4, r5, r7, lr}
 8010326:	b08c      	sub	sp, #48	; 0x30
 8010328:	af04      	add	r7, sp, #16
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d106      	bne.n	8010344 <tcp_output_segment+0x20>
 8010336:	4b64      	ldr	r3, [pc, #400]	; (80104c8 <tcp_output_segment+0x1a4>)
 8010338:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801033c:	4963      	ldr	r1, [pc, #396]	; (80104cc <tcp_output_segment+0x1a8>)
 801033e:	4864      	ldr	r0, [pc, #400]	; (80104d0 <tcp_output_segment+0x1ac>)
 8010340:	f003 fca8 	bl	8013c94 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d106      	bne.n	8010358 <tcp_output_segment+0x34>
 801034a:	4b5f      	ldr	r3, [pc, #380]	; (80104c8 <tcp_output_segment+0x1a4>)
 801034c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010350:	4960      	ldr	r1, [pc, #384]	; (80104d4 <tcp_output_segment+0x1b0>)
 8010352:	485f      	ldr	r0, [pc, #380]	; (80104d0 <tcp_output_segment+0x1ac>)
 8010354:	f003 fc9e 	bl	8013c94 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d106      	bne.n	801036c <tcp_output_segment+0x48>
 801035e:	4b5a      	ldr	r3, [pc, #360]	; (80104c8 <tcp_output_segment+0x1a4>)
 8010360:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010364:	495c      	ldr	r1, [pc, #368]	; (80104d8 <tcp_output_segment+0x1b4>)
 8010366:	485a      	ldr	r0, [pc, #360]	; (80104d0 <tcp_output_segment+0x1ac>)
 8010368:	f003 fc94 	bl	8013c94 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7ff ffb9 	bl	80102e4 <tcp_output_segment_busy>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010378:	2300      	movs	r3, #0
 801037a:	e0a0      	b.n	80104be <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	68dc      	ldr	r4, [r3, #12]
 8010384:	4610      	mov	r0, r2
 8010386:	f7f9 fe2c 	bl	8009fe2 <lwip_htonl>
 801038a:	4603      	mov	r3, r0
 801038c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	68dc      	ldr	r4, [r3, #12]
 8010396:	4610      	mov	r0, r2
 8010398:	f7f9 fe0e 	bl	8009fb8 <lwip_htons>
 801039c:	4603      	mov	r3, r0
 801039e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a4:	68ba      	ldr	r2, [r7, #8]
 80103a6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80103a8:	441a      	add	r2, r3
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	68db      	ldr	r3, [r3, #12]
 80103b2:	3314      	adds	r3, #20
 80103b4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	7a9b      	ldrb	r3, [r3, #10]
 80103ba:	f003 0301 	and.w	r3, r3, #1
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d015      	beq.n	80103ee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	3304      	adds	r3, #4
 80103c6:	461a      	mov	r2, r3
 80103c8:	6879      	ldr	r1, [r7, #4]
 80103ca:	f44f 7006 	mov.w	r0, #536	; 0x218
 80103ce:	f7fc fe8d 	bl	800d0ec <tcp_eff_send_mss_netif>
 80103d2:	4603      	mov	r3, r0
 80103d4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80103d6:	8b7b      	ldrh	r3, [r7, #26]
 80103d8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80103dc:	4618      	mov	r0, r3
 80103de:	f7f9 fe00 	bl	8009fe2 <lwip_htonl>
 80103e2:	4602      	mov	r2, r0
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	3304      	adds	r3, #4
 80103ec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	da02      	bge.n	80103fe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	2200      	movs	r2, #0
 80103fc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010402:	2b00      	cmp	r3, #0
 8010404:	d10c      	bne.n	8010420 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010406:	4b35      	ldr	r3, [pc, #212]	; (80104dc <tcp_output_segment+0x1b8>)
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	68db      	ldr	r3, [r3, #12]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	f7f9 fde4 	bl	8009fe2 <lwip_htonl>
 801041a:	4602      	mov	r2, r0
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	461a      	mov	r2, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	8959      	ldrh	r1, [r3, #10]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	8b3a      	ldrh	r2, [r7, #24]
 801043c:	1a8a      	subs	r2, r1, r2
 801043e:	b292      	uxth	r2, r2
 8010440:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	8919      	ldrh	r1, [r3, #8]
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	8b3a      	ldrh	r2, [r7, #24]
 801044e:	1a8a      	subs	r2, r1, r2
 8010450:	b292      	uxth	r2, r2
 8010452:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	68d2      	ldr	r2, [r2, #12]
 801045c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	2200      	movs	r2, #0
 8010464:	741a      	strb	r2, [r3, #16]
 8010466:	2200      	movs	r2, #0
 8010468:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	f103 0214 	add.w	r2, r3, #20
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	7a9b      	ldrb	r3, [r3, #10]
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	f003 0304 	and.w	r3, r3, #4
 801047c:	4413      	add	r3, r2
 801047e:	69fa      	ldr	r2, [r7, #28]
 8010480:	429a      	cmp	r2, r3
 8010482:	d006      	beq.n	8010492 <tcp_output_segment+0x16e>
 8010484:	4b10      	ldr	r3, [pc, #64]	; (80104c8 <tcp_output_segment+0x1a4>)
 8010486:	f240 621c 	movw	r2, #1564	; 0x61c
 801048a:	4915      	ldr	r1, [pc, #84]	; (80104e0 <tcp_output_segment+0x1bc>)
 801048c:	4810      	ldr	r0, [pc, #64]	; (80104d0 <tcp_output_segment+0x1ac>)
 801048e:	f003 fc01 	bl	8013c94 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6858      	ldr	r0, [r3, #4]
 8010496:	68b9      	ldr	r1, [r7, #8]
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	1d1c      	adds	r4, r3, #4
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	7add      	ldrb	r5, [r3, #11]
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	7a9b      	ldrb	r3, [r3, #10]
 80104a4:	687a      	ldr	r2, [r7, #4]
 80104a6:	9202      	str	r2, [sp, #8]
 80104a8:	2206      	movs	r2, #6
 80104aa:	9201      	str	r2, [sp, #4]
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	462b      	mov	r3, r5
 80104b0:	4622      	mov	r2, r4
 80104b2:	f002 fa6f 	bl	8012994 <ip4_output_if>
 80104b6:	4603      	mov	r3, r0
 80104b8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80104ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3720      	adds	r7, #32
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bdb0      	pop	{r4, r5, r7, pc}
 80104c6:	bf00      	nop
 80104c8:	080162f0 	.word	0x080162f0
 80104cc:	080168b4 	.word	0x080168b4
 80104d0:	08016344 	.word	0x08016344
 80104d4:	080168d4 	.word	0x080168d4
 80104d8:	080168f4 	.word	0x080168f4
 80104dc:	20015ed8 	.word	0x20015ed8
 80104e0:	08016918 	.word	0x08016918

080104e4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80104e4:	b5b0      	push	{r4, r5, r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d106      	bne.n	8010500 <tcp_rexmit_rto_prepare+0x1c>
 80104f2:	4b31      	ldr	r3, [pc, #196]	; (80105b8 <tcp_rexmit_rto_prepare+0xd4>)
 80104f4:	f240 6263 	movw	r2, #1635	; 0x663
 80104f8:	4930      	ldr	r1, [pc, #192]	; (80105bc <tcp_rexmit_rto_prepare+0xd8>)
 80104fa:	4831      	ldr	r0, [pc, #196]	; (80105c0 <tcp_rexmit_rto_prepare+0xdc>)
 80104fc:	f003 fbca 	bl	8013c94 <iprintf>

  if (pcb->unacked == NULL) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010504:	2b00      	cmp	r3, #0
 8010506:	d102      	bne.n	801050e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010508:	f06f 0305 	mvn.w	r3, #5
 801050c:	e050      	b.n	80105b0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010512:	60fb      	str	r3, [r7, #12]
 8010514:	e00b      	b.n	801052e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f7ff fee4 	bl	80102e4 <tcp_output_segment_busy>
 801051c:	4603      	mov	r3, r0
 801051e:	2b00      	cmp	r3, #0
 8010520:	d002      	beq.n	8010528 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010522:	f06f 0305 	mvn.w	r3, #5
 8010526:	e043      	b.n	80105b0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	60fb      	str	r3, [r7, #12]
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d1ef      	bne.n	8010516 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010536:	68f8      	ldr	r0, [r7, #12]
 8010538:	f7ff fed4 	bl	80102e4 <tcp_output_segment_busy>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d002      	beq.n	8010548 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010542:	f06f 0305 	mvn.w	r3, #5
 8010546:	e033      	b.n	80105b0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	8b5b      	ldrh	r3, [r3, #26]
 8010562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010566:	b29a      	uxth	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	4618      	mov	r0, r3
 8010574:	f7f9 fd35 	bl	8009fe2 <lwip_htonl>
 8010578:	4604      	mov	r4, r0
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	891b      	ldrh	r3, [r3, #8]
 801057e:	461d      	mov	r5, r3
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	899b      	ldrh	r3, [r3, #12]
 8010586:	b29b      	uxth	r3, r3
 8010588:	4618      	mov	r0, r3
 801058a:	f7f9 fd15 	bl	8009fb8 <lwip_htons>
 801058e:	4603      	mov	r3, r0
 8010590:	b2db      	uxtb	r3, r3
 8010592:	f003 0303 	and.w	r3, r3, #3
 8010596:	2b00      	cmp	r3, #0
 8010598:	d001      	beq.n	801059e <tcp_rexmit_rto_prepare+0xba>
 801059a:	2301      	movs	r3, #1
 801059c:	e000      	b.n	80105a0 <tcp_rexmit_rto_prepare+0xbc>
 801059e:	2300      	movs	r3, #0
 80105a0:	442b      	add	r3, r5
 80105a2:	18e2      	adds	r2, r4, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80105ae:	2300      	movs	r3, #0
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3710      	adds	r7, #16
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bdb0      	pop	{r4, r5, r7, pc}
 80105b8:	080162f0 	.word	0x080162f0
 80105bc:	0801692c 	.word	0x0801692c
 80105c0:	08016344 	.word	0x08016344

080105c4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d106      	bne.n	80105e0 <tcp_rexmit_rto_commit+0x1c>
 80105d2:	4b0d      	ldr	r3, [pc, #52]	; (8010608 <tcp_rexmit_rto_commit+0x44>)
 80105d4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80105d8:	490c      	ldr	r1, [pc, #48]	; (801060c <tcp_rexmit_rto_commit+0x48>)
 80105da:	480d      	ldr	r0, [pc, #52]	; (8010610 <tcp_rexmit_rto_commit+0x4c>)
 80105dc:	f003 fb5a 	bl	8013c94 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105e6:	2bff      	cmp	r3, #255	; 0xff
 80105e8:	d007      	beq.n	80105fa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105f0:	3301      	adds	r3, #1
 80105f2:	b2da      	uxtb	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7ff fc7a 	bl	800fef4 <tcp_output>
}
 8010600:	bf00      	nop
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	080162f0 	.word	0x080162f0
 801060c:	08016950 	.word	0x08016950
 8010610:	08016344 	.word	0x08016344

08010614 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b082      	sub	sp, #8
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d106      	bne.n	8010630 <tcp_rexmit_rto+0x1c>
 8010622:	4b0a      	ldr	r3, [pc, #40]	; (801064c <tcp_rexmit_rto+0x38>)
 8010624:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010628:	4909      	ldr	r1, [pc, #36]	; (8010650 <tcp_rexmit_rto+0x3c>)
 801062a:	480a      	ldr	r0, [pc, #40]	; (8010654 <tcp_rexmit_rto+0x40>)
 801062c:	f003 fb32 	bl	8013c94 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff ff57 	bl	80104e4 <tcp_rexmit_rto_prepare>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d102      	bne.n	8010642 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f7ff ffc1 	bl	80105c4 <tcp_rexmit_rto_commit>
  }
}
 8010642:	bf00      	nop
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	080162f0 	.word	0x080162f0
 8010650:	08016974 	.word	0x08016974
 8010654:	08016344 	.word	0x08016344

08010658 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010658:	b590      	push	{r4, r7, lr}
 801065a:	b085      	sub	sp, #20
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d106      	bne.n	8010674 <tcp_rexmit+0x1c>
 8010666:	4b2f      	ldr	r3, [pc, #188]	; (8010724 <tcp_rexmit+0xcc>)
 8010668:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801066c:	492e      	ldr	r1, [pc, #184]	; (8010728 <tcp_rexmit+0xd0>)
 801066e:	482f      	ldr	r0, [pc, #188]	; (801072c <tcp_rexmit+0xd4>)
 8010670:	f003 fb10 	bl	8013c94 <iprintf>

  if (pcb->unacked == NULL) {
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010678:	2b00      	cmp	r3, #0
 801067a:	d102      	bne.n	8010682 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801067c:	f06f 0305 	mvn.w	r3, #5
 8010680:	e04c      	b.n	801071c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010686:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010688:	68b8      	ldr	r0, [r7, #8]
 801068a:	f7ff fe2b 	bl	80102e4 <tcp_output_segment_busy>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d002      	beq.n	801069a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010694:	f06f 0305 	mvn.w	r3, #5
 8010698:	e040      	b.n	801071c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	336c      	adds	r3, #108	; 0x6c
 80106a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80106a8:	e002      	b.n	80106b0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d011      	beq.n	80106dc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7f9 fc8e 	bl	8009fe2 <lwip_htonl>
 80106c6:	4604      	mov	r4, r0
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	68db      	ldr	r3, [r3, #12]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7f9 fc87 	bl	8009fe2 <lwip_htonl>
 80106d4:	4603      	mov	r3, r0
 80106d6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80106d8:	2b00      	cmp	r3, #0
 80106da:	dbe6      	blt.n	80106aa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	68ba      	ldr	r2, [r7, #8]
 80106e8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d103      	bne.n	80106fa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010700:	2bff      	cmp	r3, #255	; 0xff
 8010702:	d007      	beq.n	8010714 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801070a:	3301      	adds	r3, #1
 801070c:	b2da      	uxtb	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2200      	movs	r2, #0
 8010718:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3714      	adds	r7, #20
 8010720:	46bd      	mov	sp, r7
 8010722:	bd90      	pop	{r4, r7, pc}
 8010724:	080162f0 	.word	0x080162f0
 8010728:	08016990 	.word	0x08016990
 801072c:	08016344 	.word	0x08016344

08010730 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d106      	bne.n	801074c <tcp_rexmit_fast+0x1c>
 801073e:	4b2f      	ldr	r3, [pc, #188]	; (80107fc <tcp_rexmit_fast+0xcc>)
 8010740:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010744:	492e      	ldr	r1, [pc, #184]	; (8010800 <tcp_rexmit_fast+0xd0>)
 8010746:	482f      	ldr	r0, [pc, #188]	; (8010804 <tcp_rexmit_fast+0xd4>)
 8010748:	f003 faa4 	bl	8013c94 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010750:	2b00      	cmp	r3, #0
 8010752:	d04f      	beq.n	80107f4 <tcp_rexmit_fast+0xc4>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	8b5b      	ldrh	r3, [r3, #26]
 8010758:	f003 0304 	and.w	r3, r3, #4
 801075c:	2b00      	cmp	r3, #0
 801075e:	d149      	bne.n	80107f4 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f7ff ff79 	bl	8010658 <tcp_rexmit>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	d143      	bne.n	80107f4 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010778:	429a      	cmp	r2, r3
 801077a:	d208      	bcs.n	801078e <tcp_rexmit_fast+0x5e>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010782:	2b00      	cmp	r3, #0
 8010784:	da00      	bge.n	8010788 <tcp_rexmit_fast+0x58>
 8010786:	3301      	adds	r3, #1
 8010788:	105b      	asrs	r3, r3, #1
 801078a:	b29b      	uxth	r3, r3
 801078c:	e007      	b.n	801079e <tcp_rexmit_fast+0x6e>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010794:	2b00      	cmp	r3, #0
 8010796:	da00      	bge.n	801079a <tcp_rexmit_fast+0x6a>
 8010798:	3301      	adds	r3, #1
 801079a:	105b      	asrs	r3, r3, #1
 801079c:	b29b      	uxth	r3, r3
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80107aa:	461a      	mov	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107b0:	005b      	lsls	r3, r3, #1
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d206      	bcs.n	80107c4 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107ba:	005b      	lsls	r3, r3, #1
 80107bc:	b29a      	uxth	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107ce:	4619      	mov	r1, r3
 80107d0:	0049      	lsls	r1, r1, #1
 80107d2:	440b      	add	r3, r1
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	4413      	add	r3, r2
 80107d8:	b29a      	uxth	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	8b5b      	ldrh	r3, [r3, #26]
 80107e4:	f043 0304 	orr.w	r3, r3, #4
 80107e8:	b29a      	uxth	r2, r3
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80107f4:	bf00      	nop
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	080162f0 	.word	0x080162f0
 8010800:	080169a8 	.word	0x080169a8
 8010804:	08016344 	.word	0x08016344

08010808 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	607b      	str	r3, [r7, #4]
 8010812:	460b      	mov	r3, r1
 8010814:	817b      	strh	r3, [r7, #10]
 8010816:	4613      	mov	r3, r2
 8010818:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801081a:	897a      	ldrh	r2, [r7, #10]
 801081c:	893b      	ldrh	r3, [r7, #8]
 801081e:	4413      	add	r3, r2
 8010820:	b29b      	uxth	r3, r3
 8010822:	3314      	adds	r3, #20
 8010824:	b29b      	uxth	r3, r3
 8010826:	f44f 7220 	mov.w	r2, #640	; 0x280
 801082a:	4619      	mov	r1, r3
 801082c:	2022      	movs	r0, #34	; 0x22
 801082e:	f7fa fc13 	bl	800b058 <pbuf_alloc>
 8010832:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d04e      	beq.n	80108d8 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	895b      	ldrh	r3, [r3, #10]
 801083e:	461a      	mov	r2, r3
 8010840:	897b      	ldrh	r3, [r7, #10]
 8010842:	3314      	adds	r3, #20
 8010844:	429a      	cmp	r2, r3
 8010846:	da06      	bge.n	8010856 <tcp_output_alloc_header_common+0x4e>
 8010848:	4b26      	ldr	r3, [pc, #152]	; (80108e4 <tcp_output_alloc_header_common+0xdc>)
 801084a:	f240 7224 	movw	r2, #1828	; 0x724
 801084e:	4926      	ldr	r1, [pc, #152]	; (80108e8 <tcp_output_alloc_header_common+0xe0>)
 8010850:	4826      	ldr	r0, [pc, #152]	; (80108ec <tcp_output_alloc_header_common+0xe4>)
 8010852:	f003 fa1f 	bl	8013c94 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801085c:	8c3b      	ldrh	r3, [r7, #32]
 801085e:	4618      	mov	r0, r3
 8010860:	f7f9 fbaa 	bl	8009fb8 <lwip_htons>
 8010864:	4603      	mov	r3, r0
 8010866:	461a      	mov	r2, r3
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801086c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801086e:	4618      	mov	r0, r3
 8010870:	f7f9 fba2 	bl	8009fb8 <lwip_htons>
 8010874:	4603      	mov	r3, r0
 8010876:	461a      	mov	r2, r3
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f7f9 fbad 	bl	8009fe2 <lwip_htonl>
 8010888:	4602      	mov	r2, r0
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801088e:	897b      	ldrh	r3, [r7, #10]
 8010890:	089b      	lsrs	r3, r3, #2
 8010892:	b29b      	uxth	r3, r3
 8010894:	3305      	adds	r3, #5
 8010896:	b29b      	uxth	r3, r3
 8010898:	031b      	lsls	r3, r3, #12
 801089a:	b29a      	uxth	r2, r3
 801089c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	4313      	orrs	r3, r2
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7f9 fb86 	bl	8009fb8 <lwip_htons>
 80108ac:	4603      	mov	r3, r0
 80108ae:	461a      	mov	r2, r3
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80108b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7f9 fb7e 	bl	8009fb8 <lwip_htons>
 80108bc:	4603      	mov	r3, r0
 80108be:	461a      	mov	r2, r3
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	2200      	movs	r2, #0
 80108c8:	741a      	strb	r2, [r3, #16]
 80108ca:	2200      	movs	r2, #0
 80108cc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	2200      	movs	r2, #0
 80108d2:	749a      	strb	r2, [r3, #18]
 80108d4:	2200      	movs	r2, #0
 80108d6:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80108d8:	697b      	ldr	r3, [r7, #20]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3718      	adds	r7, #24
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
 80108e2:	bf00      	nop
 80108e4:	080162f0 	.word	0x080162f0
 80108e8:	080169c8 	.word	0x080169c8
 80108ec:	08016344 	.word	0x08016344

080108f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80108f0:	b5b0      	push	{r4, r5, r7, lr}
 80108f2:	b08a      	sub	sp, #40	; 0x28
 80108f4:	af04      	add	r7, sp, #16
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	607b      	str	r3, [r7, #4]
 80108fa:	460b      	mov	r3, r1
 80108fc:	817b      	strh	r3, [r7, #10]
 80108fe:	4613      	mov	r3, r2
 8010900:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d106      	bne.n	8010916 <tcp_output_alloc_header+0x26>
 8010908:	4b15      	ldr	r3, [pc, #84]	; (8010960 <tcp_output_alloc_header+0x70>)
 801090a:	f240 7242 	movw	r2, #1858	; 0x742
 801090e:	4915      	ldr	r1, [pc, #84]	; (8010964 <tcp_output_alloc_header+0x74>)
 8010910:	4815      	ldr	r0, [pc, #84]	; (8010968 <tcp_output_alloc_header+0x78>)
 8010912:	f003 f9bf 	bl	8013c94 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	8adb      	ldrh	r3, [r3, #22]
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	8b12      	ldrh	r2, [r2, #24]
 8010922:	68f9      	ldr	r1, [r7, #12]
 8010924:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010926:	893d      	ldrh	r5, [r7, #8]
 8010928:	897c      	ldrh	r4, [r7, #10]
 801092a:	9103      	str	r1, [sp, #12]
 801092c:	2110      	movs	r1, #16
 801092e:	9102      	str	r1, [sp, #8]
 8010930:	9201      	str	r2, [sp, #4]
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	462a      	mov	r2, r5
 8010938:	4621      	mov	r1, r4
 801093a:	f7ff ff65 	bl	8010808 <tcp_output_alloc_header_common>
 801093e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d006      	beq.n	8010954 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801094e:	441a      	add	r2, r3
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010954:	697b      	ldr	r3, [r7, #20]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3718      	adds	r7, #24
 801095a:	46bd      	mov	sp, r7
 801095c:	bdb0      	pop	{r4, r5, r7, pc}
 801095e:	bf00      	nop
 8010960:	080162f0 	.word	0x080162f0
 8010964:	080169f8 	.word	0x080169f8
 8010968:	08016344 	.word	0x08016344

0801096c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b088      	sub	sp, #32
 8010970:	af00      	add	r7, sp, #0
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	4611      	mov	r1, r2
 8010978:	461a      	mov	r2, r3
 801097a:	460b      	mov	r3, r1
 801097c:	71fb      	strb	r3, [r7, #7]
 801097e:	4613      	mov	r3, r2
 8010980:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d106      	bne.n	801099a <tcp_output_fill_options+0x2e>
 801098c:	4b13      	ldr	r3, [pc, #76]	; (80109dc <tcp_output_fill_options+0x70>)
 801098e:	f240 7256 	movw	r2, #1878	; 0x756
 8010992:	4913      	ldr	r1, [pc, #76]	; (80109e0 <tcp_output_fill_options+0x74>)
 8010994:	4813      	ldr	r0, [pc, #76]	; (80109e4 <tcp_output_fill_options+0x78>)
 8010996:	f003 f97d 	bl	8013c94 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80109a0:	69bb      	ldr	r3, [r7, #24]
 80109a2:	3314      	adds	r3, #20
 80109a4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	f103 0214 	add.w	r2, r3, #20
 80109ac:	8bfb      	ldrh	r3, [r7, #30]
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	4619      	mov	r1, r3
 80109b2:	79fb      	ldrb	r3, [r7, #7]
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	f003 0304 	and.w	r3, r3, #4
 80109ba:	440b      	add	r3, r1
 80109bc:	4413      	add	r3, r2
 80109be:	697a      	ldr	r2, [r7, #20]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d006      	beq.n	80109d2 <tcp_output_fill_options+0x66>
 80109c4:	4b05      	ldr	r3, [pc, #20]	; (80109dc <tcp_output_fill_options+0x70>)
 80109c6:	f240 7275 	movw	r2, #1909	; 0x775
 80109ca:	4907      	ldr	r1, [pc, #28]	; (80109e8 <tcp_output_fill_options+0x7c>)
 80109cc:	4805      	ldr	r0, [pc, #20]	; (80109e4 <tcp_output_fill_options+0x78>)
 80109ce:	f003 f961 	bl	8013c94 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80109d2:	bf00      	nop
 80109d4:	3720      	adds	r7, #32
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	080162f0 	.word	0x080162f0
 80109e0:	08016a20 	.word	0x08016a20
 80109e4:	08016344 	.word	0x08016344
 80109e8:	08016918 	.word	0x08016918

080109ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b08a      	sub	sp, #40	; 0x28
 80109f0:	af04      	add	r7, sp, #16
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	607a      	str	r2, [r7, #4]
 80109f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d106      	bne.n	8010a0e <tcp_output_control_segment+0x22>
 8010a00:	4b1c      	ldr	r3, [pc, #112]	; (8010a74 <tcp_output_control_segment+0x88>)
 8010a02:	f240 7287 	movw	r2, #1927	; 0x787
 8010a06:	491c      	ldr	r1, [pc, #112]	; (8010a78 <tcp_output_control_segment+0x8c>)
 8010a08:	481c      	ldr	r0, [pc, #112]	; (8010a7c <tcp_output_control_segment+0x90>)
 8010a0a:	f003 f943 	bl	8013c94 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010a0e:	683a      	ldr	r2, [r7, #0]
 8010a10:	6879      	ldr	r1, [r7, #4]
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f7fe ff2e 	bl	800f874 <tcp_route>
 8010a18:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d102      	bne.n	8010a26 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010a20:	23fc      	movs	r3, #252	; 0xfc
 8010a22:	75fb      	strb	r3, [r7, #23]
 8010a24:	e01c      	b.n	8010a60 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d006      	beq.n	8010a3a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	7adb      	ldrb	r3, [r3, #11]
 8010a30:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	7a9b      	ldrb	r3, [r3, #10]
 8010a36:	757b      	strb	r3, [r7, #21]
 8010a38:	e003      	b.n	8010a42 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010a3a:	23ff      	movs	r3, #255	; 0xff
 8010a3c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010a42:	7dba      	ldrb	r2, [r7, #22]
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	9302      	str	r3, [sp, #8]
 8010a48:	2306      	movs	r3, #6
 8010a4a:	9301      	str	r3, [sp, #4]
 8010a4c:	7d7b      	ldrb	r3, [r7, #21]
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	4613      	mov	r3, r2
 8010a52:	683a      	ldr	r2, [r7, #0]
 8010a54:	6879      	ldr	r1, [r7, #4]
 8010a56:	68b8      	ldr	r0, [r7, #8]
 8010a58:	f001 ff9c 	bl	8012994 <ip4_output_if>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010a60:	68b8      	ldr	r0, [r7, #8]
 8010a62:	f7fa fdd9 	bl	800b618 <pbuf_free>
  return err;
 8010a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3718      	adds	r7, #24
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	080162f0 	.word	0x080162f0
 8010a78:	08016a48 	.word	0x08016a48
 8010a7c:	08016344 	.word	0x08016344

08010a80 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010a80:	b590      	push	{r4, r7, lr}
 8010a82:	b08b      	sub	sp, #44	; 0x2c
 8010a84:	af04      	add	r7, sp, #16
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d106      	bne.n	8010aa2 <tcp_rst+0x22>
 8010a94:	4b1f      	ldr	r3, [pc, #124]	; (8010b14 <tcp_rst+0x94>)
 8010a96:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010a9a:	491f      	ldr	r1, [pc, #124]	; (8010b18 <tcp_rst+0x98>)
 8010a9c:	481f      	ldr	r0, [pc, #124]	; (8010b1c <tcp_rst+0x9c>)
 8010a9e:	f003 f8f9 	bl	8013c94 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d106      	bne.n	8010ab6 <tcp_rst+0x36>
 8010aa8:	4b1a      	ldr	r3, [pc, #104]	; (8010b14 <tcp_rst+0x94>)
 8010aaa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010aae:	491c      	ldr	r1, [pc, #112]	; (8010b20 <tcp_rst+0xa0>)
 8010ab0:	481a      	ldr	r0, [pc, #104]	; (8010b1c <tcp_rst+0x9c>)
 8010ab2:	f003 f8ef 	bl	8013c94 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010aba:	f246 0308 	movw	r3, #24584	; 0x6008
 8010abe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010ac0:	7dfb      	ldrb	r3, [r7, #23]
 8010ac2:	b29c      	uxth	r4, r3
 8010ac4:	68b8      	ldr	r0, [r7, #8]
 8010ac6:	f7f9 fa8c 	bl	8009fe2 <lwip_htonl>
 8010aca:	4602      	mov	r2, r0
 8010acc:	8abb      	ldrh	r3, [r7, #20]
 8010ace:	9303      	str	r3, [sp, #12]
 8010ad0:	2314      	movs	r3, #20
 8010ad2:	9302      	str	r3, [sp, #8]
 8010ad4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	4613      	mov	r3, r2
 8010ade:	2200      	movs	r2, #0
 8010ae0:	4621      	mov	r1, r4
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7ff fe90 	bl	8010808 <tcp_output_alloc_header_common>
 8010ae8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00c      	beq.n	8010b0a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010af0:	7dfb      	ldrb	r3, [r7, #23]
 8010af2:	2200      	movs	r2, #0
 8010af4:	6939      	ldr	r1, [r7, #16]
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f7ff ff38 	bl	801096c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010afe:	683a      	ldr	r2, [r7, #0]
 8010b00:	6939      	ldr	r1, [r7, #16]
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f7ff ff72 	bl	80109ec <tcp_output_control_segment>
 8010b08:	e000      	b.n	8010b0c <tcp_rst+0x8c>
    return;
 8010b0a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010b0c:	371c      	adds	r7, #28
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd90      	pop	{r4, r7, pc}
 8010b12:	bf00      	nop
 8010b14:	080162f0 	.word	0x080162f0
 8010b18:	08016a74 	.word	0x08016a74
 8010b1c:	08016344 	.word	0x08016344
 8010b20:	08016a90 	.word	0x08016a90

08010b24 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010b24:	b590      	push	{r4, r7, lr}
 8010b26:	b087      	sub	sp, #28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010b30:	2300      	movs	r3, #0
 8010b32:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d106      	bne.n	8010b48 <tcp_send_empty_ack+0x24>
 8010b3a:	4b28      	ldr	r3, [pc, #160]	; (8010bdc <tcp_send_empty_ack+0xb8>)
 8010b3c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010b40:	4927      	ldr	r1, [pc, #156]	; (8010be0 <tcp_send_empty_ack+0xbc>)
 8010b42:	4828      	ldr	r0, [pc, #160]	; (8010be4 <tcp_send_empty_ack+0xc0>)
 8010b44:	f003 f8a6 	bl	8013c94 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b48:	7dfb      	ldrb	r3, [r7, #23]
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	f003 0304 	and.w	r3, r3, #4
 8010b52:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010b54:	7d7b      	ldrb	r3, [r7, #21]
 8010b56:	b29c      	uxth	r4, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7f9 fa40 	bl	8009fe2 <lwip_htonl>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2200      	movs	r2, #0
 8010b66:	4621      	mov	r1, r4
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7ff fec1 	bl	80108f0 <tcp_output_alloc_header>
 8010b6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d109      	bne.n	8010b8a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	8b5b      	ldrh	r3, [r3, #26]
 8010b7a:	f043 0303 	orr.w	r3, r3, #3
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010b84:	f06f 0301 	mvn.w	r3, #1
 8010b88:	e023      	b.n	8010bd2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010b8a:	7dbb      	ldrb	r3, [r7, #22]
 8010b8c:	7dfa      	ldrb	r2, [r7, #23]
 8010b8e:	6939      	ldr	r1, [r7, #16]
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7ff feeb 	bl	801096c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3304      	adds	r3, #4
 8010b9c:	6939      	ldr	r1, [r7, #16]
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f7ff ff24 	bl	80109ec <tcp_output_control_segment>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d007      	beq.n	8010bc0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	8b5b      	ldrh	r3, [r3, #26]
 8010bb4:	f043 0303 	orr.w	r3, r3, #3
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	835a      	strh	r2, [r3, #26]
 8010bbe:	e006      	b.n	8010bce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	8b5b      	ldrh	r3, [r3, #26]
 8010bc4:	f023 0303 	bic.w	r3, r3, #3
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	371c      	adds	r7, #28
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd90      	pop	{r4, r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	080162f0 	.word	0x080162f0
 8010be0:	08016aac 	.word	0x08016aac
 8010be4:	08016344 	.word	0x08016344

08010be8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010be8:	b590      	push	{r4, r7, lr}
 8010bea:	b087      	sub	sp, #28
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d106      	bne.n	8010c08 <tcp_keepalive+0x20>
 8010bfa:	4b18      	ldr	r3, [pc, #96]	; (8010c5c <tcp_keepalive+0x74>)
 8010bfc:	f640 0224 	movw	r2, #2084	; 0x824
 8010c00:	4917      	ldr	r1, [pc, #92]	; (8010c60 <tcp_keepalive+0x78>)
 8010c02:	4818      	ldr	r0, [pc, #96]	; (8010c64 <tcp_keepalive+0x7c>)
 8010c04:	f003 f846 	bl	8013c94 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010c08:	7dfb      	ldrb	r3, [r7, #23]
 8010c0a:	b29c      	uxth	r4, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c10:	3b01      	subs	r3, #1
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7f9 f9e5 	bl	8009fe2 <lwip_htonl>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f7ff fe66 	bl	80108f0 <tcp_output_alloc_header>
 8010c24:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d102      	bne.n	8010c32 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c30:	e010      	b.n	8010c54 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010c32:	7dfb      	ldrb	r3, [r7, #23]
 8010c34:	2200      	movs	r2, #0
 8010c36:	6939      	ldr	r1, [r7, #16]
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7ff fe97 	bl	801096c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	3304      	adds	r3, #4
 8010c44:	6939      	ldr	r1, [r7, #16]
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff fed0 	bl	80109ec <tcp_output_control_segment>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	371c      	adds	r7, #28
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd90      	pop	{r4, r7, pc}
 8010c5c:	080162f0 	.word	0x080162f0
 8010c60:	08016acc 	.word	0x08016acc
 8010c64:	08016344 	.word	0x08016344

08010c68 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010c68:	b590      	push	{r4, r7, lr}
 8010c6a:	b08b      	sub	sp, #44	; 0x2c
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c70:	2300      	movs	r3, #0
 8010c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d106      	bne.n	8010c8a <tcp_zero_window_probe+0x22>
 8010c7c:	4b4c      	ldr	r3, [pc, #304]	; (8010db0 <tcp_zero_window_probe+0x148>)
 8010c7e:	f640 024f 	movw	r2, #2127	; 0x84f
 8010c82:	494c      	ldr	r1, [pc, #304]	; (8010db4 <tcp_zero_window_probe+0x14c>)
 8010c84:	484c      	ldr	r0, [pc, #304]	; (8010db8 <tcp_zero_window_probe+0x150>)
 8010c86:	f003 f805 	bl	8013c94 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c8e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010c90:	6a3b      	ldr	r3, [r7, #32]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d101      	bne.n	8010c9a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010c96:	2300      	movs	r3, #0
 8010c98:	e086      	b.n	8010da8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010ca0:	2bff      	cmp	r3, #255	; 0xff
 8010ca2:	d007      	beq.n	8010cb4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010caa:	3301      	adds	r3, #1
 8010cac:	b2da      	uxtb	r2, r3
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010cb4:	6a3b      	ldr	r3, [r7, #32]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	899b      	ldrh	r3, [r3, #12]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7f9 f97b 	bl	8009fb8 <lwip_htons>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d005      	beq.n	8010cda <tcp_zero_window_probe+0x72>
 8010cce:	6a3b      	ldr	r3, [r7, #32]
 8010cd0:	891b      	ldrh	r3, [r3, #8]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d101      	bne.n	8010cda <tcp_zero_window_probe+0x72>
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	e000      	b.n	8010cdc <tcp_zero_window_probe+0x74>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010cde:	7ffb      	ldrb	r3, [r7, #31]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	bf0c      	ite	eq
 8010ce4:	2301      	moveq	r3, #1
 8010ce6:	2300      	movne	r3, #0
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cf0:	b299      	uxth	r1, r3
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	8bba      	ldrh	r2, [r7, #28]
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7ff fdf8 	bl	80108f0 <tcp_output_alloc_header>
 8010d00:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010d02:	69bb      	ldr	r3, [r7, #24]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d102      	bne.n	8010d0e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010d08:	f04f 33ff 	mov.w	r3, #4294967295
 8010d0c:	e04c      	b.n	8010da8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010d14:	7ffb      	ldrb	r3, [r7, #31]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d011      	beq.n	8010d3e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	899b      	ldrh	r3, [r3, #12]
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	b21b      	sxth	r3, r3
 8010d22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010d26:	b21c      	sxth	r4, r3
 8010d28:	2011      	movs	r0, #17
 8010d2a:	f7f9 f945 	bl	8009fb8 <lwip_htons>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	b21b      	sxth	r3, r3
 8010d32:	4323      	orrs	r3, r4
 8010d34:	b21b      	sxth	r3, r3
 8010d36:	b29a      	uxth	r2, r3
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	819a      	strh	r2, [r3, #12]
 8010d3c:	e010      	b.n	8010d60 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	3314      	adds	r3, #20
 8010d44:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010d46:	6a3b      	ldr	r3, [r7, #32]
 8010d48:	6858      	ldr	r0, [r3, #4]
 8010d4a:	6a3b      	ldr	r3, [r7, #32]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	891a      	ldrh	r2, [r3, #8]
 8010d50:	6a3b      	ldr	r3, [r7, #32]
 8010d52:	891b      	ldrh	r3, [r3, #8]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	2201      	movs	r2, #1
 8010d5a:	6939      	ldr	r1, [r7, #16]
 8010d5c:	f7fa fe52 	bl	800ba04 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010d60:	6a3b      	ldr	r3, [r7, #32]
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7f9 f93b 	bl	8009fe2 <lwip_htonl>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	3301      	adds	r3, #1
 8010d70:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	da02      	bge.n	8010d84 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	68fa      	ldr	r2, [r7, #12]
 8010d82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d88:	2200      	movs	r2, #0
 8010d8a:	69b9      	ldr	r1, [r7, #24]
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7ff fded 	bl	801096c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	3304      	adds	r3, #4
 8010d98:	69b9      	ldr	r1, [r7, #24]
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f7ff fe26 	bl	80109ec <tcp_output_control_segment>
 8010da0:	4603      	mov	r3, r0
 8010da2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010da4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	372c      	adds	r7, #44	; 0x2c
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd90      	pop	{r4, r7, pc}
 8010db0:	080162f0 	.word	0x080162f0
 8010db4:	08016ae8 	.word	0x08016ae8
 8010db8:	08016344 	.word	0x08016344

08010dbc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010dc4:	f7fa ff0c 	bl	800bbe0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010dc8:	4b0a      	ldr	r3, [pc, #40]	; (8010df4 <tcpip_tcp_timer+0x38>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d103      	bne.n	8010dd8 <tcpip_tcp_timer+0x1c>
 8010dd0:	4b09      	ldr	r3, [pc, #36]	; (8010df8 <tcpip_tcp_timer+0x3c>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d005      	beq.n	8010de4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010dd8:	2200      	movs	r2, #0
 8010dda:	4908      	ldr	r1, [pc, #32]	; (8010dfc <tcpip_tcp_timer+0x40>)
 8010ddc:	20fa      	movs	r0, #250	; 0xfa
 8010dde:	f000 f8f1 	bl	8010fc4 <sys_timeout>
 8010de2:	e002      	b.n	8010dea <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010de4:	4b06      	ldr	r3, [pc, #24]	; (8010e00 <tcpip_tcp_timer+0x44>)
 8010de6:	2200      	movs	r2, #0
 8010de8:	601a      	str	r2, [r3, #0]
  }
}
 8010dea:	bf00      	nop
 8010dec:	3708      	adds	r7, #8
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	bf00      	nop
 8010df4:	20015ed4 	.word	0x20015ed4
 8010df8:	20015ee4 	.word	0x20015ee4
 8010dfc:	08010dbd 	.word	0x08010dbd
 8010e00:	2000ef34 	.word	0x2000ef34

08010e04 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010e08:	4b0a      	ldr	r3, [pc, #40]	; (8010e34 <tcp_timer_needed+0x30>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d10f      	bne.n	8010e30 <tcp_timer_needed+0x2c>
 8010e10:	4b09      	ldr	r3, [pc, #36]	; (8010e38 <tcp_timer_needed+0x34>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d103      	bne.n	8010e20 <tcp_timer_needed+0x1c>
 8010e18:	4b08      	ldr	r3, [pc, #32]	; (8010e3c <tcp_timer_needed+0x38>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d007      	beq.n	8010e30 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010e20:	4b04      	ldr	r3, [pc, #16]	; (8010e34 <tcp_timer_needed+0x30>)
 8010e22:	2201      	movs	r2, #1
 8010e24:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010e26:	2200      	movs	r2, #0
 8010e28:	4905      	ldr	r1, [pc, #20]	; (8010e40 <tcp_timer_needed+0x3c>)
 8010e2a:	20fa      	movs	r0, #250	; 0xfa
 8010e2c:	f000 f8ca 	bl	8010fc4 <sys_timeout>
  }
}
 8010e30:	bf00      	nop
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	2000ef34 	.word	0x2000ef34
 8010e38:	20015ed4 	.word	0x20015ed4
 8010e3c:	20015ee4 	.word	0x20015ee4
 8010e40:	08010dbd 	.word	0x08010dbd

08010e44 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b086      	sub	sp, #24
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	60b9      	str	r1, [r7, #8]
 8010e4e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010e50:	200a      	movs	r0, #10
 8010e52:	f7f9 fd67 	bl	800a924 <memp_malloc>
 8010e56:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d109      	bne.n	8010e72 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d151      	bne.n	8010f08 <sys_timeout_abs+0xc4>
 8010e64:	4b2a      	ldr	r3, [pc, #168]	; (8010f10 <sys_timeout_abs+0xcc>)
 8010e66:	22be      	movs	r2, #190	; 0xbe
 8010e68:	492a      	ldr	r1, [pc, #168]	; (8010f14 <sys_timeout_abs+0xd0>)
 8010e6a:	482b      	ldr	r0, [pc, #172]	; (8010f18 <sys_timeout_abs+0xd4>)
 8010e6c:	f002 ff12 	bl	8013c94 <iprintf>
    return;
 8010e70:	e04a      	b.n	8010f08 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	2200      	movs	r2, #0
 8010e76:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	68ba      	ldr	r2, [r7, #8]
 8010e7c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	68fa      	ldr	r2, [r7, #12]
 8010e88:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010e8a:	4b24      	ldr	r3, [pc, #144]	; (8010f1c <sys_timeout_abs+0xd8>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d103      	bne.n	8010e9a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010e92:	4a22      	ldr	r2, [pc, #136]	; (8010f1c <sys_timeout_abs+0xd8>)
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	6013      	str	r3, [r2, #0]
    return;
 8010e98:	e037      	b.n	8010f0a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	4b1f      	ldr	r3, [pc, #124]	; (8010f1c <sys_timeout_abs+0xd8>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	1ad3      	subs	r3, r2, r3
 8010ea6:	0fdb      	lsrs	r3, r3, #31
 8010ea8:	f003 0301 	and.w	r3, r3, #1
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d007      	beq.n	8010ec2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010eb2:	4b1a      	ldr	r3, [pc, #104]	; (8010f1c <sys_timeout_abs+0xd8>)
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010eba:	4a18      	ldr	r2, [pc, #96]	; (8010f1c <sys_timeout_abs+0xd8>)
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	6013      	str	r3, [r2, #0]
 8010ec0:	e023      	b.n	8010f0a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010ec2:	4b16      	ldr	r3, [pc, #88]	; (8010f1c <sys_timeout_abs+0xd8>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	617b      	str	r3, [r7, #20]
 8010ec8:	e01a      	b.n	8010f00 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00b      	beq.n	8010eea <sys_timeout_abs+0xa6>
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	685a      	ldr	r2, [r3, #4]
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	1ad3      	subs	r3, r2, r3
 8010ede:	0fdb      	lsrs	r3, r3, #31
 8010ee0:	f003 0301 	and.w	r3, r3, #1
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d007      	beq.n	8010efa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	693a      	ldr	r2, [r7, #16]
 8010ef6:	601a      	str	r2, [r3, #0]
        break;
 8010ef8:	e007      	b.n	8010f0a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	617b      	str	r3, [r7, #20]
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1e1      	bne.n	8010eca <sys_timeout_abs+0x86>
 8010f06:	e000      	b.n	8010f0a <sys_timeout_abs+0xc6>
    return;
 8010f08:	bf00      	nop
      }
    }
  }
}
 8010f0a:	3718      	adds	r7, #24
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	08016b0c 	.word	0x08016b0c
 8010f14:	08016b40 	.word	0x08016b40
 8010f18:	08016b80 	.word	0x08016b80
 8010f1c:	2000ef2c 	.word	0x2000ef2c

08010f20 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b086      	sub	sp, #24
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	4798      	blx	r3

  now = sys_now();
 8010f32:	f7f5 ff79 	bl	8006e28 <sys_now>
 8010f36:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	4b0f      	ldr	r3, [pc, #60]	; (8010f7c <lwip_cyclic_timer+0x5c>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4413      	add	r3, r2
 8010f42:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	0fdb      	lsrs	r3, r3, #31
 8010f4c:	f003 0301 	and.w	r3, r3, #1
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d009      	beq.n	8010f6a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	4907      	ldr	r1, [pc, #28]	; (8010f80 <lwip_cyclic_timer+0x60>)
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff ff6e 	bl	8010e44 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010f68:	e004      	b.n	8010f74 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	4904      	ldr	r1, [pc, #16]	; (8010f80 <lwip_cyclic_timer+0x60>)
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f7ff ff68 	bl	8010e44 <sys_timeout_abs>
}
 8010f74:	bf00      	nop
 8010f76:	3718      	adds	r7, #24
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	2000ef30 	.word	0x2000ef30
 8010f80:	08010f21 	.word	0x08010f21

08010f84 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	607b      	str	r3, [r7, #4]
 8010f8e:	e00e      	b.n	8010fae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010f90:	4a0a      	ldr	r2, [pc, #40]	; (8010fbc <sys_timeouts_init+0x38>)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	00db      	lsls	r3, r3, #3
 8010f9c:	4a07      	ldr	r2, [pc, #28]	; (8010fbc <sys_timeouts_init+0x38>)
 8010f9e:	4413      	add	r3, r2
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	4907      	ldr	r1, [pc, #28]	; (8010fc0 <sys_timeouts_init+0x3c>)
 8010fa4:	f000 f80e 	bl	8010fc4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	3301      	adds	r3, #1
 8010fac:	607b      	str	r3, [r7, #4]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2b02      	cmp	r3, #2
 8010fb2:	d9ed      	bls.n	8010f90 <sys_timeouts_init+0xc>
  }
}
 8010fb4:	bf00      	nop
 8010fb6:	3708      	adds	r7, #8
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	0801772c 	.word	0x0801772c
 8010fc0:	08010f21 	.word	0x08010f21

08010fc4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fd6:	d306      	bcc.n	8010fe6 <sys_timeout+0x22>
 8010fd8:	4b0a      	ldr	r3, [pc, #40]	; (8011004 <sys_timeout+0x40>)
 8010fda:	f240 1229 	movw	r2, #297	; 0x129
 8010fde:	490a      	ldr	r1, [pc, #40]	; (8011008 <sys_timeout+0x44>)
 8010fe0:	480a      	ldr	r0, [pc, #40]	; (801100c <sys_timeout+0x48>)
 8010fe2:	f002 fe57 	bl	8013c94 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010fe6:	f7f5 ff1f 	bl	8006e28 <sys_now>
 8010fea:	4602      	mov	r2, r0
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	4413      	add	r3, r2
 8010ff0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	68b9      	ldr	r1, [r7, #8]
 8010ff6:	6978      	ldr	r0, [r7, #20]
 8010ff8:	f7ff ff24 	bl	8010e44 <sys_timeout_abs>
#endif
}
 8010ffc:	bf00      	nop
 8010ffe:	3718      	adds	r7, #24
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	08016b0c 	.word	0x08016b0c
 8011008:	08016ba8 	.word	0x08016ba8
 801100c:	08016b80 	.word	0x08016b80

08011010 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011016:	f7f5 ff07 	bl	8006e28 <sys_now>
 801101a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801101c:	4b17      	ldr	r3, [pc, #92]	; (801107c <sys_check_timeouts+0x6c>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d022      	beq.n	801106e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	68fa      	ldr	r2, [r7, #12]
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	0fdb      	lsrs	r3, r3, #31
 8011032:	f003 0301 	and.w	r3, r3, #1
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2b00      	cmp	r3, #0
 801103a:	d11a      	bne.n	8011072 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	4a0e      	ldr	r2, [pc, #56]	; (801107c <sys_check_timeouts+0x6c>)
 8011042:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	4a0a      	ldr	r2, [pc, #40]	; (8011080 <sys_check_timeouts+0x70>)
 8011056:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011058:	68b9      	ldr	r1, [r7, #8]
 801105a:	200a      	movs	r0, #10
 801105c:	f7f9 fcb4 	bl	800a9c8 <memp_free>
    if (handler != NULL) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d0da      	beq.n	801101c <sys_check_timeouts+0xc>
      handler(arg);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6838      	ldr	r0, [r7, #0]
 801106a:	4798      	blx	r3
  do {
 801106c:	e7d6      	b.n	801101c <sys_check_timeouts+0xc>
      return;
 801106e:	bf00      	nop
 8011070:	e000      	b.n	8011074 <sys_check_timeouts+0x64>
      return;
 8011072:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	2000ef2c 	.word	0x2000ef2c
 8011080:	2000ef30 	.word	0x2000ef30

08011084 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801108a:	4b16      	ldr	r3, [pc, #88]	; (80110e4 <sys_timeouts_sleeptime+0x60>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d102      	bne.n	8011098 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011092:	f04f 33ff 	mov.w	r3, #4294967295
 8011096:	e020      	b.n	80110da <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011098:	f7f5 fec6 	bl	8006e28 <sys_now>
 801109c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801109e:	4b11      	ldr	r3, [pc, #68]	; (80110e4 <sys_timeouts_sleeptime+0x60>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	685a      	ldr	r2, [r3, #4]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	1ad3      	subs	r3, r2, r3
 80110a8:	0fdb      	lsrs	r3, r3, #31
 80110aa:	f003 0301 	and.w	r3, r3, #1
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d001      	beq.n	80110b8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80110b4:	2300      	movs	r3, #0
 80110b6:	e010      	b.n	80110da <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80110b8:	4b0a      	ldr	r3, [pc, #40]	; (80110e4 <sys_timeouts_sleeptime+0x60>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	685a      	ldr	r2, [r3, #4]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	da06      	bge.n	80110d8 <sys_timeouts_sleeptime+0x54>
 80110ca:	4b07      	ldr	r3, [pc, #28]	; (80110e8 <sys_timeouts_sleeptime+0x64>)
 80110cc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80110d0:	4906      	ldr	r1, [pc, #24]	; (80110ec <sys_timeouts_sleeptime+0x68>)
 80110d2:	4807      	ldr	r0, [pc, #28]	; (80110f0 <sys_timeouts_sleeptime+0x6c>)
 80110d4:	f002 fdde 	bl	8013c94 <iprintf>
    return ret;
 80110d8:	683b      	ldr	r3, [r7, #0]
  }
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	2000ef2c 	.word	0x2000ef2c
 80110e8:	08016b0c 	.word	0x08016b0c
 80110ec:	08016be0 	.word	0x08016be0
 80110f0:	08016b80 	.word	0x08016b80

080110f4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80110f8:	f002 fde4 	bl	8013cc4 <rand>
 80110fc:	4603      	mov	r3, r0
 80110fe:	b29b      	uxth	r3, r3
 8011100:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011104:	b29b      	uxth	r3, r3
 8011106:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801110a:	b29a      	uxth	r2, r3
 801110c:	4b01      	ldr	r3, [pc, #4]	; (8011114 <udp_init+0x20>)
 801110e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011110:	bf00      	nop
 8011112:	bd80      	pop	{r7, pc}
 8011114:	20000018 	.word	0x20000018

08011118 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	60f8      	str	r0, [r7, #12]
 8011120:	60b9      	str	r1, [r7, #8]
 8011122:	4613      	mov	r3, r2
 8011124:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d105      	bne.n	8011138 <udp_input_local_match+0x20>
 801112c:	4b27      	ldr	r3, [pc, #156]	; (80111cc <udp_input_local_match+0xb4>)
 801112e:	2287      	movs	r2, #135	; 0x87
 8011130:	4927      	ldr	r1, [pc, #156]	; (80111d0 <udp_input_local_match+0xb8>)
 8011132:	4828      	ldr	r0, [pc, #160]	; (80111d4 <udp_input_local_match+0xbc>)
 8011134:	f002 fdae 	bl	8013c94 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d105      	bne.n	801114a <udp_input_local_match+0x32>
 801113e:	4b23      	ldr	r3, [pc, #140]	; (80111cc <udp_input_local_match+0xb4>)
 8011140:	2288      	movs	r2, #136	; 0x88
 8011142:	4925      	ldr	r1, [pc, #148]	; (80111d8 <udp_input_local_match+0xc0>)
 8011144:	4823      	ldr	r0, [pc, #140]	; (80111d4 <udp_input_local_match+0xbc>)
 8011146:	f002 fda5 	bl	8013c94 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	7a1b      	ldrb	r3, [r3, #8]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d00b      	beq.n	801116a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	7a1a      	ldrb	r2, [r3, #8]
 8011156:	4b21      	ldr	r3, [pc, #132]	; (80111dc <udp_input_local_match+0xc4>)
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801115e:	3301      	adds	r3, #1
 8011160:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011162:	429a      	cmp	r2, r3
 8011164:	d001      	beq.n	801116a <udp_input_local_match+0x52>
    return 0;
 8011166:	2300      	movs	r3, #0
 8011168:	e02b      	b.n	80111c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801116a:	79fb      	ldrb	r3, [r7, #7]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d018      	beq.n	80111a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d013      	beq.n	801119e <udp_input_local_match+0x86>
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d00f      	beq.n	801119e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801117e:	4b17      	ldr	r3, [pc, #92]	; (80111dc <udp_input_local_match+0xc4>)
 8011180:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011186:	d00a      	beq.n	801119e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	4b13      	ldr	r3, [pc, #76]	; (80111dc <udp_input_local_match+0xc4>)
 801118e:	695b      	ldr	r3, [r3, #20]
 8011190:	405a      	eors	r2, r3
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	3308      	adds	r3, #8
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801119a:	2b00      	cmp	r3, #0
 801119c:	d110      	bne.n	80111c0 <udp_input_local_match+0xa8>
          return 1;
 801119e:	2301      	movs	r3, #1
 80111a0:	e00f      	b.n	80111c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d009      	beq.n	80111bc <udp_input_local_match+0xa4>
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d005      	beq.n	80111bc <udp_input_local_match+0xa4>
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	4b09      	ldr	r3, [pc, #36]	; (80111dc <udp_input_local_match+0xc4>)
 80111b6:	695b      	ldr	r3, [r3, #20]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d101      	bne.n	80111c0 <udp_input_local_match+0xa8>
        return 1;
 80111bc:	2301      	movs	r3, #1
 80111be:	e000      	b.n	80111c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	08016bf4 	.word	0x08016bf4
 80111d0:	08016c24 	.word	0x08016c24
 80111d4:	08016c48 	.word	0x08016c48
 80111d8:	08016c70 	.word	0x08016c70
 80111dc:	200127c0 	.word	0x200127c0

080111e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80111e0:	b590      	push	{r4, r7, lr}
 80111e2:	b08d      	sub	sp, #52	; 0x34
 80111e4:	af02      	add	r7, sp, #8
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80111ea:	2300      	movs	r3, #0
 80111ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d105      	bne.n	8011200 <udp_input+0x20>
 80111f4:	4b7c      	ldr	r3, [pc, #496]	; (80113e8 <udp_input+0x208>)
 80111f6:	22cf      	movs	r2, #207	; 0xcf
 80111f8:	497c      	ldr	r1, [pc, #496]	; (80113ec <udp_input+0x20c>)
 80111fa:	487d      	ldr	r0, [pc, #500]	; (80113f0 <udp_input+0x210>)
 80111fc:	f002 fd4a 	bl	8013c94 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d105      	bne.n	8011212 <udp_input+0x32>
 8011206:	4b78      	ldr	r3, [pc, #480]	; (80113e8 <udp_input+0x208>)
 8011208:	22d0      	movs	r2, #208	; 0xd0
 801120a:	497a      	ldr	r1, [pc, #488]	; (80113f4 <udp_input+0x214>)
 801120c:	4878      	ldr	r0, [pc, #480]	; (80113f0 <udp_input+0x210>)
 801120e:	f002 fd41 	bl	8013c94 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	895b      	ldrh	r3, [r3, #10]
 8011216:	2b07      	cmp	r3, #7
 8011218:	d803      	bhi.n	8011222 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f7fa f9fc 	bl	800b618 <pbuf_free>
    goto end;
 8011220:	e0de      	b.n	80113e0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011228:	4b73      	ldr	r3, [pc, #460]	; (80113f8 <udp_input+0x218>)
 801122a:	695a      	ldr	r2, [r3, #20]
 801122c:	4b72      	ldr	r3, [pc, #456]	; (80113f8 <udp_input+0x218>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f001 fc86 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 8011238:	4603      	mov	r3, r0
 801123a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	881b      	ldrh	r3, [r3, #0]
 8011240:	b29b      	uxth	r3, r3
 8011242:	4618      	mov	r0, r3
 8011244:	f7f8 feb8 	bl	8009fb8 <lwip_htons>
 8011248:	4603      	mov	r3, r0
 801124a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	885b      	ldrh	r3, [r3, #2]
 8011250:	b29b      	uxth	r3, r3
 8011252:	4618      	mov	r0, r3
 8011254:	f7f8 feb0 	bl	8009fb8 <lwip_htons>
 8011258:	4603      	mov	r3, r0
 801125a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801125c:	2300      	movs	r3, #0
 801125e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011260:	2300      	movs	r3, #0
 8011262:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011264:	2300      	movs	r3, #0
 8011266:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011268:	4b64      	ldr	r3, [pc, #400]	; (80113fc <udp_input+0x21c>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	627b      	str	r3, [r7, #36]	; 0x24
 801126e:	e054      	b.n	801131a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	8a5b      	ldrh	r3, [r3, #18]
 8011274:	89fa      	ldrh	r2, [r7, #14]
 8011276:	429a      	cmp	r2, r3
 8011278:	d14a      	bne.n	8011310 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801127a:	7cfb      	ldrb	r3, [r7, #19]
 801127c:	461a      	mov	r2, r3
 801127e:	6839      	ldr	r1, [r7, #0]
 8011280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011282:	f7ff ff49 	bl	8011118 <udp_input_local_match>
 8011286:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011288:	2b00      	cmp	r3, #0
 801128a:	d041      	beq.n	8011310 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128e:	7c1b      	ldrb	r3, [r3, #16]
 8011290:	f003 0304 	and.w	r3, r3, #4
 8011294:	2b00      	cmp	r3, #0
 8011296:	d11d      	bne.n	80112d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011298:	69fb      	ldr	r3, [r7, #28]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d102      	bne.n	80112a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a0:	61fb      	str	r3, [r7, #28]
 80112a2:	e017      	b.n	80112d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80112a4:	7cfb      	ldrb	r3, [r7, #19]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d014      	beq.n	80112d4 <udp_input+0xf4>
 80112aa:	4b53      	ldr	r3, [pc, #332]	; (80113f8 <udp_input+0x218>)
 80112ac:	695b      	ldr	r3, [r3, #20]
 80112ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b2:	d10f      	bne.n	80112d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	3304      	adds	r3, #4
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d008      	beq.n	80112d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80112c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	3304      	adds	r3, #4
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d101      	bne.n	80112d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80112d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80112d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d6:	8a9b      	ldrh	r3, [r3, #20]
 80112d8:	8a3a      	ldrh	r2, [r7, #16]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d118      	bne.n	8011310 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80112de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d005      	beq.n	80112f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80112e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e8:	685a      	ldr	r2, [r3, #4]
 80112ea:	4b43      	ldr	r3, [pc, #268]	; (80113f8 <udp_input+0x218>)
 80112ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d10e      	bne.n	8011310 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80112f2:	6a3b      	ldr	r3, [r7, #32]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d014      	beq.n	8011322 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80112f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fa:	68da      	ldr	r2, [r3, #12]
 80112fc:	6a3b      	ldr	r3, [r7, #32]
 80112fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011300:	4b3e      	ldr	r3, [pc, #248]	; (80113fc <udp_input+0x21c>)
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011308:	4a3c      	ldr	r2, [pc, #240]	; (80113fc <udp_input+0x21c>)
 801130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801130e:	e008      	b.n	8011322 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011312:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	627b      	str	r3, [r7, #36]	; 0x24
 801131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1a7      	bne.n	8011270 <udp_input+0x90>
 8011320:	e000      	b.n	8011324 <udp_input+0x144>
        break;
 8011322:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011326:	2b00      	cmp	r3, #0
 8011328:	d101      	bne.n	801132e <udp_input+0x14e>
    pcb = uncon_pcb;
 801132a:	69fb      	ldr	r3, [r7, #28]
 801132c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011330:	2b00      	cmp	r3, #0
 8011332:	d002      	beq.n	801133a <udp_input+0x15a>
    for_us = 1;
 8011334:	2301      	movs	r3, #1
 8011336:	76fb      	strb	r3, [r7, #27]
 8011338:	e00a      	b.n	8011350 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	3304      	adds	r3, #4
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	4b2d      	ldr	r3, [pc, #180]	; (80113f8 <udp_input+0x218>)
 8011342:	695b      	ldr	r3, [r3, #20]
 8011344:	429a      	cmp	r2, r3
 8011346:	bf0c      	ite	eq
 8011348:	2301      	moveq	r3, #1
 801134a:	2300      	movne	r3, #0
 801134c:	b2db      	uxtb	r3, r3
 801134e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011350:	7efb      	ldrb	r3, [r7, #27]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d041      	beq.n	80113da <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011356:	2108      	movs	r1, #8
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7fa f8d7 	bl	800b50c <pbuf_remove_header>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d00a      	beq.n	801137a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011364:	4b20      	ldr	r3, [pc, #128]	; (80113e8 <udp_input+0x208>)
 8011366:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801136a:	4925      	ldr	r1, [pc, #148]	; (8011400 <udp_input+0x220>)
 801136c:	4820      	ldr	r0, [pc, #128]	; (80113f0 <udp_input+0x210>)
 801136e:	f002 fc91 	bl	8013c94 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f7fa f950 	bl	800b618 <pbuf_free>
      goto end;
 8011378:	e032      	b.n	80113e0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	2b00      	cmp	r3, #0
 801137e:	d012      	beq.n	80113a6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011382:	699b      	ldr	r3, [r3, #24]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00a      	beq.n	801139e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138a:	699c      	ldr	r4, [r3, #24]
 801138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138e:	69d8      	ldr	r0, [r3, #28]
 8011390:	8a3b      	ldrh	r3, [r7, #16]
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	4b1b      	ldr	r3, [pc, #108]	; (8011404 <udp_input+0x224>)
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801139a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801139c:	e021      	b.n	80113e2 <udp_input+0x202>
        pbuf_free(p);
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f7fa f93a 	bl	800b618 <pbuf_free>
        goto end;
 80113a4:	e01c      	b.n	80113e0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80113a6:	7cfb      	ldrb	r3, [r7, #19]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d112      	bne.n	80113d2 <udp_input+0x1f2>
 80113ac:	4b12      	ldr	r3, [pc, #72]	; (80113f8 <udp_input+0x218>)
 80113ae:	695b      	ldr	r3, [r3, #20]
 80113b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113b4:	2be0      	cmp	r3, #224	; 0xe0
 80113b6:	d00c      	beq.n	80113d2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80113b8:	4b0f      	ldr	r3, [pc, #60]	; (80113f8 <udp_input+0x218>)
 80113ba:	899b      	ldrh	r3, [r3, #12]
 80113bc:	3308      	adds	r3, #8
 80113be:	b29b      	uxth	r3, r3
 80113c0:	b21b      	sxth	r3, r3
 80113c2:	4619      	mov	r1, r3
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7fa f914 	bl	800b5f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80113ca:	2103      	movs	r1, #3
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f001 f89b 	bl	8012508 <icmp_dest_unreach>
      pbuf_free(p);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f7fa f920 	bl	800b618 <pbuf_free>
  return;
 80113d8:	e003      	b.n	80113e2 <udp_input+0x202>
    pbuf_free(p);
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f7fa f91c 	bl	800b618 <pbuf_free>
  return;
 80113e0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80113e2:	372c      	adds	r7, #44	; 0x2c
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd90      	pop	{r4, r7, pc}
 80113e8:	08016bf4 	.word	0x08016bf4
 80113ec:	08016c98 	.word	0x08016c98
 80113f0:	08016c48 	.word	0x08016c48
 80113f4:	08016cb0 	.word	0x08016cb0
 80113f8:	200127c0 	.word	0x200127c0
 80113fc:	20015eec 	.word	0x20015eec
 8011400:	08016ccc 	.word	0x08016ccc
 8011404:	200127d0 	.word	0x200127d0

08011408 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d01e      	beq.n	8011456 <udp_netif_ip_addr_changed+0x4e>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d01a      	beq.n	8011456 <udp_netif_ip_addr_changed+0x4e>
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d017      	beq.n	8011456 <udp_netif_ip_addr_changed+0x4e>
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d013      	beq.n	8011456 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801142e:	4b0d      	ldr	r3, [pc, #52]	; (8011464 <udp_netif_ip_addr_changed+0x5c>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	60fb      	str	r3, [r7, #12]
 8011434:	e00c      	b.n	8011450 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	429a      	cmp	r2, r3
 8011440:	d103      	bne.n	801144a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	60fb      	str	r3, [r7, #12]
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d1ef      	bne.n	8011436 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011456:	bf00      	nop
 8011458:	3714      	adds	r7, #20
 801145a:	46bd      	mov	sp, r7
 801145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011460:	4770      	bx	lr
 8011462:	bf00      	nop
 8011464:	20015eec 	.word	0x20015eec

08011468 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011470:	4915      	ldr	r1, [pc, #84]	; (80114c8 <etharp_free_entry+0x60>)
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	4613      	mov	r3, r2
 8011476:	005b      	lsls	r3, r3, #1
 8011478:	4413      	add	r3, r2
 801147a:	00db      	lsls	r3, r3, #3
 801147c:	440b      	add	r3, r1
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d013      	beq.n	80114ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011484:	4910      	ldr	r1, [pc, #64]	; (80114c8 <etharp_free_entry+0x60>)
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	4613      	mov	r3, r2
 801148a:	005b      	lsls	r3, r3, #1
 801148c:	4413      	add	r3, r2
 801148e:	00db      	lsls	r3, r3, #3
 8011490:	440b      	add	r3, r1
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	4618      	mov	r0, r3
 8011496:	f7fa f8bf 	bl	800b618 <pbuf_free>
    arp_table[i].q = NULL;
 801149a:	490b      	ldr	r1, [pc, #44]	; (80114c8 <etharp_free_entry+0x60>)
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	4613      	mov	r3, r2
 80114a0:	005b      	lsls	r3, r3, #1
 80114a2:	4413      	add	r3, r2
 80114a4:	00db      	lsls	r3, r3, #3
 80114a6:	440b      	add	r3, r1
 80114a8:	2200      	movs	r2, #0
 80114aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80114ac:	4906      	ldr	r1, [pc, #24]	; (80114c8 <etharp_free_entry+0x60>)
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	4613      	mov	r3, r2
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	4413      	add	r3, r2
 80114b6:	00db      	lsls	r3, r3, #3
 80114b8:	440b      	add	r3, r1
 80114ba:	3314      	adds	r3, #20
 80114bc:	2200      	movs	r2, #0
 80114be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80114c0:	bf00      	nop
 80114c2:	3708      	adds	r7, #8
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	2000ef38 	.word	0x2000ef38

080114cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80114d2:	2300      	movs	r3, #0
 80114d4:	607b      	str	r3, [r7, #4]
 80114d6:	e096      	b.n	8011606 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80114d8:	494f      	ldr	r1, [pc, #316]	; (8011618 <etharp_tmr+0x14c>)
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	4613      	mov	r3, r2
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	4413      	add	r3, r2
 80114e2:	00db      	lsls	r3, r3, #3
 80114e4:	440b      	add	r3, r1
 80114e6:	3314      	adds	r3, #20
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80114ec:	78fb      	ldrb	r3, [r7, #3]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f000 8086 	beq.w	8011600 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80114f4:	4948      	ldr	r1, [pc, #288]	; (8011618 <etharp_tmr+0x14c>)
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	4613      	mov	r3, r2
 80114fa:	005b      	lsls	r3, r3, #1
 80114fc:	4413      	add	r3, r2
 80114fe:	00db      	lsls	r3, r3, #3
 8011500:	440b      	add	r3, r1
 8011502:	3312      	adds	r3, #18
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	3301      	adds	r3, #1
 8011508:	b298      	uxth	r0, r3
 801150a:	4943      	ldr	r1, [pc, #268]	; (8011618 <etharp_tmr+0x14c>)
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	4613      	mov	r3, r2
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	4413      	add	r3, r2
 8011514:	00db      	lsls	r3, r3, #3
 8011516:	440b      	add	r3, r1
 8011518:	3312      	adds	r3, #18
 801151a:	4602      	mov	r2, r0
 801151c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801151e:	493e      	ldr	r1, [pc, #248]	; (8011618 <etharp_tmr+0x14c>)
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	4613      	mov	r3, r2
 8011524:	005b      	lsls	r3, r3, #1
 8011526:	4413      	add	r3, r2
 8011528:	00db      	lsls	r3, r3, #3
 801152a:	440b      	add	r3, r1
 801152c:	3312      	adds	r3, #18
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011534:	d215      	bcs.n	8011562 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011536:	4938      	ldr	r1, [pc, #224]	; (8011618 <etharp_tmr+0x14c>)
 8011538:	687a      	ldr	r2, [r7, #4]
 801153a:	4613      	mov	r3, r2
 801153c:	005b      	lsls	r3, r3, #1
 801153e:	4413      	add	r3, r2
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	440b      	add	r3, r1
 8011544:	3314      	adds	r3, #20
 8011546:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011548:	2b01      	cmp	r3, #1
 801154a:	d10e      	bne.n	801156a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801154c:	4932      	ldr	r1, [pc, #200]	; (8011618 <etharp_tmr+0x14c>)
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	4613      	mov	r3, r2
 8011552:	005b      	lsls	r3, r3, #1
 8011554:	4413      	add	r3, r2
 8011556:	00db      	lsls	r3, r3, #3
 8011558:	440b      	add	r3, r1
 801155a:	3312      	adds	r3, #18
 801155c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801155e:	2b04      	cmp	r3, #4
 8011560:	d903      	bls.n	801156a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7ff ff80 	bl	8011468 <etharp_free_entry>
 8011568:	e04a      	b.n	8011600 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801156a:	492b      	ldr	r1, [pc, #172]	; (8011618 <etharp_tmr+0x14c>)
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	4613      	mov	r3, r2
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	4413      	add	r3, r2
 8011574:	00db      	lsls	r3, r3, #3
 8011576:	440b      	add	r3, r1
 8011578:	3314      	adds	r3, #20
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	2b03      	cmp	r3, #3
 801157e:	d10a      	bne.n	8011596 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011580:	4925      	ldr	r1, [pc, #148]	; (8011618 <etharp_tmr+0x14c>)
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	4613      	mov	r3, r2
 8011586:	005b      	lsls	r3, r3, #1
 8011588:	4413      	add	r3, r2
 801158a:	00db      	lsls	r3, r3, #3
 801158c:	440b      	add	r3, r1
 801158e:	3314      	adds	r3, #20
 8011590:	2204      	movs	r2, #4
 8011592:	701a      	strb	r2, [r3, #0]
 8011594:	e034      	b.n	8011600 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011596:	4920      	ldr	r1, [pc, #128]	; (8011618 <etharp_tmr+0x14c>)
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	4613      	mov	r3, r2
 801159c:	005b      	lsls	r3, r3, #1
 801159e:	4413      	add	r3, r2
 80115a0:	00db      	lsls	r3, r3, #3
 80115a2:	440b      	add	r3, r1
 80115a4:	3314      	adds	r3, #20
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	2b04      	cmp	r3, #4
 80115aa:	d10a      	bne.n	80115c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80115ac:	491a      	ldr	r1, [pc, #104]	; (8011618 <etharp_tmr+0x14c>)
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	4613      	mov	r3, r2
 80115b2:	005b      	lsls	r3, r3, #1
 80115b4:	4413      	add	r3, r2
 80115b6:	00db      	lsls	r3, r3, #3
 80115b8:	440b      	add	r3, r1
 80115ba:	3314      	adds	r3, #20
 80115bc:	2202      	movs	r2, #2
 80115be:	701a      	strb	r2, [r3, #0]
 80115c0:	e01e      	b.n	8011600 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80115c2:	4915      	ldr	r1, [pc, #84]	; (8011618 <etharp_tmr+0x14c>)
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	4613      	mov	r3, r2
 80115c8:	005b      	lsls	r3, r3, #1
 80115ca:	4413      	add	r3, r2
 80115cc:	00db      	lsls	r3, r3, #3
 80115ce:	440b      	add	r3, r1
 80115d0:	3314      	adds	r3, #20
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d113      	bne.n	8011600 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80115d8:	490f      	ldr	r1, [pc, #60]	; (8011618 <etharp_tmr+0x14c>)
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	4613      	mov	r3, r2
 80115de:	005b      	lsls	r3, r3, #1
 80115e0:	4413      	add	r3, r2
 80115e2:	00db      	lsls	r3, r3, #3
 80115e4:	440b      	add	r3, r1
 80115e6:	3308      	adds	r3, #8
 80115e8:	6818      	ldr	r0, [r3, #0]
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	4613      	mov	r3, r2
 80115ee:	005b      	lsls	r3, r3, #1
 80115f0:	4413      	add	r3, r2
 80115f2:	00db      	lsls	r3, r3, #3
 80115f4:	4a08      	ldr	r2, [pc, #32]	; (8011618 <etharp_tmr+0x14c>)
 80115f6:	4413      	add	r3, r2
 80115f8:	3304      	adds	r3, #4
 80115fa:	4619      	mov	r1, r3
 80115fc:	f000 fe6e 	bl	80122dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	3301      	adds	r3, #1
 8011604:	607b      	str	r3, [r7, #4]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2b09      	cmp	r3, #9
 801160a:	f77f af65 	ble.w	80114d8 <etharp_tmr+0xc>
      }
    }
  }
}
 801160e:	bf00      	nop
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	2000ef38 	.word	0x2000ef38

0801161c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b08a      	sub	sp, #40	; 0x28
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	460b      	mov	r3, r1
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801162a:	230a      	movs	r3, #10
 801162c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801162e:	230a      	movs	r3, #10
 8011630:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011632:	230a      	movs	r3, #10
 8011634:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011636:	2300      	movs	r3, #0
 8011638:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801163a:	230a      	movs	r3, #10
 801163c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	83bb      	strh	r3, [r7, #28]
 8011642:	2300      	movs	r3, #0
 8011644:	837b      	strh	r3, [r7, #26]
 8011646:	2300      	movs	r3, #0
 8011648:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801164a:	2300      	movs	r3, #0
 801164c:	843b      	strh	r3, [r7, #32]
 801164e:	e0ae      	b.n	80117ae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011654:	49a6      	ldr	r1, [pc, #664]	; (80118f0 <etharp_find_entry+0x2d4>)
 8011656:	4613      	mov	r3, r2
 8011658:	005b      	lsls	r3, r3, #1
 801165a:	4413      	add	r3, r2
 801165c:	00db      	lsls	r3, r3, #3
 801165e:	440b      	add	r3, r1
 8011660:	3314      	adds	r3, #20
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011666:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801166a:	2b0a      	cmp	r3, #10
 801166c:	d105      	bne.n	801167a <etharp_find_entry+0x5e>
 801166e:	7dfb      	ldrb	r3, [r7, #23]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011674:	8c3b      	ldrh	r3, [r7, #32]
 8011676:	847b      	strh	r3, [r7, #34]	; 0x22
 8011678:	e095      	b.n	80117a6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801167a:	7dfb      	ldrb	r3, [r7, #23]
 801167c:	2b00      	cmp	r3, #0
 801167e:	f000 8092 	beq.w	80117a6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011682:	7dfb      	ldrb	r3, [r7, #23]
 8011684:	2b01      	cmp	r3, #1
 8011686:	d009      	beq.n	801169c <etharp_find_entry+0x80>
 8011688:	7dfb      	ldrb	r3, [r7, #23]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d806      	bhi.n	801169c <etharp_find_entry+0x80>
 801168e:	4b99      	ldr	r3, [pc, #612]	; (80118f4 <etharp_find_entry+0x2d8>)
 8011690:	f44f 7292 	mov.w	r2, #292	; 0x124
 8011694:	4998      	ldr	r1, [pc, #608]	; (80118f8 <etharp_find_entry+0x2dc>)
 8011696:	4899      	ldr	r0, [pc, #612]	; (80118fc <etharp_find_entry+0x2e0>)
 8011698:	f002 fafc 	bl	8013c94 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d020      	beq.n	80116e4 <etharp_find_entry+0xc8>
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	6819      	ldr	r1, [r3, #0]
 80116a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116aa:	4891      	ldr	r0, [pc, #580]	; (80118f0 <etharp_find_entry+0x2d4>)
 80116ac:	4613      	mov	r3, r2
 80116ae:	005b      	lsls	r3, r3, #1
 80116b0:	4413      	add	r3, r2
 80116b2:	00db      	lsls	r3, r3, #3
 80116b4:	4403      	add	r3, r0
 80116b6:	3304      	adds	r3, #4
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	4299      	cmp	r1, r3
 80116bc:	d112      	bne.n	80116e4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00c      	beq.n	80116de <etharp_find_entry+0xc2>
 80116c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116c8:	4989      	ldr	r1, [pc, #548]	; (80118f0 <etharp_find_entry+0x2d4>)
 80116ca:	4613      	mov	r3, r2
 80116cc:	005b      	lsls	r3, r3, #1
 80116ce:	4413      	add	r3, r2
 80116d0:	00db      	lsls	r3, r3, #3
 80116d2:	440b      	add	r3, r1
 80116d4:	3308      	adds	r3, #8
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d102      	bne.n	80116e4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80116de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80116e2:	e100      	b.n	80118e6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80116e4:	7dfb      	ldrb	r3, [r7, #23]
 80116e6:	2b01      	cmp	r3, #1
 80116e8:	d140      	bne.n	801176c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80116ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116ee:	4980      	ldr	r1, [pc, #512]	; (80118f0 <etharp_find_entry+0x2d4>)
 80116f0:	4613      	mov	r3, r2
 80116f2:	005b      	lsls	r3, r3, #1
 80116f4:	4413      	add	r3, r2
 80116f6:	00db      	lsls	r3, r3, #3
 80116f8:	440b      	add	r3, r1
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d01a      	beq.n	8011736 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011700:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011704:	497a      	ldr	r1, [pc, #488]	; (80118f0 <etharp_find_entry+0x2d4>)
 8011706:	4613      	mov	r3, r2
 8011708:	005b      	lsls	r3, r3, #1
 801170a:	4413      	add	r3, r2
 801170c:	00db      	lsls	r3, r3, #3
 801170e:	440b      	add	r3, r1
 8011710:	3312      	adds	r3, #18
 8011712:	881b      	ldrh	r3, [r3, #0]
 8011714:	8bba      	ldrh	r2, [r7, #28]
 8011716:	429a      	cmp	r2, r3
 8011718:	d845      	bhi.n	80117a6 <etharp_find_entry+0x18a>
            old_queue = i;
 801171a:	8c3b      	ldrh	r3, [r7, #32]
 801171c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801171e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011722:	4973      	ldr	r1, [pc, #460]	; (80118f0 <etharp_find_entry+0x2d4>)
 8011724:	4613      	mov	r3, r2
 8011726:	005b      	lsls	r3, r3, #1
 8011728:	4413      	add	r3, r2
 801172a:	00db      	lsls	r3, r3, #3
 801172c:	440b      	add	r3, r1
 801172e:	3312      	adds	r3, #18
 8011730:	881b      	ldrh	r3, [r3, #0]
 8011732:	83bb      	strh	r3, [r7, #28]
 8011734:	e037      	b.n	80117a6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801173a:	496d      	ldr	r1, [pc, #436]	; (80118f0 <etharp_find_entry+0x2d4>)
 801173c:	4613      	mov	r3, r2
 801173e:	005b      	lsls	r3, r3, #1
 8011740:	4413      	add	r3, r2
 8011742:	00db      	lsls	r3, r3, #3
 8011744:	440b      	add	r3, r1
 8011746:	3312      	adds	r3, #18
 8011748:	881b      	ldrh	r3, [r3, #0]
 801174a:	8b7a      	ldrh	r2, [r7, #26]
 801174c:	429a      	cmp	r2, r3
 801174e:	d82a      	bhi.n	80117a6 <etharp_find_entry+0x18a>
            old_pending = i;
 8011750:	8c3b      	ldrh	r3, [r7, #32]
 8011752:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011754:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011758:	4965      	ldr	r1, [pc, #404]	; (80118f0 <etharp_find_entry+0x2d4>)
 801175a:	4613      	mov	r3, r2
 801175c:	005b      	lsls	r3, r3, #1
 801175e:	4413      	add	r3, r2
 8011760:	00db      	lsls	r3, r3, #3
 8011762:	440b      	add	r3, r1
 8011764:	3312      	adds	r3, #18
 8011766:	881b      	ldrh	r3, [r3, #0]
 8011768:	837b      	strh	r3, [r7, #26]
 801176a:	e01c      	b.n	80117a6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801176c:	7dfb      	ldrb	r3, [r7, #23]
 801176e:	2b01      	cmp	r3, #1
 8011770:	d919      	bls.n	80117a6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011772:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011776:	495e      	ldr	r1, [pc, #376]	; (80118f0 <etharp_find_entry+0x2d4>)
 8011778:	4613      	mov	r3, r2
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	4413      	add	r3, r2
 801177e:	00db      	lsls	r3, r3, #3
 8011780:	440b      	add	r3, r1
 8011782:	3312      	adds	r3, #18
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	8b3a      	ldrh	r2, [r7, #24]
 8011788:	429a      	cmp	r2, r3
 801178a:	d80c      	bhi.n	80117a6 <etharp_find_entry+0x18a>
            old_stable = i;
 801178c:	8c3b      	ldrh	r3, [r7, #32]
 801178e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011790:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011794:	4956      	ldr	r1, [pc, #344]	; (80118f0 <etharp_find_entry+0x2d4>)
 8011796:	4613      	mov	r3, r2
 8011798:	005b      	lsls	r3, r3, #1
 801179a:	4413      	add	r3, r2
 801179c:	00db      	lsls	r3, r3, #3
 801179e:	440b      	add	r3, r1
 80117a0:	3312      	adds	r3, #18
 80117a2:	881b      	ldrh	r3, [r3, #0]
 80117a4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80117a6:	8c3b      	ldrh	r3, [r7, #32]
 80117a8:	3301      	adds	r3, #1
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	843b      	strh	r3, [r7, #32]
 80117ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80117b2:	2b09      	cmp	r3, #9
 80117b4:	f77f af4c 	ble.w	8011650 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80117b8:	7afb      	ldrb	r3, [r7, #11]
 80117ba:	f003 0302 	and.w	r3, r3, #2
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d108      	bne.n	80117d4 <etharp_find_entry+0x1b8>
 80117c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80117c6:	2b0a      	cmp	r3, #10
 80117c8:	d107      	bne.n	80117da <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80117ca:	7afb      	ldrb	r3, [r7, #11]
 80117cc:	f003 0301 	and.w	r3, r3, #1
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d102      	bne.n	80117da <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80117d4:	f04f 33ff 	mov.w	r3, #4294967295
 80117d8:	e085      	b.n	80118e6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80117da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80117de:	2b09      	cmp	r3, #9
 80117e0:	dc02      	bgt.n	80117e8 <etharp_find_entry+0x1cc>
    i = empty;
 80117e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117e4:	843b      	strh	r3, [r7, #32]
 80117e6:	e039      	b.n	801185c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80117e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80117ec:	2b09      	cmp	r3, #9
 80117ee:	dc14      	bgt.n	801181a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80117f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80117f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117f8:	493d      	ldr	r1, [pc, #244]	; (80118f0 <etharp_find_entry+0x2d4>)
 80117fa:	4613      	mov	r3, r2
 80117fc:	005b      	lsls	r3, r3, #1
 80117fe:	4413      	add	r3, r2
 8011800:	00db      	lsls	r3, r3, #3
 8011802:	440b      	add	r3, r1
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d018      	beq.n	801183c <etharp_find_entry+0x220>
 801180a:	4b3a      	ldr	r3, [pc, #232]	; (80118f4 <etharp_find_entry+0x2d8>)
 801180c:	f240 126d 	movw	r2, #365	; 0x16d
 8011810:	493b      	ldr	r1, [pc, #236]	; (8011900 <etharp_find_entry+0x2e4>)
 8011812:	483a      	ldr	r0, [pc, #232]	; (80118fc <etharp_find_entry+0x2e0>)
 8011814:	f002 fa3e 	bl	8013c94 <iprintf>
 8011818:	e010      	b.n	801183c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801181a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801181e:	2b09      	cmp	r3, #9
 8011820:	dc02      	bgt.n	8011828 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011824:	843b      	strh	r3, [r7, #32]
 8011826:	e009      	b.n	801183c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011828:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801182c:	2b09      	cmp	r3, #9
 801182e:	dc02      	bgt.n	8011836 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011830:	8bfb      	ldrh	r3, [r7, #30]
 8011832:	843b      	strh	r3, [r7, #32]
 8011834:	e002      	b.n	801183c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011836:	f04f 33ff 	mov.w	r3, #4294967295
 801183a:	e054      	b.n	80118e6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801183c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011840:	2b09      	cmp	r3, #9
 8011842:	dd06      	ble.n	8011852 <etharp_find_entry+0x236>
 8011844:	4b2b      	ldr	r3, [pc, #172]	; (80118f4 <etharp_find_entry+0x2d8>)
 8011846:	f240 127f 	movw	r2, #383	; 0x17f
 801184a:	492e      	ldr	r1, [pc, #184]	; (8011904 <etharp_find_entry+0x2e8>)
 801184c:	482b      	ldr	r0, [pc, #172]	; (80118fc <etharp_find_entry+0x2e0>)
 801184e:	f002 fa21 	bl	8013c94 <iprintf>
    etharp_free_entry(i);
 8011852:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011856:	4618      	mov	r0, r3
 8011858:	f7ff fe06 	bl	8011468 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801185c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011860:	2b09      	cmp	r3, #9
 8011862:	dd06      	ble.n	8011872 <etharp_find_entry+0x256>
 8011864:	4b23      	ldr	r3, [pc, #140]	; (80118f4 <etharp_find_entry+0x2d8>)
 8011866:	f240 1283 	movw	r2, #387	; 0x183
 801186a:	4926      	ldr	r1, [pc, #152]	; (8011904 <etharp_find_entry+0x2e8>)
 801186c:	4823      	ldr	r0, [pc, #140]	; (80118fc <etharp_find_entry+0x2e0>)
 801186e:	f002 fa11 	bl	8013c94 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011872:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011876:	491e      	ldr	r1, [pc, #120]	; (80118f0 <etharp_find_entry+0x2d4>)
 8011878:	4613      	mov	r3, r2
 801187a:	005b      	lsls	r3, r3, #1
 801187c:	4413      	add	r3, r2
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	440b      	add	r3, r1
 8011882:	3314      	adds	r3, #20
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d006      	beq.n	8011898 <etharp_find_entry+0x27c>
 801188a:	4b1a      	ldr	r3, [pc, #104]	; (80118f4 <etharp_find_entry+0x2d8>)
 801188c:	f240 1285 	movw	r2, #389	; 0x185
 8011890:	491d      	ldr	r1, [pc, #116]	; (8011908 <etharp_find_entry+0x2ec>)
 8011892:	481a      	ldr	r0, [pc, #104]	; (80118fc <etharp_find_entry+0x2e0>)
 8011894:	f002 f9fe 	bl	8013c94 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d00b      	beq.n	80118b6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801189e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	6819      	ldr	r1, [r3, #0]
 80118a6:	4812      	ldr	r0, [pc, #72]	; (80118f0 <etharp_find_entry+0x2d4>)
 80118a8:	4613      	mov	r3, r2
 80118aa:	005b      	lsls	r3, r3, #1
 80118ac:	4413      	add	r3, r2
 80118ae:	00db      	lsls	r3, r3, #3
 80118b0:	4403      	add	r3, r0
 80118b2:	3304      	adds	r3, #4
 80118b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80118b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118ba:	490d      	ldr	r1, [pc, #52]	; (80118f0 <etharp_find_entry+0x2d4>)
 80118bc:	4613      	mov	r3, r2
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	4413      	add	r3, r2
 80118c2:	00db      	lsls	r3, r3, #3
 80118c4:	440b      	add	r3, r1
 80118c6:	3312      	adds	r3, #18
 80118c8:	2200      	movs	r2, #0
 80118ca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80118cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118d0:	4907      	ldr	r1, [pc, #28]	; (80118f0 <etharp_find_entry+0x2d4>)
 80118d2:	4613      	mov	r3, r2
 80118d4:	005b      	lsls	r3, r3, #1
 80118d6:	4413      	add	r3, r2
 80118d8:	00db      	lsls	r3, r3, #3
 80118da:	440b      	add	r3, r1
 80118dc:	3308      	adds	r3, #8
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80118e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3728      	adds	r7, #40	; 0x28
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	2000ef38 	.word	0x2000ef38
 80118f4:	08016f58 	.word	0x08016f58
 80118f8:	08016f90 	.word	0x08016f90
 80118fc:	08016fd0 	.word	0x08016fd0
 8011900:	08016ff8 	.word	0x08016ff8
 8011904:	08017010 	.word	0x08017010
 8011908:	08017024 	.word	0x08017024

0801190c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b088      	sub	sp, #32
 8011910:	af02      	add	r7, sp, #8
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
 8011918:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011920:	2b06      	cmp	r3, #6
 8011922:	d006      	beq.n	8011932 <etharp_update_arp_entry+0x26>
 8011924:	4b48      	ldr	r3, [pc, #288]	; (8011a48 <etharp_update_arp_entry+0x13c>)
 8011926:	f240 12a9 	movw	r2, #425	; 0x1a9
 801192a:	4948      	ldr	r1, [pc, #288]	; (8011a4c <etharp_update_arp_entry+0x140>)
 801192c:	4848      	ldr	r0, [pc, #288]	; (8011a50 <etharp_update_arp_entry+0x144>)
 801192e:	f002 f9b1 	bl	8013c94 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d012      	beq.n	801195e <etharp_update_arp_entry+0x52>
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00e      	beq.n	801195e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	68f9      	ldr	r1, [r7, #12]
 8011946:	4618      	mov	r0, r3
 8011948:	f001 f8fc 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 801194c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801194e:	2b00      	cmp	r3, #0
 8011950:	d105      	bne.n	801195e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801195a:	2be0      	cmp	r3, #224	; 0xe0
 801195c:	d102      	bne.n	8011964 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801195e:	f06f 030f 	mvn.w	r3, #15
 8011962:	e06c      	b.n	8011a3e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011964:	78fb      	ldrb	r3, [r7, #3]
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	4619      	mov	r1, r3
 801196a:	68b8      	ldr	r0, [r7, #8]
 801196c:	f7ff fe56 	bl	801161c <etharp_find_entry>
 8011970:	4603      	mov	r3, r0
 8011972:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011974:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011978:	2b00      	cmp	r3, #0
 801197a:	da02      	bge.n	8011982 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801197c:	8afb      	ldrh	r3, [r7, #22]
 801197e:	b25b      	sxtb	r3, r3
 8011980:	e05d      	b.n	8011a3e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011982:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011986:	4933      	ldr	r1, [pc, #204]	; (8011a54 <etharp_update_arp_entry+0x148>)
 8011988:	4613      	mov	r3, r2
 801198a:	005b      	lsls	r3, r3, #1
 801198c:	4413      	add	r3, r2
 801198e:	00db      	lsls	r3, r3, #3
 8011990:	440b      	add	r3, r1
 8011992:	3314      	adds	r3, #20
 8011994:	2202      	movs	r2, #2
 8011996:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011998:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801199c:	492d      	ldr	r1, [pc, #180]	; (8011a54 <etharp_update_arp_entry+0x148>)
 801199e:	4613      	mov	r3, r2
 80119a0:	005b      	lsls	r3, r3, #1
 80119a2:	4413      	add	r3, r2
 80119a4:	00db      	lsls	r3, r3, #3
 80119a6:	440b      	add	r3, r1
 80119a8:	3308      	adds	r3, #8
 80119aa:	68fa      	ldr	r2, [r7, #12]
 80119ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80119ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80119b2:	4613      	mov	r3, r2
 80119b4:	005b      	lsls	r3, r3, #1
 80119b6:	4413      	add	r3, r2
 80119b8:	00db      	lsls	r3, r3, #3
 80119ba:	3308      	adds	r3, #8
 80119bc:	4a25      	ldr	r2, [pc, #148]	; (8011a54 <etharp_update_arp_entry+0x148>)
 80119be:	4413      	add	r3, r2
 80119c0:	3304      	adds	r3, #4
 80119c2:	2206      	movs	r2, #6
 80119c4:	6879      	ldr	r1, [r7, #4]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f002 f951 	bl	8013c6e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80119cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80119d0:	4920      	ldr	r1, [pc, #128]	; (8011a54 <etharp_update_arp_entry+0x148>)
 80119d2:	4613      	mov	r3, r2
 80119d4:	005b      	lsls	r3, r3, #1
 80119d6:	4413      	add	r3, r2
 80119d8:	00db      	lsls	r3, r3, #3
 80119da:	440b      	add	r3, r1
 80119dc:	3312      	adds	r3, #18
 80119de:	2200      	movs	r2, #0
 80119e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80119e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80119e6:	491b      	ldr	r1, [pc, #108]	; (8011a54 <etharp_update_arp_entry+0x148>)
 80119e8:	4613      	mov	r3, r2
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	4413      	add	r3, r2
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	440b      	add	r3, r1
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d021      	beq.n	8011a3c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80119f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80119fc:	4915      	ldr	r1, [pc, #84]	; (8011a54 <etharp_update_arp_entry+0x148>)
 80119fe:	4613      	mov	r3, r2
 8011a00:	005b      	lsls	r3, r3, #1
 8011a02:	4413      	add	r3, r2
 8011a04:	00db      	lsls	r3, r3, #3
 8011a06:	440b      	add	r3, r1
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011a0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a10:	4910      	ldr	r1, [pc, #64]	; (8011a54 <etharp_update_arp_entry+0x148>)
 8011a12:	4613      	mov	r3, r2
 8011a14:	005b      	lsls	r3, r3, #1
 8011a16:	4413      	add	r3, r2
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	440b      	add	r3, r1
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8011a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011a2a:	9300      	str	r3, [sp, #0]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6939      	ldr	r1, [r7, #16]
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f001 ff8b 	bl	801394c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011a36:	6938      	ldr	r0, [r7, #16]
 8011a38:	f7f9 fdee 	bl	800b618 <pbuf_free>
  }
  return ERR_OK;
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3718      	adds	r7, #24
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	08016f58 	.word	0x08016f58
 8011a4c:	08017050 	.word	0x08017050
 8011a50:	08016fd0 	.word	0x08016fd0
 8011a54:	2000ef38 	.word	0x2000ef38

08011a58 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a60:	2300      	movs	r3, #0
 8011a62:	60fb      	str	r3, [r7, #12]
 8011a64:	e01e      	b.n	8011aa4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011a66:	4913      	ldr	r1, [pc, #76]	; (8011ab4 <etharp_cleanup_netif+0x5c>)
 8011a68:	68fa      	ldr	r2, [r7, #12]
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	005b      	lsls	r3, r3, #1
 8011a6e:	4413      	add	r3, r2
 8011a70:	00db      	lsls	r3, r3, #3
 8011a72:	440b      	add	r3, r1
 8011a74:	3314      	adds	r3, #20
 8011a76:	781b      	ldrb	r3, [r3, #0]
 8011a78:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011a7a:	7afb      	ldrb	r3, [r7, #11]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00e      	beq.n	8011a9e <etharp_cleanup_netif+0x46>
 8011a80:	490c      	ldr	r1, [pc, #48]	; (8011ab4 <etharp_cleanup_netif+0x5c>)
 8011a82:	68fa      	ldr	r2, [r7, #12]
 8011a84:	4613      	mov	r3, r2
 8011a86:	005b      	lsls	r3, r3, #1
 8011a88:	4413      	add	r3, r2
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	440b      	add	r3, r1
 8011a8e:	3308      	adds	r3, #8
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d102      	bne.n	8011a9e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f7ff fce5 	bl	8011468 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	60fb      	str	r3, [r7, #12]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2b09      	cmp	r3, #9
 8011aa8:	dddd      	ble.n	8011a66 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011aaa:	bf00      	nop
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	2000ef38 	.word	0x2000ef38

08011ab8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011ab8:	b5b0      	push	{r4, r5, r7, lr}
 8011aba:	b08a      	sub	sp, #40	; 0x28
 8011abc:	af04      	add	r7, sp, #16
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d107      	bne.n	8011ad8 <etharp_input+0x20>
 8011ac8:	4b3d      	ldr	r3, [pc, #244]	; (8011bc0 <etharp_input+0x108>)
 8011aca:	f240 228a 	movw	r2, #650	; 0x28a
 8011ace:	493d      	ldr	r1, [pc, #244]	; (8011bc4 <etharp_input+0x10c>)
 8011ad0:	483d      	ldr	r0, [pc, #244]	; (8011bc8 <etharp_input+0x110>)
 8011ad2:	f002 f8df 	bl	8013c94 <iprintf>
 8011ad6:	e06f      	b.n	8011bb8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ae8:	d10c      	bne.n	8011b04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011aee:	2b06      	cmp	r3, #6
 8011af0:	d108      	bne.n	8011b04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011af6:	2b04      	cmp	r3, #4
 8011af8:	d104      	bne.n	8011b04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	885b      	ldrh	r3, [r3, #2]
 8011afe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011b00:	2b08      	cmp	r3, #8
 8011b02:	d003      	beq.n	8011b0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f7f9 fd87 	bl	800b618 <pbuf_free>
    return;
 8011b0a:	e055      	b.n	8011bb8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	330e      	adds	r3, #14
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	3318      	adds	r3, #24
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	3304      	adds	r3, #4
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d102      	bne.n	8011b2c <etharp_input+0x74>
    for_us = 0;
 8011b26:	2300      	movs	r3, #0
 8011b28:	75fb      	strb	r3, [r7, #23]
 8011b2a:	e009      	b.n	8011b40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011b2c:	68ba      	ldr	r2, [r7, #8]
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	3304      	adds	r3, #4
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	bf0c      	ite	eq
 8011b38:	2301      	moveq	r3, #1
 8011b3a:	2300      	movne	r3, #0
 8011b3c:	b2db      	uxtb	r3, r3
 8011b3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	f103 0208 	add.w	r2, r3, #8
 8011b46:	7dfb      	ldrb	r3, [r7, #23]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d001      	beq.n	8011b50 <etharp_input+0x98>
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	e000      	b.n	8011b52 <etharp_input+0x9a>
 8011b50:	2302      	movs	r3, #2
 8011b52:	f107 010c 	add.w	r1, r7, #12
 8011b56:	6838      	ldr	r0, [r7, #0]
 8011b58:	f7ff fed8 	bl	801190c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	88db      	ldrh	r3, [r3, #6]
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b66:	d003      	beq.n	8011b70 <etharp_input+0xb8>
 8011b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b6c:	d01e      	beq.n	8011bac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011b6e:	e020      	b.n	8011bb2 <etharp_input+0xfa>
      if (for_us) {
 8011b70:	7dfb      	ldrb	r3, [r7, #23]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d01c      	beq.n	8011bb0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011b90:	2102      	movs	r1, #2
 8011b92:	9103      	str	r1, [sp, #12]
 8011b94:	f107 010c 	add.w	r1, r7, #12
 8011b98:	9102      	str	r1, [sp, #8]
 8011b9a:	9201      	str	r2, [sp, #4]
 8011b9c:	9300      	str	r3, [sp, #0]
 8011b9e:	462b      	mov	r3, r5
 8011ba0:	4622      	mov	r2, r4
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	6838      	ldr	r0, [r7, #0]
 8011ba6:	f000 faeb 	bl	8012180 <etharp_raw>
      break;
 8011baa:	e001      	b.n	8011bb0 <etharp_input+0xf8>
      break;
 8011bac:	bf00      	nop
 8011bae:	e000      	b.n	8011bb2 <etharp_input+0xfa>
      break;
 8011bb0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f7f9 fd30 	bl	800b618 <pbuf_free>
}
 8011bb8:	3718      	adds	r7, #24
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	08016f58 	.word	0x08016f58
 8011bc4:	080170a8 	.word	0x080170a8
 8011bc8:	08016fd0 	.word	0x08016fd0

08011bcc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b086      	sub	sp, #24
 8011bd0:	af02      	add	r7, sp, #8
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011bda:	79fa      	ldrb	r2, [r7, #7]
 8011bdc:	4944      	ldr	r1, [pc, #272]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011bde:	4613      	mov	r3, r2
 8011be0:	005b      	lsls	r3, r3, #1
 8011be2:	4413      	add	r3, r2
 8011be4:	00db      	lsls	r3, r3, #3
 8011be6:	440b      	add	r3, r1
 8011be8:	3314      	adds	r3, #20
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d806      	bhi.n	8011bfe <etharp_output_to_arp_index+0x32>
 8011bf0:	4b40      	ldr	r3, [pc, #256]	; (8011cf4 <etharp_output_to_arp_index+0x128>)
 8011bf2:	f240 22ef 	movw	r2, #751	; 0x2ef
 8011bf6:	4940      	ldr	r1, [pc, #256]	; (8011cf8 <etharp_output_to_arp_index+0x12c>)
 8011bf8:	4840      	ldr	r0, [pc, #256]	; (8011cfc <etharp_output_to_arp_index+0x130>)
 8011bfa:	f002 f84b 	bl	8013c94 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011bfe:	79fa      	ldrb	r2, [r7, #7]
 8011c00:	493b      	ldr	r1, [pc, #236]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011c02:	4613      	mov	r3, r2
 8011c04:	005b      	lsls	r3, r3, #1
 8011c06:	4413      	add	r3, r2
 8011c08:	00db      	lsls	r3, r3, #3
 8011c0a:	440b      	add	r3, r1
 8011c0c:	3314      	adds	r3, #20
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	2b02      	cmp	r3, #2
 8011c12:	d153      	bne.n	8011cbc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011c14:	79fa      	ldrb	r2, [r7, #7]
 8011c16:	4936      	ldr	r1, [pc, #216]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011c18:	4613      	mov	r3, r2
 8011c1a:	005b      	lsls	r3, r3, #1
 8011c1c:	4413      	add	r3, r2
 8011c1e:	00db      	lsls	r3, r3, #3
 8011c20:	440b      	add	r3, r1
 8011c22:	3312      	adds	r3, #18
 8011c24:	881b      	ldrh	r3, [r3, #0]
 8011c26:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011c2a:	d919      	bls.n	8011c60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011c2c:	79fa      	ldrb	r2, [r7, #7]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	4413      	add	r3, r2
 8011c34:	00db      	lsls	r3, r3, #3
 8011c36:	4a2e      	ldr	r2, [pc, #184]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011c38:	4413      	add	r3, r2
 8011c3a:	3304      	adds	r3, #4
 8011c3c:	4619      	mov	r1, r3
 8011c3e:	68f8      	ldr	r0, [r7, #12]
 8011c40:	f000 fb4c 	bl	80122dc <etharp_request>
 8011c44:	4603      	mov	r3, r0
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d138      	bne.n	8011cbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011c4a:	79fa      	ldrb	r2, [r7, #7]
 8011c4c:	4928      	ldr	r1, [pc, #160]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011c4e:	4613      	mov	r3, r2
 8011c50:	005b      	lsls	r3, r3, #1
 8011c52:	4413      	add	r3, r2
 8011c54:	00db      	lsls	r3, r3, #3
 8011c56:	440b      	add	r3, r1
 8011c58:	3314      	adds	r3, #20
 8011c5a:	2203      	movs	r2, #3
 8011c5c:	701a      	strb	r2, [r3, #0]
 8011c5e:	e02d      	b.n	8011cbc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011c60:	79fa      	ldrb	r2, [r7, #7]
 8011c62:	4923      	ldr	r1, [pc, #140]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011c64:	4613      	mov	r3, r2
 8011c66:	005b      	lsls	r3, r3, #1
 8011c68:	4413      	add	r3, r2
 8011c6a:	00db      	lsls	r3, r3, #3
 8011c6c:	440b      	add	r3, r1
 8011c6e:	3312      	adds	r3, #18
 8011c70:	881b      	ldrh	r3, [r3, #0]
 8011c72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011c76:	d321      	bcc.n	8011cbc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011c78:	79fa      	ldrb	r2, [r7, #7]
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	005b      	lsls	r3, r3, #1
 8011c7e:	4413      	add	r3, r2
 8011c80:	00db      	lsls	r3, r3, #3
 8011c82:	4a1b      	ldr	r2, [pc, #108]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011c84:	4413      	add	r3, r2
 8011c86:	1d19      	adds	r1, r3, #4
 8011c88:	79fa      	ldrb	r2, [r7, #7]
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	005b      	lsls	r3, r3, #1
 8011c8e:	4413      	add	r3, r2
 8011c90:	00db      	lsls	r3, r3, #3
 8011c92:	3308      	adds	r3, #8
 8011c94:	4a16      	ldr	r2, [pc, #88]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011c96:	4413      	add	r3, r2
 8011c98:	3304      	adds	r3, #4
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	68f8      	ldr	r0, [r7, #12]
 8011c9e:	f000 fafb 	bl	8012298 <etharp_request_dst>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d109      	bne.n	8011cbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011ca8:	79fa      	ldrb	r2, [r7, #7]
 8011caa:	4911      	ldr	r1, [pc, #68]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011cac:	4613      	mov	r3, r2
 8011cae:	005b      	lsls	r3, r3, #1
 8011cb0:	4413      	add	r3, r2
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	440b      	add	r3, r1
 8011cb6:	3314      	adds	r3, #20
 8011cb8:	2203      	movs	r2, #3
 8011cba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8011cc2:	79fa      	ldrb	r2, [r7, #7]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	005b      	lsls	r3, r3, #1
 8011cc8:	4413      	add	r3, r2
 8011cca:	00db      	lsls	r3, r3, #3
 8011ccc:	3308      	adds	r3, #8
 8011cce:	4a08      	ldr	r2, [pc, #32]	; (8011cf0 <etharp_output_to_arp_index+0x124>)
 8011cd0:	4413      	add	r3, r2
 8011cd2:	1d1a      	adds	r2, r3, #4
 8011cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cd8:	9300      	str	r3, [sp, #0]
 8011cda:	4613      	mov	r3, r2
 8011cdc:	460a      	mov	r2, r1
 8011cde:	68b9      	ldr	r1, [r7, #8]
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f001 fe33 	bl	801394c <ethernet_output>
 8011ce6:	4603      	mov	r3, r0
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3710      	adds	r7, #16
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	2000ef38 	.word	0x2000ef38
 8011cf4:	08016f58 	.word	0x08016f58
 8011cf8:	080170c8 	.word	0x080170c8
 8011cfc:	08016fd0 	.word	0x08016fd0

08011d00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b08a      	sub	sp, #40	; 0x28
 8011d04:	af02      	add	r7, sp, #8
 8011d06:	60f8      	str	r0, [r7, #12]
 8011d08:	60b9      	str	r1, [r7, #8]
 8011d0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d106      	bne.n	8011d24 <etharp_output+0x24>
 8011d16:	4b73      	ldr	r3, [pc, #460]	; (8011ee4 <etharp_output+0x1e4>)
 8011d18:	f240 321e 	movw	r2, #798	; 0x31e
 8011d1c:	4972      	ldr	r1, [pc, #456]	; (8011ee8 <etharp_output+0x1e8>)
 8011d1e:	4873      	ldr	r0, [pc, #460]	; (8011eec <etharp_output+0x1ec>)
 8011d20:	f001 ffb8 	bl	8013c94 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d106      	bne.n	8011d38 <etharp_output+0x38>
 8011d2a:	4b6e      	ldr	r3, [pc, #440]	; (8011ee4 <etharp_output+0x1e4>)
 8011d2c:	f240 321f 	movw	r2, #799	; 0x31f
 8011d30:	496f      	ldr	r1, [pc, #444]	; (8011ef0 <etharp_output+0x1f0>)
 8011d32:	486e      	ldr	r0, [pc, #440]	; (8011eec <etharp_output+0x1ec>)
 8011d34:	f001 ffae 	bl	8013c94 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d106      	bne.n	8011d4c <etharp_output+0x4c>
 8011d3e:	4b69      	ldr	r3, [pc, #420]	; (8011ee4 <etharp_output+0x1e4>)
 8011d40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011d44:	496b      	ldr	r1, [pc, #428]	; (8011ef4 <etharp_output+0x1f4>)
 8011d46:	4869      	ldr	r0, [pc, #420]	; (8011eec <etharp_output+0x1ec>)
 8011d48:	f001 ffa4 	bl	8013c94 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	68f9      	ldr	r1, [r7, #12]
 8011d52:	4618      	mov	r0, r3
 8011d54:	f000 fef6 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d002      	beq.n	8011d64 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011d5e:	4b66      	ldr	r3, [pc, #408]	; (8011ef8 <etharp_output+0x1f8>)
 8011d60:	61fb      	str	r3, [r7, #28]
 8011d62:	e0af      	b.n	8011ec4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d6c:	2be0      	cmp	r3, #224	; 0xe0
 8011d6e:	d118      	bne.n	8011da2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011d70:	2301      	movs	r3, #1
 8011d72:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011d74:	2300      	movs	r3, #0
 8011d76:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011d78:	235e      	movs	r3, #94	; 0x5e
 8011d7a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	3301      	adds	r3, #1
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	3302      	adds	r3, #2
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	3303      	adds	r3, #3
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011d9a:	f107 0310 	add.w	r3, r7, #16
 8011d9e:	61fb      	str	r3, [r7, #28]
 8011da0:	e090      	b.n	8011ec4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	3304      	adds	r3, #4
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	405a      	eors	r2, r3
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	3308      	adds	r3, #8
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4013      	ands	r3, r2
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d012      	beq.n	8011de0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011dc0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011dc4:	4293      	cmp	r3, r2
 8011dc6:	d00b      	beq.n	8011de0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	330c      	adds	r3, #12
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d003      	beq.n	8011dda <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	330c      	adds	r3, #12
 8011dd6:	61bb      	str	r3, [r7, #24]
 8011dd8:	e002      	b.n	8011de0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011dda:	f06f 0303 	mvn.w	r3, #3
 8011dde:	e07d      	b.n	8011edc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011de0:	4b46      	ldr	r3, [pc, #280]	; (8011efc <etharp_output+0x1fc>)
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	4619      	mov	r1, r3
 8011de6:	4a46      	ldr	r2, [pc, #280]	; (8011f00 <etharp_output+0x200>)
 8011de8:	460b      	mov	r3, r1
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	440b      	add	r3, r1
 8011dee:	00db      	lsls	r3, r3, #3
 8011df0:	4413      	add	r3, r2
 8011df2:	3314      	adds	r3, #20
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d925      	bls.n	8011e46 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011dfa:	4b40      	ldr	r3, [pc, #256]	; (8011efc <etharp_output+0x1fc>)
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	4619      	mov	r1, r3
 8011e00:	4a3f      	ldr	r2, [pc, #252]	; (8011f00 <etharp_output+0x200>)
 8011e02:	460b      	mov	r3, r1
 8011e04:	005b      	lsls	r3, r3, #1
 8011e06:	440b      	add	r3, r1
 8011e08:	00db      	lsls	r3, r3, #3
 8011e0a:	4413      	add	r3, r2
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011e10:	68fa      	ldr	r2, [r7, #12]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d117      	bne.n	8011e46 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	4b38      	ldr	r3, [pc, #224]	; (8011efc <etharp_output+0x1fc>)
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	4937      	ldr	r1, [pc, #220]	; (8011f00 <etharp_output+0x200>)
 8011e22:	4603      	mov	r3, r0
 8011e24:	005b      	lsls	r3, r3, #1
 8011e26:	4403      	add	r3, r0
 8011e28:	00db      	lsls	r3, r3, #3
 8011e2a:	440b      	add	r3, r1
 8011e2c:	3304      	adds	r3, #4
 8011e2e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d108      	bne.n	8011e46 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011e34:	4b31      	ldr	r3, [pc, #196]	; (8011efc <etharp_output+0x1fc>)
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	461a      	mov	r2, r3
 8011e3a:	68b9      	ldr	r1, [r7, #8]
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f7ff fec5 	bl	8011bcc <etharp_output_to_arp_index>
 8011e42:	4603      	mov	r3, r0
 8011e44:	e04a      	b.n	8011edc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011e46:	2300      	movs	r3, #0
 8011e48:	75fb      	strb	r3, [r7, #23]
 8011e4a:	e031      	b.n	8011eb0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011e4c:	7dfa      	ldrb	r2, [r7, #23]
 8011e4e:	492c      	ldr	r1, [pc, #176]	; (8011f00 <etharp_output+0x200>)
 8011e50:	4613      	mov	r3, r2
 8011e52:	005b      	lsls	r3, r3, #1
 8011e54:	4413      	add	r3, r2
 8011e56:	00db      	lsls	r3, r3, #3
 8011e58:	440b      	add	r3, r1
 8011e5a:	3314      	adds	r3, #20
 8011e5c:	781b      	ldrb	r3, [r3, #0]
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d923      	bls.n	8011eaa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011e62:	7dfa      	ldrb	r2, [r7, #23]
 8011e64:	4926      	ldr	r1, [pc, #152]	; (8011f00 <etharp_output+0x200>)
 8011e66:	4613      	mov	r3, r2
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	4413      	add	r3, r2
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	440b      	add	r3, r1
 8011e70:	3308      	adds	r3, #8
 8011e72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d117      	bne.n	8011eaa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011e7a:	69bb      	ldr	r3, [r7, #24]
 8011e7c:	6819      	ldr	r1, [r3, #0]
 8011e7e:	7dfa      	ldrb	r2, [r7, #23]
 8011e80:	481f      	ldr	r0, [pc, #124]	; (8011f00 <etharp_output+0x200>)
 8011e82:	4613      	mov	r3, r2
 8011e84:	005b      	lsls	r3, r3, #1
 8011e86:	4413      	add	r3, r2
 8011e88:	00db      	lsls	r3, r3, #3
 8011e8a:	4403      	add	r3, r0
 8011e8c:	3304      	adds	r3, #4
 8011e8e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011e90:	4299      	cmp	r1, r3
 8011e92:	d10a      	bne.n	8011eaa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011e94:	4a19      	ldr	r2, [pc, #100]	; (8011efc <etharp_output+0x1fc>)
 8011e96:	7dfb      	ldrb	r3, [r7, #23]
 8011e98:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011e9a:	7dfb      	ldrb	r3, [r7, #23]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	68b9      	ldr	r1, [r7, #8]
 8011ea0:	68f8      	ldr	r0, [r7, #12]
 8011ea2:	f7ff fe93 	bl	8011bcc <etharp_output_to_arp_index>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	e018      	b.n	8011edc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011eaa:	7dfb      	ldrb	r3, [r7, #23]
 8011eac:	3301      	adds	r3, #1
 8011eae:	75fb      	strb	r3, [r7, #23]
 8011eb0:	7dfb      	ldrb	r3, [r7, #23]
 8011eb2:	2b09      	cmp	r3, #9
 8011eb4:	d9ca      	bls.n	8011e4c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011eb6:	68ba      	ldr	r2, [r7, #8]
 8011eb8:	69b9      	ldr	r1, [r7, #24]
 8011eba:	68f8      	ldr	r0, [r7, #12]
 8011ebc:	f000 f822 	bl	8011f04 <etharp_query>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	e00b      	b.n	8011edc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8011eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	68b9      	ldr	r1, [r7, #8]
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f001 fd39 	bl	801394c <ethernet_output>
 8011eda:	4603      	mov	r3, r0
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3720      	adds	r7, #32
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	08016f58 	.word	0x08016f58
 8011ee8:	080170a8 	.word	0x080170a8
 8011eec:	08016fd0 	.word	0x08016fd0
 8011ef0:	080170f8 	.word	0x080170f8
 8011ef4:	08017098 	.word	0x08017098
 8011ef8:	08017748 	.word	0x08017748
 8011efc:	2000f028 	.word	0x2000f028
 8011f00:	2000ef38 	.word	0x2000ef38

08011f04 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b08c      	sub	sp, #48	; 0x30
 8011f08:	af02      	add	r7, sp, #8
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	3322      	adds	r3, #34	; 0x22
 8011f14:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011f16:	23ff      	movs	r3, #255	; 0xff
 8011f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	68f9      	ldr	r1, [r7, #12]
 8011f26:	4618      	mov	r0, r3
 8011f28:	f000 fe0c 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d10c      	bne.n	8011f4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f3a:	2be0      	cmp	r3, #224	; 0xe0
 8011f3c:	d006      	beq.n	8011f4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d003      	beq.n	8011f4c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d102      	bne.n	8011f52 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011f4c:	f06f 030f 	mvn.w	r3, #15
 8011f50:	e102      	b.n	8012158 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	2101      	movs	r1, #1
 8011f56:	68b8      	ldr	r0, [r7, #8]
 8011f58:	f7ff fb60 	bl	801161c <etharp_find_entry>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011f60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	da02      	bge.n	8011f6e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011f68:	8a7b      	ldrh	r3, [r7, #18]
 8011f6a:	b25b      	sxtb	r3, r3
 8011f6c:	e0f4      	b.n	8012158 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011f6e:	8a7b      	ldrh	r3, [r7, #18]
 8011f70:	2b7e      	cmp	r3, #126	; 0x7e
 8011f72:	d906      	bls.n	8011f82 <etharp_query+0x7e>
 8011f74:	4b7a      	ldr	r3, [pc, #488]	; (8012160 <etharp_query+0x25c>)
 8011f76:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011f7a:	497a      	ldr	r1, [pc, #488]	; (8012164 <etharp_query+0x260>)
 8011f7c:	487a      	ldr	r0, [pc, #488]	; (8012168 <etharp_query+0x264>)
 8011f7e:	f001 fe89 	bl	8013c94 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011f82:	8a7b      	ldrh	r3, [r7, #18]
 8011f84:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011f86:	7c7a      	ldrb	r2, [r7, #17]
 8011f88:	4978      	ldr	r1, [pc, #480]	; (801216c <etharp_query+0x268>)
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	005b      	lsls	r3, r3, #1
 8011f8e:	4413      	add	r3, r2
 8011f90:	00db      	lsls	r3, r3, #3
 8011f92:	440b      	add	r3, r1
 8011f94:	3314      	adds	r3, #20
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d115      	bne.n	8011fc8 <etharp_query+0xc4>
    is_new_entry = 1;
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011fa0:	7c7a      	ldrb	r2, [r7, #17]
 8011fa2:	4972      	ldr	r1, [pc, #456]	; (801216c <etharp_query+0x268>)
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	005b      	lsls	r3, r3, #1
 8011fa8:	4413      	add	r3, r2
 8011faa:	00db      	lsls	r3, r3, #3
 8011fac:	440b      	add	r3, r1
 8011fae:	3314      	adds	r3, #20
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011fb4:	7c7a      	ldrb	r2, [r7, #17]
 8011fb6:	496d      	ldr	r1, [pc, #436]	; (801216c <etharp_query+0x268>)
 8011fb8:	4613      	mov	r3, r2
 8011fba:	005b      	lsls	r3, r3, #1
 8011fbc:	4413      	add	r3, r2
 8011fbe:	00db      	lsls	r3, r3, #3
 8011fc0:	440b      	add	r3, r1
 8011fc2:	3308      	adds	r3, #8
 8011fc4:	68fa      	ldr	r2, [r7, #12]
 8011fc6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011fc8:	7c7a      	ldrb	r2, [r7, #17]
 8011fca:	4968      	ldr	r1, [pc, #416]	; (801216c <etharp_query+0x268>)
 8011fcc:	4613      	mov	r3, r2
 8011fce:	005b      	lsls	r3, r3, #1
 8011fd0:	4413      	add	r3, r2
 8011fd2:	00db      	lsls	r3, r3, #3
 8011fd4:	440b      	add	r3, r1
 8011fd6:	3314      	adds	r3, #20
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	2b01      	cmp	r3, #1
 8011fdc:	d011      	beq.n	8012002 <etharp_query+0xfe>
 8011fde:	7c7a      	ldrb	r2, [r7, #17]
 8011fe0:	4962      	ldr	r1, [pc, #392]	; (801216c <etharp_query+0x268>)
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	005b      	lsls	r3, r3, #1
 8011fe6:	4413      	add	r3, r2
 8011fe8:	00db      	lsls	r3, r3, #3
 8011fea:	440b      	add	r3, r1
 8011fec:	3314      	adds	r3, #20
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	d806      	bhi.n	8012002 <etharp_query+0xfe>
 8011ff4:	4b5a      	ldr	r3, [pc, #360]	; (8012160 <etharp_query+0x25c>)
 8011ff6:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011ffa:	495d      	ldr	r1, [pc, #372]	; (8012170 <etharp_query+0x26c>)
 8011ffc:	485a      	ldr	r0, [pc, #360]	; (8012168 <etharp_query+0x264>)
 8011ffe:	f001 fe49 	bl	8013c94 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012002:	6a3b      	ldr	r3, [r7, #32]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d102      	bne.n	801200e <etharp_query+0x10a>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d10c      	bne.n	8012028 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801200e:	68b9      	ldr	r1, [r7, #8]
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f000 f963 	bl	80122dc <etharp_request>
 8012016:	4603      	mov	r3, r0
 8012018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d102      	bne.n	8012028 <etharp_query+0x124>
      return result;
 8012022:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012026:	e097      	b.n	8012158 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d106      	bne.n	801203c <etharp_query+0x138>
 801202e:	4b4c      	ldr	r3, [pc, #304]	; (8012160 <etharp_query+0x25c>)
 8012030:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012034:	494f      	ldr	r1, [pc, #316]	; (8012174 <etharp_query+0x270>)
 8012036:	484c      	ldr	r0, [pc, #304]	; (8012168 <etharp_query+0x264>)
 8012038:	f001 fe2c 	bl	8013c94 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801203c:	7c7a      	ldrb	r2, [r7, #17]
 801203e:	494b      	ldr	r1, [pc, #300]	; (801216c <etharp_query+0x268>)
 8012040:	4613      	mov	r3, r2
 8012042:	005b      	lsls	r3, r3, #1
 8012044:	4413      	add	r3, r2
 8012046:	00db      	lsls	r3, r3, #3
 8012048:	440b      	add	r3, r1
 801204a:	3314      	adds	r3, #20
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b01      	cmp	r3, #1
 8012050:	d918      	bls.n	8012084 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012052:	4a49      	ldr	r2, [pc, #292]	; (8012178 <etharp_query+0x274>)
 8012054:	7c7b      	ldrb	r3, [r7, #17]
 8012056:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012058:	7c7a      	ldrb	r2, [r7, #17]
 801205a:	4613      	mov	r3, r2
 801205c:	005b      	lsls	r3, r3, #1
 801205e:	4413      	add	r3, r2
 8012060:	00db      	lsls	r3, r3, #3
 8012062:	3308      	adds	r3, #8
 8012064:	4a41      	ldr	r2, [pc, #260]	; (801216c <etharp_query+0x268>)
 8012066:	4413      	add	r3, r2
 8012068:	1d1a      	adds	r2, r3, #4
 801206a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	4613      	mov	r3, r2
 8012072:	697a      	ldr	r2, [r7, #20]
 8012074:	6879      	ldr	r1, [r7, #4]
 8012076:	68f8      	ldr	r0, [r7, #12]
 8012078:	f001 fc68 	bl	801394c <ethernet_output>
 801207c:	4603      	mov	r3, r0
 801207e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012082:	e067      	b.n	8012154 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012084:	7c7a      	ldrb	r2, [r7, #17]
 8012086:	4939      	ldr	r1, [pc, #228]	; (801216c <etharp_query+0x268>)
 8012088:	4613      	mov	r3, r2
 801208a:	005b      	lsls	r3, r3, #1
 801208c:	4413      	add	r3, r2
 801208e:	00db      	lsls	r3, r3, #3
 8012090:	440b      	add	r3, r1
 8012092:	3314      	adds	r3, #20
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	2b01      	cmp	r3, #1
 8012098:	d15c      	bne.n	8012154 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801209a:	2300      	movs	r3, #0
 801209c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80120a2:	e01c      	b.n	80120de <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	895a      	ldrh	r2, [r3, #10]
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	891b      	ldrh	r3, [r3, #8]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d10a      	bne.n	80120c6 <etharp_query+0x1c2>
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d006      	beq.n	80120c6 <etharp_query+0x1c2>
 80120b8:	4b29      	ldr	r3, [pc, #164]	; (8012160 <etharp_query+0x25c>)
 80120ba:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80120be:	492f      	ldr	r1, [pc, #188]	; (801217c <etharp_query+0x278>)
 80120c0:	4829      	ldr	r0, [pc, #164]	; (8012168 <etharp_query+0x264>)
 80120c2:	f001 fde7 	bl	8013c94 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	7b1b      	ldrb	r3, [r3, #12]
 80120ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d002      	beq.n	80120d8 <etharp_query+0x1d4>
        copy_needed = 1;
 80120d2:	2301      	movs	r3, #1
 80120d4:	61bb      	str	r3, [r7, #24]
        break;
 80120d6:	e005      	b.n	80120e4 <etharp_query+0x1e0>
      }
      p = p->next;
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	61fb      	str	r3, [r7, #28]
    while (p) {
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d1df      	bne.n	80120a4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d007      	beq.n	80120fa <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	f44f 7120 	mov.w	r1, #640	; 0x280
 80120f0:	200e      	movs	r0, #14
 80120f2:	f7f9 fcf9 	bl	800bae8 <pbuf_clone>
 80120f6:	61f8      	str	r0, [r7, #28]
 80120f8:	e004      	b.n	8012104 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80120fe:	69f8      	ldr	r0, [r7, #28]
 8012100:	f7f9 fb30 	bl	800b764 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d021      	beq.n	801214e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801210a:	7c7a      	ldrb	r2, [r7, #17]
 801210c:	4917      	ldr	r1, [pc, #92]	; (801216c <etharp_query+0x268>)
 801210e:	4613      	mov	r3, r2
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	4413      	add	r3, r2
 8012114:	00db      	lsls	r3, r3, #3
 8012116:	440b      	add	r3, r1
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00a      	beq.n	8012134 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801211e:	7c7a      	ldrb	r2, [r7, #17]
 8012120:	4912      	ldr	r1, [pc, #72]	; (801216c <etharp_query+0x268>)
 8012122:	4613      	mov	r3, r2
 8012124:	005b      	lsls	r3, r3, #1
 8012126:	4413      	add	r3, r2
 8012128:	00db      	lsls	r3, r3, #3
 801212a:	440b      	add	r3, r1
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	4618      	mov	r0, r3
 8012130:	f7f9 fa72 	bl	800b618 <pbuf_free>
      }
      arp_table[i].q = p;
 8012134:	7c7a      	ldrb	r2, [r7, #17]
 8012136:	490d      	ldr	r1, [pc, #52]	; (801216c <etharp_query+0x268>)
 8012138:	4613      	mov	r3, r2
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	4413      	add	r3, r2
 801213e:	00db      	lsls	r3, r3, #3
 8012140:	440b      	add	r3, r1
 8012142:	69fa      	ldr	r2, [r7, #28]
 8012144:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012146:	2300      	movs	r3, #0
 8012148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801214c:	e002      	b.n	8012154 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801214e:	23ff      	movs	r3, #255	; 0xff
 8012150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012158:	4618      	mov	r0, r3
 801215a:	3728      	adds	r7, #40	; 0x28
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	08016f58 	.word	0x08016f58
 8012164:	08017104 	.word	0x08017104
 8012168:	08016fd0 	.word	0x08016fd0
 801216c:	2000ef38 	.word	0x2000ef38
 8012170:	08017114 	.word	0x08017114
 8012174:	080170f8 	.word	0x080170f8
 8012178:	2000f028 	.word	0x2000f028
 801217c:	0801713c 	.word	0x0801713c

08012180 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b08a      	sub	sp, #40	; 0x28
 8012184:	af02      	add	r7, sp, #8
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	607a      	str	r2, [r7, #4]
 801218c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801218e:	2300      	movs	r3, #0
 8012190:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d106      	bne.n	80121a6 <etharp_raw+0x26>
 8012198:	4b3a      	ldr	r3, [pc, #232]	; (8012284 <etharp_raw+0x104>)
 801219a:	f240 4257 	movw	r2, #1111	; 0x457
 801219e:	493a      	ldr	r1, [pc, #232]	; (8012288 <etharp_raw+0x108>)
 80121a0:	483a      	ldr	r0, [pc, #232]	; (801228c <etharp_raw+0x10c>)
 80121a2:	f001 fd77 	bl	8013c94 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80121a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80121aa:	211c      	movs	r1, #28
 80121ac:	200e      	movs	r0, #14
 80121ae:	f7f8 ff53 	bl	800b058 <pbuf_alloc>
 80121b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80121b4:	69bb      	ldr	r3, [r7, #24]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d102      	bne.n	80121c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80121ba:	f04f 33ff 	mov.w	r3, #4294967295
 80121be:	e05d      	b.n	801227c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	895b      	ldrh	r3, [r3, #10]
 80121c4:	2b1b      	cmp	r3, #27
 80121c6:	d806      	bhi.n	80121d6 <etharp_raw+0x56>
 80121c8:	4b2e      	ldr	r3, [pc, #184]	; (8012284 <etharp_raw+0x104>)
 80121ca:	f240 4263 	movw	r2, #1123	; 0x463
 80121ce:	4930      	ldr	r1, [pc, #192]	; (8012290 <etharp_raw+0x110>)
 80121d0:	482e      	ldr	r0, [pc, #184]	; (801228c <etharp_raw+0x10c>)
 80121d2:	f001 fd5f 	bl	8013c94 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80121dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80121de:	4618      	mov	r0, r3
 80121e0:	f7f7 feea 	bl	8009fb8 <lwip_htons>
 80121e4:	4603      	mov	r3, r0
 80121e6:	461a      	mov	r2, r3
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121f2:	2b06      	cmp	r3, #6
 80121f4:	d006      	beq.n	8012204 <etharp_raw+0x84>
 80121f6:	4b23      	ldr	r3, [pc, #140]	; (8012284 <etharp_raw+0x104>)
 80121f8:	f240 426a 	movw	r2, #1130	; 0x46a
 80121fc:	4925      	ldr	r1, [pc, #148]	; (8012294 <etharp_raw+0x114>)
 80121fe:	4823      	ldr	r0, [pc, #140]	; (801228c <etharp_raw+0x10c>)
 8012200:	f001 fd48 	bl	8013c94 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	3308      	adds	r3, #8
 8012208:	2206      	movs	r2, #6
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	4618      	mov	r0, r3
 801220e:	f001 fd2e 	bl	8013c6e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	3312      	adds	r3, #18
 8012216:	2206      	movs	r2, #6
 8012218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801221a:	4618      	mov	r0, r3
 801221c:	f001 fd27 	bl	8013c6e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	330e      	adds	r3, #14
 8012224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012226:	6812      	ldr	r2, [r2, #0]
 8012228:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	3318      	adds	r3, #24
 801222e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012230:	6812      	ldr	r2, [r2, #0]
 8012232:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	2200      	movs	r2, #0
 8012238:	701a      	strb	r2, [r3, #0]
 801223a:	2200      	movs	r2, #0
 801223c:	f042 0201 	orr.w	r2, r2, #1
 8012240:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	2200      	movs	r2, #0
 8012246:	f042 0208 	orr.w	r2, r2, #8
 801224a:	709a      	strb	r2, [r3, #2]
 801224c:	2200      	movs	r2, #0
 801224e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	2206      	movs	r2, #6
 8012254:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2204      	movs	r2, #4
 801225a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801225c:	f640 0306 	movw	r3, #2054	; 0x806
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	68ba      	ldr	r2, [r7, #8]
 8012266:	69b9      	ldr	r1, [r7, #24]
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f001 fb6f 	bl	801394c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801226e:	69b8      	ldr	r0, [r7, #24]
 8012270:	f7f9 f9d2 	bl	800b618 <pbuf_free>
  p = NULL;
 8012274:	2300      	movs	r3, #0
 8012276:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012278:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801227c:	4618      	mov	r0, r3
 801227e:	3720      	adds	r7, #32
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	08016f58 	.word	0x08016f58
 8012288:	080170a8 	.word	0x080170a8
 801228c:	08016fd0 	.word	0x08016fd0
 8012290:	08017158 	.word	0x08017158
 8012294:	0801718c 	.word	0x0801718c

08012298 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b088      	sub	sp, #32
 801229c:	af04      	add	r7, sp, #16
 801229e:	60f8      	str	r0, [r7, #12]
 80122a0:	60b9      	str	r1, [r7, #8]
 80122a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80122b4:	2201      	movs	r2, #1
 80122b6:	9203      	str	r2, [sp, #12]
 80122b8:	68ba      	ldr	r2, [r7, #8]
 80122ba:	9202      	str	r2, [sp, #8]
 80122bc:	4a06      	ldr	r2, [pc, #24]	; (80122d8 <etharp_request_dst+0x40>)
 80122be:	9201      	str	r2, [sp, #4]
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	4603      	mov	r3, r0
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	68f8      	ldr	r0, [r7, #12]
 80122c8:	f7ff ff5a 	bl	8012180 <etharp_raw>
 80122cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	08017750 	.word	0x08017750

080122dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80122e6:	4a05      	ldr	r2, [pc, #20]	; (80122fc <etharp_request+0x20>)
 80122e8:	6839      	ldr	r1, [r7, #0]
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f7ff ffd4 	bl	8012298 <etharp_request_dst>
 80122f0:	4603      	mov	r3, r0
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3708      	adds	r7, #8
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	08017748 	.word	0x08017748

08012300 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b08e      	sub	sp, #56	; 0x38
 8012304:	af04      	add	r7, sp, #16
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801230a:	4b79      	ldr	r3, [pc, #484]	; (80124f0 <icmp_input+0x1f0>)
 801230c:	689b      	ldr	r3, [r3, #8]
 801230e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	f003 030f 	and.w	r3, r3, #15
 8012318:	b2db      	uxtb	r3, r3
 801231a:	009b      	lsls	r3, r3, #2
 801231c:	b2db      	uxtb	r3, r3
 801231e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012322:	2b13      	cmp	r3, #19
 8012324:	f240 80cd 	bls.w	80124c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	895b      	ldrh	r3, [r3, #10]
 801232c:	2b03      	cmp	r3, #3
 801232e:	f240 80ca 	bls.w	80124c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801233c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012340:	2b00      	cmp	r3, #0
 8012342:	f000 80b7 	beq.w	80124b4 <icmp_input+0x1b4>
 8012346:	2b08      	cmp	r3, #8
 8012348:	f040 80b7 	bne.w	80124ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801234c:	4b69      	ldr	r3, [pc, #420]	; (80124f4 <icmp_input+0x1f4>)
 801234e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012350:	4b67      	ldr	r3, [pc, #412]	; (80124f0 <icmp_input+0x1f0>)
 8012352:	695b      	ldr	r3, [r3, #20]
 8012354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012358:	2be0      	cmp	r3, #224	; 0xe0
 801235a:	f000 80bb 	beq.w	80124d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801235e:	4b64      	ldr	r3, [pc, #400]	; (80124f0 <icmp_input+0x1f0>)
 8012360:	695a      	ldr	r2, [r3, #20]
 8012362:	4b63      	ldr	r3, [pc, #396]	; (80124f0 <icmp_input+0x1f0>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	4619      	mov	r1, r3
 8012368:	4610      	mov	r0, r2
 801236a:	f000 fbeb 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 801236e:	4603      	mov	r3, r0
 8012370:	2b00      	cmp	r3, #0
 8012372:	f040 80b1 	bne.w	80124d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	891b      	ldrh	r3, [r3, #8]
 801237a:	2b07      	cmp	r3, #7
 801237c:	f240 80a5 	bls.w	80124ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012382:	330e      	adds	r3, #14
 8012384:	4619      	mov	r1, r3
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f7f9 f8b0 	bl	800b4ec <pbuf_add_header>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d04b      	beq.n	801242a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	891a      	ldrh	r2, [r3, #8]
 8012396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012398:	4413      	add	r3, r2
 801239a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	891b      	ldrh	r3, [r3, #8]
 80123a0:	8b7a      	ldrh	r2, [r7, #26]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	f0c0 809a 	bcc.w	80124dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80123a8:	8b7b      	ldrh	r3, [r7, #26]
 80123aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123ae:	4619      	mov	r1, r3
 80123b0:	200e      	movs	r0, #14
 80123b2:	f7f8 fe51 	bl	800b058 <pbuf_alloc>
 80123b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	f000 8090 	beq.w	80124e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	895b      	ldrh	r3, [r3, #10]
 80123c4:	461a      	mov	r2, r3
 80123c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123c8:	3308      	adds	r3, #8
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d203      	bcs.n	80123d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80123ce:	6978      	ldr	r0, [r7, #20]
 80123d0:	f7f9 f922 	bl	800b618 <pbuf_free>
          goto icmperr;
 80123d4:	e085      	b.n	80124e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80123dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80123de:	4618      	mov	r0, r3
 80123e0:	f001 fc45 	bl	8013c6e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80123e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123e6:	4619      	mov	r1, r3
 80123e8:	6978      	ldr	r0, [r7, #20]
 80123ea:	f7f9 f88f 	bl	800b50c <pbuf_remove_header>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d009      	beq.n	8012408 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80123f4:	4b40      	ldr	r3, [pc, #256]	; (80124f8 <icmp_input+0x1f8>)
 80123f6:	22b6      	movs	r2, #182	; 0xb6
 80123f8:	4940      	ldr	r1, [pc, #256]	; (80124fc <icmp_input+0x1fc>)
 80123fa:	4841      	ldr	r0, [pc, #260]	; (8012500 <icmp_input+0x200>)
 80123fc:	f001 fc4a 	bl	8013c94 <iprintf>
          pbuf_free(r);
 8012400:	6978      	ldr	r0, [r7, #20]
 8012402:	f7f9 f909 	bl	800b618 <pbuf_free>
          goto icmperr;
 8012406:	e06c      	b.n	80124e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012408:	6879      	ldr	r1, [r7, #4]
 801240a:	6978      	ldr	r0, [r7, #20]
 801240c:	f7f9 fa28 	bl	800b860 <pbuf_copy>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d003      	beq.n	801241e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012416:	6978      	ldr	r0, [r7, #20]
 8012418:	f7f9 f8fe 	bl	800b618 <pbuf_free>
          goto icmperr;
 801241c:	e061      	b.n	80124e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f7f9 f8fa 	bl	800b618 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	607b      	str	r3, [r7, #4]
 8012428:	e00f      	b.n	801244a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801242a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801242c:	330e      	adds	r3, #14
 801242e:	4619      	mov	r1, r3
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f7f9 f86b 	bl	800b50c <pbuf_remove_header>
 8012436:	4603      	mov	r3, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	d006      	beq.n	801244a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801243c:	4b2e      	ldr	r3, [pc, #184]	; (80124f8 <icmp_input+0x1f8>)
 801243e:	22c7      	movs	r2, #199	; 0xc7
 8012440:	4930      	ldr	r1, [pc, #192]	; (8012504 <icmp_input+0x204>)
 8012442:	482f      	ldr	r0, [pc, #188]	; (8012500 <icmp_input+0x200>)
 8012444:	f001 fc26 	bl	8013c94 <iprintf>
          goto icmperr;
 8012448:	e04b      	b.n	80124e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012452:	4619      	mov	r1, r3
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7f9 f849 	bl	800b4ec <pbuf_add_header>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d12b      	bne.n	80124b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801246e:	4b20      	ldr	r3, [pc, #128]	; (80124f0 <icmp_input+0x1f0>)
 8012470:	691a      	ldr	r2, [r3, #16]
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	2200      	movs	r2, #0
 801247a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	2200      	movs	r2, #0
 8012480:	709a      	strb	r2, [r3, #2]
 8012482:	2200      	movs	r2, #0
 8012484:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	22ff      	movs	r2, #255	; 0xff
 801248a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2200      	movs	r2, #0
 8012490:	729a      	strb	r2, [r3, #10]
 8012492:	2200      	movs	r2, #0
 8012494:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	9302      	str	r3, [sp, #8]
 801249a:	2301      	movs	r3, #1
 801249c:	9301      	str	r3, [sp, #4]
 801249e:	2300      	movs	r3, #0
 80124a0:	9300      	str	r3, [sp, #0]
 80124a2:	23ff      	movs	r3, #255	; 0xff
 80124a4:	2200      	movs	r2, #0
 80124a6:	69f9      	ldr	r1, [r7, #28]
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 fa73 	bl	8012994 <ip4_output_if>
 80124ae:	4603      	mov	r3, r0
 80124b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80124b2:	e001      	b.n	80124b8 <icmp_input+0x1b8>
      break;
 80124b4:	bf00      	nop
 80124b6:	e000      	b.n	80124ba <icmp_input+0x1ba>
      break;
 80124b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f7f9 f8ac 	bl	800b618 <pbuf_free>
  return;
 80124c0:	e013      	b.n	80124ea <icmp_input+0x1ea>
    goto lenerr;
 80124c2:	bf00      	nop
 80124c4:	e002      	b.n	80124cc <icmp_input+0x1cc>
    goto lenerr;
 80124c6:	bf00      	nop
 80124c8:	e000      	b.n	80124cc <icmp_input+0x1cc>
        goto lenerr;
 80124ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f7f9 f8a3 	bl	800b618 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80124d2:	e00a      	b.n	80124ea <icmp_input+0x1ea>
        goto icmperr;
 80124d4:	bf00      	nop
 80124d6:	e004      	b.n	80124e2 <icmp_input+0x1e2>
        goto icmperr;
 80124d8:	bf00      	nop
 80124da:	e002      	b.n	80124e2 <icmp_input+0x1e2>
          goto icmperr;
 80124dc:	bf00      	nop
 80124de:	e000      	b.n	80124e2 <icmp_input+0x1e2>
          goto icmperr;
 80124e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f7f9 f898 	bl	800b618 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80124e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80124ea:	3728      	adds	r7, #40	; 0x28
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	200127c0 	.word	0x200127c0
 80124f4:	200127d4 	.word	0x200127d4
 80124f8:	080171d0 	.word	0x080171d0
 80124fc:	08017208 	.word	0x08017208
 8012500:	08017240 	.word	0x08017240
 8012504:	08017268 	.word	0x08017268

08012508 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	460b      	mov	r3, r1
 8012512:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012514:	78fb      	ldrb	r3, [r7, #3]
 8012516:	461a      	mov	r2, r3
 8012518:	2103      	movs	r1, #3
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 f814 	bl	8012548 <icmp_send_response>
}
 8012520:	bf00      	nop
 8012522:	3708      	adds	r7, #8
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	460b      	mov	r3, r1
 8012532:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012534:	78fb      	ldrb	r3, [r7, #3]
 8012536:	461a      	mov	r2, r3
 8012538:	210b      	movs	r1, #11
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f804 	bl	8012548 <icmp_send_response>
}
 8012540:	bf00      	nop
 8012542:	3708      	adds	r7, #8
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b08c      	sub	sp, #48	; 0x30
 801254c:	af04      	add	r7, sp, #16
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	460b      	mov	r3, r1
 8012552:	70fb      	strb	r3, [r7, #3]
 8012554:	4613      	mov	r3, r2
 8012556:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012558:	f44f 7220 	mov.w	r2, #640	; 0x280
 801255c:	2124      	movs	r1, #36	; 0x24
 801255e:	2022      	movs	r0, #34	; 0x22
 8012560:	f7f8 fd7a 	bl	800b058 <pbuf_alloc>
 8012564:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012566:	69fb      	ldr	r3, [r7, #28]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d04c      	beq.n	8012606 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	895b      	ldrh	r3, [r3, #10]
 8012570:	2b23      	cmp	r3, #35	; 0x23
 8012572:	d806      	bhi.n	8012582 <icmp_send_response+0x3a>
 8012574:	4b26      	ldr	r3, [pc, #152]	; (8012610 <icmp_send_response+0xc8>)
 8012576:	f240 1269 	movw	r2, #361	; 0x169
 801257a:	4926      	ldr	r1, [pc, #152]	; (8012614 <icmp_send_response+0xcc>)
 801257c:	4826      	ldr	r0, [pc, #152]	; (8012618 <icmp_send_response+0xd0>)
 801257e:	f001 fb89 	bl	8013c94 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	78fa      	ldrb	r2, [r7, #3]
 8012592:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	78ba      	ldrb	r2, [r7, #2]
 8012598:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	2200      	movs	r2, #0
 801259e:	711a      	strb	r2, [r3, #4]
 80125a0:	2200      	movs	r2, #0
 80125a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	2200      	movs	r2, #0
 80125a8:	719a      	strb	r2, [r3, #6]
 80125aa:	2200      	movs	r2, #0
 80125ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	f103 0008 	add.w	r0, r3, #8
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	221c      	movs	r2, #28
 80125bc:	4619      	mov	r1, r3
 80125be:	f001 fb56 	bl	8013c6e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	68db      	ldr	r3, [r3, #12]
 80125c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80125c8:	f107 030c 	add.w	r3, r7, #12
 80125cc:	4618      	mov	r0, r3
 80125ce:	f000 f825 	bl	801261c <ip4_route>
 80125d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d011      	beq.n	80125fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	2200      	movs	r2, #0
 80125de:	709a      	strb	r2, [r3, #2]
 80125e0:	2200      	movs	r2, #0
 80125e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80125e4:	f107 020c 	add.w	r2, r7, #12
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	9302      	str	r3, [sp, #8]
 80125ec:	2301      	movs	r3, #1
 80125ee:	9301      	str	r3, [sp, #4]
 80125f0:	2300      	movs	r3, #0
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	23ff      	movs	r3, #255	; 0xff
 80125f6:	2100      	movs	r1, #0
 80125f8:	69f8      	ldr	r0, [r7, #28]
 80125fa:	f000 f9cb 	bl	8012994 <ip4_output_if>
  }
  pbuf_free(q);
 80125fe:	69f8      	ldr	r0, [r7, #28]
 8012600:	f7f9 f80a 	bl	800b618 <pbuf_free>
 8012604:	e000      	b.n	8012608 <icmp_send_response+0xc0>
    return;
 8012606:	bf00      	nop
}
 8012608:	3720      	adds	r7, #32
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	080171d0 	.word	0x080171d0
 8012614:	0801729c 	.word	0x0801729c
 8012618:	08017240 	.word	0x08017240

0801261c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801261c:	b480      	push	{r7}
 801261e:	b085      	sub	sp, #20
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012624:	4b33      	ldr	r3, [pc, #204]	; (80126f4 <ip4_route+0xd8>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	60fb      	str	r3, [r7, #12]
 801262a:	e036      	b.n	801269a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012632:	f003 0301 	and.w	r3, r3, #1
 8012636:	b2db      	uxtb	r3, r3
 8012638:	2b00      	cmp	r3, #0
 801263a:	d02b      	beq.n	8012694 <ip4_route+0x78>
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012642:	089b      	lsrs	r3, r3, #2
 8012644:	f003 0301 	and.w	r3, r3, #1
 8012648:	b2db      	uxtb	r3, r3
 801264a:	2b00      	cmp	r3, #0
 801264c:	d022      	beq.n	8012694 <ip4_route+0x78>
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	3304      	adds	r3, #4
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d01d      	beq.n	8012694 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3304      	adds	r3, #4
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	405a      	eors	r2, r3
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	3308      	adds	r3, #8
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4013      	ands	r3, r2
 801266c:	2b00      	cmp	r3, #0
 801266e:	d101      	bne.n	8012674 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	e038      	b.n	80126e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801267a:	f003 0302 	and.w	r3, r3, #2
 801267e:	2b00      	cmp	r3, #0
 8012680:	d108      	bne.n	8012694 <ip4_route+0x78>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	330c      	adds	r3, #12
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	429a      	cmp	r2, r3
 801268e:	d101      	bne.n	8012694 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	e028      	b.n	80126e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	60fb      	str	r3, [r7, #12]
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d1c5      	bne.n	801262c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80126a0:	4b15      	ldr	r3, [pc, #84]	; (80126f8 <ip4_route+0xdc>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d01a      	beq.n	80126de <ip4_route+0xc2>
 80126a8:	4b13      	ldr	r3, [pc, #76]	; (80126f8 <ip4_route+0xdc>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80126b0:	f003 0301 	and.w	r3, r3, #1
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d012      	beq.n	80126de <ip4_route+0xc2>
 80126b8:	4b0f      	ldr	r3, [pc, #60]	; (80126f8 <ip4_route+0xdc>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80126c0:	f003 0304 	and.w	r3, r3, #4
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00a      	beq.n	80126de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80126c8:	4b0b      	ldr	r3, [pc, #44]	; (80126f8 <ip4_route+0xdc>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	3304      	adds	r3, #4
 80126ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d004      	beq.n	80126de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	2b7f      	cmp	r3, #127	; 0x7f
 80126dc:	d101      	bne.n	80126e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80126de:	2300      	movs	r3, #0
 80126e0:	e001      	b.n	80126e6 <ip4_route+0xca>
  }

  return netif_default;
 80126e2:	4b05      	ldr	r3, [pc, #20]	; (80126f8 <ip4_route+0xdc>)
 80126e4:	681b      	ldr	r3, [r3, #0]
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3714      	adds	r7, #20
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr
 80126f2:	bf00      	nop
 80126f4:	20015ec4 	.word	0x20015ec4
 80126f8:	20015ec8 	.word	0x20015ec8

080126fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801270a:	f003 0301 	and.w	r3, r3, #1
 801270e:	b2db      	uxtb	r3, r3
 8012710:	2b00      	cmp	r3, #0
 8012712:	d016      	beq.n	8012742 <ip4_input_accept+0x46>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	3304      	adds	r3, #4
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d011      	beq.n	8012742 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801271e:	4b0b      	ldr	r3, [pc, #44]	; (801274c <ip4_input_accept+0x50>)
 8012720:	695a      	ldr	r2, [r3, #20]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	3304      	adds	r3, #4
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	429a      	cmp	r2, r3
 801272a:	d008      	beq.n	801273e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801272c:	4b07      	ldr	r3, [pc, #28]	; (801274c <ip4_input_accept+0x50>)
 801272e:	695b      	ldr	r3, [r3, #20]
 8012730:	6879      	ldr	r1, [r7, #4]
 8012732:	4618      	mov	r0, r3
 8012734:	f000 fa06 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 8012738:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801273a:	2b00      	cmp	r3, #0
 801273c:	d001      	beq.n	8012742 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801273e:	2301      	movs	r3, #1
 8012740:	e000      	b.n	8012744 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012742:	2300      	movs	r3, #0
}
 8012744:	4618      	mov	r0, r3
 8012746:	3708      	adds	r7, #8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	200127c0 	.word	0x200127c0

08012750 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b086      	sub	sp, #24
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	091b      	lsrs	r3, r3, #4
 8012766:	b2db      	uxtb	r3, r3
 8012768:	2b04      	cmp	r3, #4
 801276a:	d004      	beq.n	8012776 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7f8 ff53 	bl	800b618 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012772:	2300      	movs	r3, #0
 8012774:	e105      	b.n	8012982 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	f003 030f 	and.w	r3, r3, #15
 801277e:	b2db      	uxtb	r3, r3
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	b2db      	uxtb	r3, r3
 8012784:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	885b      	ldrh	r3, [r3, #2]
 801278a:	b29b      	uxth	r3, r3
 801278c:	4618      	mov	r0, r3
 801278e:	f7f7 fc13 	bl	8009fb8 <lwip_htons>
 8012792:	4603      	mov	r3, r0
 8012794:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	891b      	ldrh	r3, [r3, #8]
 801279a:	89ba      	ldrh	r2, [r7, #12]
 801279c:	429a      	cmp	r2, r3
 801279e:	d204      	bcs.n	80127aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80127a0:	89bb      	ldrh	r3, [r7, #12]
 80127a2:	4619      	mov	r1, r3
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7f8 fdb1 	bl	800b30c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	895b      	ldrh	r3, [r3, #10]
 80127ae:	89fa      	ldrh	r2, [r7, #14]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d807      	bhi.n	80127c4 <ip4_input+0x74>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	891b      	ldrh	r3, [r3, #8]
 80127b8:	89ba      	ldrh	r2, [r7, #12]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d802      	bhi.n	80127c4 <ip4_input+0x74>
 80127be:	89fb      	ldrh	r3, [r7, #14]
 80127c0:	2b13      	cmp	r3, #19
 80127c2:	d804      	bhi.n	80127ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7f8 ff27 	bl	800b618 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80127ca:	2300      	movs	r3, #0
 80127cc:	e0d9      	b.n	8012982 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	691b      	ldr	r3, [r3, #16]
 80127d2:	4a6e      	ldr	r2, [pc, #440]	; (801298c <ip4_input+0x23c>)
 80127d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	4a6c      	ldr	r2, [pc, #432]	; (801298c <ip4_input+0x23c>)
 80127dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80127de:	4b6b      	ldr	r3, [pc, #428]	; (801298c <ip4_input+0x23c>)
 80127e0:	695b      	ldr	r3, [r3, #20]
 80127e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80127e6:	2be0      	cmp	r3, #224	; 0xe0
 80127e8:	d112      	bne.n	8012810 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80127f0:	f003 0301 	and.w	r3, r3, #1
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d007      	beq.n	801280a <ip4_input+0xba>
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	3304      	adds	r3, #4
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d002      	beq.n	801280a <ip4_input+0xba>
      netif = inp;
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	613b      	str	r3, [r7, #16]
 8012808:	e02a      	b.n	8012860 <ip4_input+0x110>
    } else {
      netif = NULL;
 801280a:	2300      	movs	r3, #0
 801280c:	613b      	str	r3, [r7, #16]
 801280e:	e027      	b.n	8012860 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012810:	6838      	ldr	r0, [r7, #0]
 8012812:	f7ff ff73 	bl	80126fc <ip4_input_accept>
 8012816:	4603      	mov	r3, r0
 8012818:	2b00      	cmp	r3, #0
 801281a:	d002      	beq.n	8012822 <ip4_input+0xd2>
      netif = inp;
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	613b      	str	r3, [r7, #16]
 8012820:	e01e      	b.n	8012860 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012822:	2300      	movs	r3, #0
 8012824:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012826:	4b59      	ldr	r3, [pc, #356]	; (801298c <ip4_input+0x23c>)
 8012828:	695b      	ldr	r3, [r3, #20]
 801282a:	b2db      	uxtb	r3, r3
 801282c:	2b7f      	cmp	r3, #127	; 0x7f
 801282e:	d017      	beq.n	8012860 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012830:	4b57      	ldr	r3, [pc, #348]	; (8012990 <ip4_input+0x240>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	613b      	str	r3, [r7, #16]
 8012836:	e00e      	b.n	8012856 <ip4_input+0x106>
          if (netif == inp) {
 8012838:	693a      	ldr	r2, [r7, #16]
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	429a      	cmp	r2, r3
 801283e:	d006      	beq.n	801284e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012840:	6938      	ldr	r0, [r7, #16]
 8012842:	f7ff ff5b 	bl	80126fc <ip4_input_accept>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d108      	bne.n	801285e <ip4_input+0x10e>
 801284c:	e000      	b.n	8012850 <ip4_input+0x100>
            continue;
 801284e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	613b      	str	r3, [r7, #16]
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1ed      	bne.n	8012838 <ip4_input+0xe8>
 801285c:	e000      	b.n	8012860 <ip4_input+0x110>
            break;
 801285e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012860:	4b4a      	ldr	r3, [pc, #296]	; (801298c <ip4_input+0x23c>)
 8012862:	691b      	ldr	r3, [r3, #16]
 8012864:	6839      	ldr	r1, [r7, #0]
 8012866:	4618      	mov	r0, r3
 8012868:	f000 f96c 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 801286c:	4603      	mov	r3, r0
 801286e:	2b00      	cmp	r3, #0
 8012870:	d105      	bne.n	801287e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012872:	4b46      	ldr	r3, [pc, #280]	; (801298c <ip4_input+0x23c>)
 8012874:	691b      	ldr	r3, [r3, #16]
 8012876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801287a:	2be0      	cmp	r3, #224	; 0xe0
 801287c:	d104      	bne.n	8012888 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7f8 feca 	bl	800b618 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012884:	2300      	movs	r3, #0
 8012886:	e07c      	b.n	8012982 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d104      	bne.n	8012898 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f7f8 fec2 	bl	800b618 <pbuf_free>
    return ERR_OK;
 8012894:	2300      	movs	r3, #0
 8012896:	e074      	b.n	8012982 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	88db      	ldrh	r3, [r3, #6]
 801289c:	b29b      	uxth	r3, r3
 801289e:	461a      	mov	r2, r3
 80128a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80128a4:	4013      	ands	r3, r2
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00b      	beq.n	80128c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fc90 	bl	80131d0 <ip4_reass>
 80128b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d101      	bne.n	80128bc <ip4_input+0x16c>
      return ERR_OK;
 80128b8:	2300      	movs	r3, #0
 80128ba:	e062      	b.n	8012982 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	685b      	ldr	r3, [r3, #4]
 80128c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80128c2:	4a32      	ldr	r2, [pc, #200]	; (801298c <ip4_input+0x23c>)
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80128c8:	4a30      	ldr	r2, [pc, #192]	; (801298c <ip4_input+0x23c>)
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80128ce:	4a2f      	ldr	r2, [pc, #188]	; (801298c <ip4_input+0x23c>)
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	f003 030f 	and.w	r3, r3, #15
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	009b      	lsls	r3, r3, #2
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	b29a      	uxth	r2, r3
 80128e4:	4b29      	ldr	r3, [pc, #164]	; (801298c <ip4_input+0x23c>)
 80128e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80128e8:	89fb      	ldrh	r3, [r7, #14]
 80128ea:	4619      	mov	r1, r3
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7f8 fe0d 	bl	800b50c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	7a5b      	ldrb	r3, [r3, #9]
 80128f6:	2b06      	cmp	r3, #6
 80128f8:	d009      	beq.n	801290e <ip4_input+0x1be>
 80128fa:	2b11      	cmp	r3, #17
 80128fc:	d002      	beq.n	8012904 <ip4_input+0x1b4>
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d00a      	beq.n	8012918 <ip4_input+0x1c8>
 8012902:	e00e      	b.n	8012922 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012904:	6839      	ldr	r1, [r7, #0]
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f7fe fc6a 	bl	80111e0 <udp_input>
        break;
 801290c:	e026      	b.n	801295c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801290e:	6839      	ldr	r1, [r7, #0]
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7fa fca9 	bl	800d268 <tcp_input>
        break;
 8012916:	e021      	b.n	801295c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012918:	6839      	ldr	r1, [r7, #0]
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f7ff fcf0 	bl	8012300 <icmp_input>
        break;
 8012920:	e01c      	b.n	801295c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012922:	4b1a      	ldr	r3, [pc, #104]	; (801298c <ip4_input+0x23c>)
 8012924:	695b      	ldr	r3, [r3, #20]
 8012926:	6939      	ldr	r1, [r7, #16]
 8012928:	4618      	mov	r0, r3
 801292a:	f000 f90b 	bl	8012b44 <ip4_addr_isbroadcast_u32>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d10f      	bne.n	8012954 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012934:	4b15      	ldr	r3, [pc, #84]	; (801298c <ip4_input+0x23c>)
 8012936:	695b      	ldr	r3, [r3, #20]
 8012938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801293c:	2be0      	cmp	r3, #224	; 0xe0
 801293e:	d009      	beq.n	8012954 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012940:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012944:	4619      	mov	r1, r3
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f7f8 fe53 	bl	800b5f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801294c:	2102      	movs	r1, #2
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f7ff fdda 	bl	8012508 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7f8 fe5f 	bl	800b618 <pbuf_free>
        break;
 801295a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801295c:	4b0b      	ldr	r3, [pc, #44]	; (801298c <ip4_input+0x23c>)
 801295e:	2200      	movs	r2, #0
 8012960:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012962:	4b0a      	ldr	r3, [pc, #40]	; (801298c <ip4_input+0x23c>)
 8012964:	2200      	movs	r2, #0
 8012966:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012968:	4b08      	ldr	r3, [pc, #32]	; (801298c <ip4_input+0x23c>)
 801296a:	2200      	movs	r2, #0
 801296c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801296e:	4b07      	ldr	r3, [pc, #28]	; (801298c <ip4_input+0x23c>)
 8012970:	2200      	movs	r2, #0
 8012972:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012974:	4b05      	ldr	r3, [pc, #20]	; (801298c <ip4_input+0x23c>)
 8012976:	2200      	movs	r2, #0
 8012978:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801297a:	4b04      	ldr	r3, [pc, #16]	; (801298c <ip4_input+0x23c>)
 801297c:	2200      	movs	r2, #0
 801297e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012980:	2300      	movs	r3, #0
}
 8012982:	4618      	mov	r0, r3
 8012984:	3718      	adds	r7, #24
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
 801298a:	bf00      	nop
 801298c:	200127c0 	.word	0x200127c0
 8012990:	20015ec4 	.word	0x20015ec4

08012994 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b08a      	sub	sp, #40	; 0x28
 8012998:	af04      	add	r7, sp, #16
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
 80129a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d009      	beq.n	80129c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d003      	beq.n	80129ba <ip4_output_if+0x26>
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d102      	bne.n	80129c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80129ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129bc:	3304      	adds	r3, #4
 80129be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80129c0:	78fa      	ldrb	r2, [r7, #3]
 80129c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c4:	9302      	str	r3, [sp, #8]
 80129c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80129ca:	9301      	str	r3, [sp, #4]
 80129cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80129d0:	9300      	str	r3, [sp, #0]
 80129d2:	4613      	mov	r3, r2
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	6979      	ldr	r1, [r7, #20]
 80129d8:	68f8      	ldr	r0, [r7, #12]
 80129da:	f000 f805 	bl	80129e8 <ip4_output_if_src>
 80129de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3718      	adds	r7, #24
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b088      	sub	sp, #32
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	607a      	str	r2, [r7, #4]
 80129f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	7b9b      	ldrb	r3, [r3, #14]
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d006      	beq.n	8012a0c <ip4_output_if_src+0x24>
 80129fe:	4b4b      	ldr	r3, [pc, #300]	; (8012b2c <ip4_output_if_src+0x144>)
 8012a00:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012a04:	494a      	ldr	r1, [pc, #296]	; (8012b30 <ip4_output_if_src+0x148>)
 8012a06:	484b      	ldr	r0, [pc, #300]	; (8012b34 <ip4_output_if_src+0x14c>)
 8012a08:	f001 f944 	bl	8013c94 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d060      	beq.n	8012ad4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012a12:	2314      	movs	r3, #20
 8012a14:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012a16:	2114      	movs	r1, #20
 8012a18:	68f8      	ldr	r0, [r7, #12]
 8012a1a:	f7f8 fd67 	bl	800b4ec <pbuf_add_header>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d002      	beq.n	8012a2a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012a24:	f06f 0301 	mvn.w	r3, #1
 8012a28:	e07c      	b.n	8012b24 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	895b      	ldrh	r3, [r3, #10]
 8012a34:	2b13      	cmp	r3, #19
 8012a36:	d806      	bhi.n	8012a46 <ip4_output_if_src+0x5e>
 8012a38:	4b3c      	ldr	r3, [pc, #240]	; (8012b2c <ip4_output_if_src+0x144>)
 8012a3a:	f240 3289 	movw	r2, #905	; 0x389
 8012a3e:	493e      	ldr	r1, [pc, #248]	; (8012b38 <ip4_output_if_src+0x150>)
 8012a40:	483c      	ldr	r0, [pc, #240]	; (8012b34 <ip4_output_if_src+0x14c>)
 8012a42:	f001 f927 	bl	8013c94 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012a46:	69fb      	ldr	r3, [r7, #28]
 8012a48:	78fa      	ldrb	r2, [r7, #3]
 8012a4a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012a52:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012a5c:	8b7b      	ldrh	r3, [r7, #26]
 8012a5e:	089b      	lsrs	r3, r3, #2
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a68:	b2da      	uxtb	r2, r3
 8012a6a:	69fb      	ldr	r3, [r7, #28]
 8012a6c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012a74:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	891b      	ldrh	r3, [r3, #8]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7f7 fa9c 	bl	8009fb8 <lwip_htons>
 8012a80:	4603      	mov	r3, r0
 8012a82:	461a      	mov	r2, r3
 8012a84:	69fb      	ldr	r3, [r7, #28]
 8012a86:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	719a      	strb	r2, [r3, #6]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012a92:	4b2a      	ldr	r3, [pc, #168]	; (8012b3c <ip4_output_if_src+0x154>)
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7f7 fa8e 	bl	8009fb8 <lwip_htons>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	69fb      	ldr	r3, [r7, #28]
 8012aa2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012aa4:	4b25      	ldr	r3, [pc, #148]	; (8012b3c <ip4_output_if_src+0x154>)
 8012aa6:	881b      	ldrh	r3, [r3, #0]
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	4b23      	ldr	r3, [pc, #140]	; (8012b3c <ip4_output_if_src+0x154>)
 8012aae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d104      	bne.n	8012ac0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012ab6:	4b22      	ldr	r3, [pc, #136]	; (8012b40 <ip4_output_if_src+0x158>)
 8012ab8:	681a      	ldr	r2, [r3, #0]
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	60da      	str	r2, [r3, #12]
 8012abe:	e003      	b.n	8012ac8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	681a      	ldr	r2, [r3, #0]
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	2200      	movs	r2, #0
 8012acc:	729a      	strb	r2, [r3, #10]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	72da      	strb	r2, [r3, #11]
 8012ad2:	e00f      	b.n	8012af4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	895b      	ldrh	r3, [r3, #10]
 8012ad8:	2b13      	cmp	r3, #19
 8012ada:	d802      	bhi.n	8012ae2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012adc:	f06f 0301 	mvn.w	r3, #1
 8012ae0:	e020      	b.n	8012b24 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	691b      	ldr	r3, [r3, #16]
 8012aec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012aee:	f107 0314 	add.w	r3, r7, #20
 8012af2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af6:	8c1b      	ldrh	r3, [r3, #32]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00c      	beq.n	8012b16 <ip4_output_if_src+0x12e>
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	891a      	ldrh	r2, [r3, #8]
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	8c1b      	ldrh	r3, [r3, #32]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d906      	bls.n	8012b16 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f000 fd4b 	bl	80135a8 <ip4_frag>
 8012b12:	4603      	mov	r3, r0
 8012b14:	e006      	b.n	8012b24 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b18:	695b      	ldr	r3, [r3, #20]
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	68f9      	ldr	r1, [r7, #12]
 8012b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b20:	4798      	blx	r3
 8012b22:	4603      	mov	r3, r0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3720      	adds	r7, #32
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	080172c8 	.word	0x080172c8
 8012b30:	080172fc 	.word	0x080172fc
 8012b34:	08017308 	.word	0x08017308
 8012b38:	08017330 	.word	0x08017330
 8012b3c:	2000f02a 	.word	0x2000f02a
 8012b40:	08017744 	.word	0x08017744

08012b44 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b085      	sub	sp, #20
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b58:	d002      	beq.n	8012b60 <ip4_addr_isbroadcast_u32+0x1c>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d101      	bne.n	8012b64 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012b60:	2301      	movs	r3, #1
 8012b62:	e02a      	b.n	8012bba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012b6a:	f003 0302 	and.w	r3, r3, #2
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d101      	bne.n	8012b76 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	e021      	b.n	8012bba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	3304      	adds	r3, #4
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d101      	bne.n	8012b86 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012b82:	2300      	movs	r3, #0
 8012b84:	e019      	b.n	8012bba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012b86:	68fa      	ldr	r2, [r7, #12]
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	3304      	adds	r3, #4
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	405a      	eors	r2, r3
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	3308      	adds	r3, #8
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	4013      	ands	r3, r2
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d10d      	bne.n	8012bb8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	3308      	adds	r3, #8
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	43da      	mvns	r2, r3
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	3308      	adds	r3, #8
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d101      	bne.n	8012bb8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	e000      	b.n	8012bba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012bb8:	2300      	movs	r3, #0
  }
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3714      	adds	r7, #20
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr
	...

08012bc8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012bd2:	4b12      	ldr	r3, [pc, #72]	; (8012c1c <ip_reass_tmr+0x54>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012bd8:	e018      	b.n	8012c0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	7fdb      	ldrb	r3, [r3, #31]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d00b      	beq.n	8012bfa <ip_reass_tmr+0x32>
      r->timer--;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	7fdb      	ldrb	r3, [r3, #31]
 8012be6:	3b01      	subs	r3, #1
 8012be8:	b2da      	uxtb	r2, r3
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	60fb      	str	r3, [r7, #12]
 8012bf8:	e008      	b.n	8012c0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012c04:	68b9      	ldr	r1, [r7, #8]
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 f80a 	bl	8012c20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d1e3      	bne.n	8012bda <ip_reass_tmr+0x12>
    }
  }
}
 8012c12:	bf00      	nop
 8012c14:	3710      	adds	r7, #16
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	bf00      	nop
 8012c1c:	2000f02c 	.word	0x2000f02c

08012c20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b088      	sub	sp, #32
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012c2e:	683a      	ldr	r2, [r7, #0]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d105      	bne.n	8012c42 <ip_reass_free_complete_datagram+0x22>
 8012c36:	4b45      	ldr	r3, [pc, #276]	; (8012d4c <ip_reass_free_complete_datagram+0x12c>)
 8012c38:	22ab      	movs	r2, #171	; 0xab
 8012c3a:	4945      	ldr	r1, [pc, #276]	; (8012d50 <ip_reass_free_complete_datagram+0x130>)
 8012c3c:	4845      	ldr	r0, [pc, #276]	; (8012d54 <ip_reass_free_complete_datagram+0x134>)
 8012c3e:	f001 f829 	bl	8013c94 <iprintf>
  if (prev != NULL) {
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d00a      	beq.n	8012c5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d005      	beq.n	8012c5e <ip_reass_free_complete_datagram+0x3e>
 8012c52:	4b3e      	ldr	r3, [pc, #248]	; (8012d4c <ip_reass_free_complete_datagram+0x12c>)
 8012c54:	22ad      	movs	r2, #173	; 0xad
 8012c56:	4940      	ldr	r1, [pc, #256]	; (8012d58 <ip_reass_free_complete_datagram+0x138>)
 8012c58:	483e      	ldr	r0, [pc, #248]	; (8012d54 <ip_reass_free_complete_datagram+0x134>)
 8012c5a:	f001 f81b 	bl	8013c94 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	889b      	ldrh	r3, [r3, #4]
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d12a      	bne.n	8012cc6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	6858      	ldr	r0, [r3, #4]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	3308      	adds	r3, #8
 8012c86:	2214      	movs	r2, #20
 8012c88:	4619      	mov	r1, r3
 8012c8a:	f000 fff0 	bl	8013c6e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012c8e:	2101      	movs	r1, #1
 8012c90:	69b8      	ldr	r0, [r7, #24]
 8012c92:	f7ff fc49 	bl	8012528 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012c96:	69b8      	ldr	r0, [r7, #24]
 8012c98:	f7f8 fd4c 	bl	800b734 <pbuf_clen>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ca0:	8bfa      	ldrh	r2, [r7, #30]
 8012ca2:	8a7b      	ldrh	r3, [r7, #18]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012caa:	db05      	blt.n	8012cb8 <ip_reass_free_complete_datagram+0x98>
 8012cac:	4b27      	ldr	r3, [pc, #156]	; (8012d4c <ip_reass_free_complete_datagram+0x12c>)
 8012cae:	22bc      	movs	r2, #188	; 0xbc
 8012cb0:	492a      	ldr	r1, [pc, #168]	; (8012d5c <ip_reass_free_complete_datagram+0x13c>)
 8012cb2:	4828      	ldr	r0, [pc, #160]	; (8012d54 <ip_reass_free_complete_datagram+0x134>)
 8012cb4:	f000 ffee 	bl	8013c94 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012cb8:	8bfa      	ldrh	r2, [r7, #30]
 8012cba:	8a7b      	ldrh	r3, [r7, #18]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012cc0:	69b8      	ldr	r0, [r7, #24]
 8012cc2:	f7f8 fca9 	bl	800b618 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012ccc:	e01f      	b.n	8012d0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012cde:	68f8      	ldr	r0, [r7, #12]
 8012ce0:	f7f8 fd28 	bl	800b734 <pbuf_clen>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ce8:	8bfa      	ldrh	r2, [r7, #30]
 8012cea:	8a7b      	ldrh	r3, [r7, #18]
 8012cec:	4413      	add	r3, r2
 8012cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cf2:	db05      	blt.n	8012d00 <ip_reass_free_complete_datagram+0xe0>
 8012cf4:	4b15      	ldr	r3, [pc, #84]	; (8012d4c <ip_reass_free_complete_datagram+0x12c>)
 8012cf6:	22cc      	movs	r2, #204	; 0xcc
 8012cf8:	4918      	ldr	r1, [pc, #96]	; (8012d5c <ip_reass_free_complete_datagram+0x13c>)
 8012cfa:	4816      	ldr	r0, [pc, #88]	; (8012d54 <ip_reass_free_complete_datagram+0x134>)
 8012cfc:	f000 ffca 	bl	8013c94 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012d00:	8bfa      	ldrh	r2, [r7, #30]
 8012d02:	8a7b      	ldrh	r3, [r7, #18]
 8012d04:	4413      	add	r3, r2
 8012d06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f7f8 fc85 	bl	800b618 <pbuf_free>
  while (p != NULL) {
 8012d0e:	69bb      	ldr	r3, [r7, #24]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d1dc      	bne.n	8012cce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012d14:	6839      	ldr	r1, [r7, #0]
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 f8c2 	bl	8012ea0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012d1c:	4b10      	ldr	r3, [pc, #64]	; (8012d60 <ip_reass_free_complete_datagram+0x140>)
 8012d1e:	881b      	ldrh	r3, [r3, #0]
 8012d20:	8bfa      	ldrh	r2, [r7, #30]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d905      	bls.n	8012d32 <ip_reass_free_complete_datagram+0x112>
 8012d26:	4b09      	ldr	r3, [pc, #36]	; (8012d4c <ip_reass_free_complete_datagram+0x12c>)
 8012d28:	22d2      	movs	r2, #210	; 0xd2
 8012d2a:	490e      	ldr	r1, [pc, #56]	; (8012d64 <ip_reass_free_complete_datagram+0x144>)
 8012d2c:	4809      	ldr	r0, [pc, #36]	; (8012d54 <ip_reass_free_complete_datagram+0x134>)
 8012d2e:	f000 ffb1 	bl	8013c94 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012d32:	4b0b      	ldr	r3, [pc, #44]	; (8012d60 <ip_reass_free_complete_datagram+0x140>)
 8012d34:	881a      	ldrh	r2, [r3, #0]
 8012d36:	8bfb      	ldrh	r3, [r7, #30]
 8012d38:	1ad3      	subs	r3, r2, r3
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	4b08      	ldr	r3, [pc, #32]	; (8012d60 <ip_reass_free_complete_datagram+0x140>)
 8012d3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012d40:	8bfb      	ldrh	r3, [r7, #30]
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3720      	adds	r7, #32
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	08017360 	.word	0x08017360
 8012d50:	0801739c 	.word	0x0801739c
 8012d54:	080173a8 	.word	0x080173a8
 8012d58:	080173d0 	.word	0x080173d0
 8012d5c:	080173e4 	.word	0x080173e4
 8012d60:	2000f030 	.word	0x2000f030
 8012d64:	08017404 	.word	0x08017404

08012d68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b08a      	sub	sp, #40	; 0x28
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012d72:	2300      	movs	r3, #0
 8012d74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012d76:	2300      	movs	r3, #0
 8012d78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012d82:	2300      	movs	r3, #0
 8012d84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012d86:	4b28      	ldr	r3, [pc, #160]	; (8012e28 <ip_reass_remove_oldest_datagram+0xc0>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012d8c:	e030      	b.n	8012df0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d90:	695a      	ldr	r2, [r3, #20]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	68db      	ldr	r3, [r3, #12]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d10c      	bne.n	8012db4 <ip_reass_remove_oldest_datagram+0x4c>
 8012d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9c:	699a      	ldr	r2, [r3, #24]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	691b      	ldr	r3, [r3, #16]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d106      	bne.n	8012db4 <ip_reass_remove_oldest_datagram+0x4c>
 8012da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da8:	899a      	ldrh	r2, [r3, #12]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	889b      	ldrh	r3, [r3, #4]
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d014      	beq.n	8012dde <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	3301      	adds	r3, #1
 8012db8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012dba:	6a3b      	ldr	r3, [r7, #32]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d104      	bne.n	8012dca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012dc4:	69fb      	ldr	r3, [r7, #28]
 8012dc6:	61bb      	str	r3, [r7, #24]
 8012dc8:	e009      	b.n	8012dde <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dcc:	7fda      	ldrb	r2, [r3, #31]
 8012dce:	6a3b      	ldr	r3, [r7, #32]
 8012dd0:	7fdb      	ldrb	r3, [r3, #31]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d803      	bhi.n	8012dde <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d001      	beq.n	8012dea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1cb      	bne.n	8012d8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012df6:	6a3b      	ldr	r3, [r7, #32]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d008      	beq.n	8012e0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012dfc:	69b9      	ldr	r1, [r7, #24]
 8012dfe:	6a38      	ldr	r0, [r7, #32]
 8012e00:	f7ff ff0e 	bl	8012c20 <ip_reass_free_complete_datagram>
 8012e04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012e06:	697a      	ldr	r2, [r7, #20]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	4413      	add	r3, r2
 8012e0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012e0e:	697a      	ldr	r2, [r7, #20]
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	da02      	bge.n	8012e1c <ip_reass_remove_oldest_datagram+0xb4>
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	dcac      	bgt.n	8012d76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012e1c:	697b      	ldr	r3, [r7, #20]
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3728      	adds	r7, #40	; 0x28
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	2000f02c 	.word	0x2000f02c

08012e2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012e36:	2004      	movs	r0, #4
 8012e38:	f7f7 fd74 	bl	800a924 <memp_malloc>
 8012e3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d110      	bne.n	8012e66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012e44:	6839      	ldr	r1, [r7, #0]
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f7ff ff8e 	bl	8012d68 <ip_reass_remove_oldest_datagram>
 8012e4c:	4602      	mov	r2, r0
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	4293      	cmp	r3, r2
 8012e52:	dc03      	bgt.n	8012e5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012e54:	2004      	movs	r0, #4
 8012e56:	f7f7 fd65 	bl	800a924 <memp_malloc>
 8012e5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012e62:	2300      	movs	r3, #0
 8012e64:	e016      	b.n	8012e94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012e66:	2220      	movs	r2, #32
 8012e68:	2100      	movs	r1, #0
 8012e6a:	68f8      	ldr	r0, [r7, #12]
 8012e6c:	f000 ff0a 	bl	8013c84 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	220f      	movs	r2, #15
 8012e74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012e76:	4b09      	ldr	r3, [pc, #36]	; (8012e9c <ip_reass_enqueue_new_datagram+0x70>)
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012e7e:	4a07      	ldr	r2, [pc, #28]	; (8012e9c <ip_reass_enqueue_new_datagram+0x70>)
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	3308      	adds	r3, #8
 8012e88:	2214      	movs	r2, #20
 8012e8a:	6879      	ldr	r1, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f000 feee 	bl	8013c6e <memcpy>
  return ipr;
 8012e92:	68fb      	ldr	r3, [r7, #12]
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3710      	adds	r7, #16
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	2000f02c 	.word	0x2000f02c

08012ea0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012eaa:	4b10      	ldr	r3, [pc, #64]	; (8012eec <ip_reass_dequeue_datagram+0x4c>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	687a      	ldr	r2, [r7, #4]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d104      	bne.n	8012ebe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	4a0c      	ldr	r2, [pc, #48]	; (8012eec <ip_reass_dequeue_datagram+0x4c>)
 8012eba:	6013      	str	r3, [r2, #0]
 8012ebc:	e00d      	b.n	8012eda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d106      	bne.n	8012ed2 <ip_reass_dequeue_datagram+0x32>
 8012ec4:	4b0a      	ldr	r3, [pc, #40]	; (8012ef0 <ip_reass_dequeue_datagram+0x50>)
 8012ec6:	f240 1245 	movw	r2, #325	; 0x145
 8012eca:	490a      	ldr	r1, [pc, #40]	; (8012ef4 <ip_reass_dequeue_datagram+0x54>)
 8012ecc:	480a      	ldr	r0, [pc, #40]	; (8012ef8 <ip_reass_dequeue_datagram+0x58>)
 8012ece:	f000 fee1 	bl	8013c94 <iprintf>
    prev->next = ipr->next;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012eda:	6879      	ldr	r1, [r7, #4]
 8012edc:	2004      	movs	r0, #4
 8012ede:	f7f7 fd73 	bl	800a9c8 <memp_free>
}
 8012ee2:	bf00      	nop
 8012ee4:	3708      	adds	r7, #8
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	2000f02c 	.word	0x2000f02c
 8012ef0:	08017360 	.word	0x08017360
 8012ef4:	08017428 	.word	0x08017428
 8012ef8:	080173a8 	.word	0x080173a8

08012efc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b08c      	sub	sp, #48	; 0x30
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	60f8      	str	r0, [r7, #12]
 8012f04:	60b9      	str	r1, [r7, #8]
 8012f06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012f16:	69fb      	ldr	r3, [r7, #28]
 8012f18:	885b      	ldrh	r3, [r3, #2]
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7f7 f84b 	bl	8009fb8 <lwip_htons>
 8012f22:	4603      	mov	r3, r0
 8012f24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	f003 030f 	and.w	r3, r3, #15
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	009b      	lsls	r3, r3, #2
 8012f32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012f34:	7e7b      	ldrb	r3, [r7, #25]
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	8b7a      	ldrh	r2, [r7, #26]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d202      	bcs.n	8012f44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012f42:	e135      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012f44:	7e7b      	ldrb	r3, [r7, #25]
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	8b7a      	ldrh	r2, [r7, #26]
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	88db      	ldrh	r3, [r3, #6]
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7f7 f82f 	bl	8009fb8 <lwip_htons>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6e:	2200      	movs	r2, #0
 8012f70:	701a      	strb	r2, [r3, #0]
 8012f72:	2200      	movs	r2, #0
 8012f74:	705a      	strb	r2, [r3, #1]
 8012f76:	2200      	movs	r2, #0
 8012f78:	709a      	strb	r2, [r3, #2]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f80:	8afa      	ldrh	r2, [r7, #22]
 8012f82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012f84:	8afa      	ldrh	r2, [r7, #22]
 8012f86:	8b7b      	ldrh	r3, [r7, #26]
 8012f88:	4413      	add	r3, r2
 8012f8a:	b29a      	uxth	r2, r3
 8012f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f92:	88db      	ldrh	r3, [r3, #6]
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	8afa      	ldrh	r2, [r7, #22]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d902      	bls.n	8012fa2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa0:	e106      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8012fa8:	e068      	b.n	801307c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb2:	889b      	ldrh	r3, [r3, #4]
 8012fb4:	b29a      	uxth	r2, r3
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	889b      	ldrh	r3, [r3, #4]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d235      	bcs.n	801302c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d020      	beq.n	801300e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fce:	889b      	ldrh	r3, [r3, #4]
 8012fd0:	b29a      	uxth	r2, r3
 8012fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd4:	88db      	ldrh	r3, [r3, #6]
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d307      	bcc.n	8012fec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fde:	88db      	ldrh	r3, [r3, #6]
 8012fe0:	b29a      	uxth	r2, r3
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	889b      	ldrh	r3, [r3, #4]
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d902      	bls.n	8012ff2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012fec:	f04f 33ff 	mov.w	r3, #4294967295
 8012ff0:	e0de      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff4:	68ba      	ldr	r2, [r7, #8]
 8012ff6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffa:	88db      	ldrh	r3, [r3, #6]
 8012ffc:	b29a      	uxth	r2, r3
 8012ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013000:	889b      	ldrh	r3, [r3, #4]
 8013002:	b29b      	uxth	r3, r3
 8013004:	429a      	cmp	r2, r3
 8013006:	d03d      	beq.n	8013084 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013008:	2300      	movs	r3, #0
 801300a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801300c:	e03a      	b.n	8013084 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013010:	88db      	ldrh	r3, [r3, #6]
 8013012:	b29a      	uxth	r2, r3
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	889b      	ldrh	r3, [r3, #4]
 8013018:	b29b      	uxth	r3, r3
 801301a:	429a      	cmp	r2, r3
 801301c:	d902      	bls.n	8013024 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801301e:	f04f 33ff 	mov.w	r3, #4294967295
 8013022:	e0c5      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	68ba      	ldr	r2, [r7, #8]
 8013028:	605a      	str	r2, [r3, #4]
      break;
 801302a:	e02b      	b.n	8013084 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302e:	889b      	ldrh	r3, [r3, #4]
 8013030:	b29a      	uxth	r2, r3
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	889b      	ldrh	r3, [r3, #4]
 8013036:	b29b      	uxth	r3, r3
 8013038:	429a      	cmp	r2, r3
 801303a:	d102      	bne.n	8013042 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801303c:	f04f 33ff 	mov.w	r3, #4294967295
 8013040:	e0b6      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013044:	889b      	ldrh	r3, [r3, #4]
 8013046:	b29a      	uxth	r2, r3
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	88db      	ldrh	r3, [r3, #6]
 801304c:	b29b      	uxth	r3, r3
 801304e:	429a      	cmp	r2, r3
 8013050:	d202      	bcs.n	8013058 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013052:	f04f 33ff 	mov.w	r3, #4294967295
 8013056:	e0ab      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801305a:	2b00      	cmp	r3, #0
 801305c:	d009      	beq.n	8013072 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013060:	88db      	ldrh	r3, [r3, #6]
 8013062:	b29a      	uxth	r2, r3
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	889b      	ldrh	r3, [r3, #4]
 8013068:	b29b      	uxth	r3, r3
 801306a:	429a      	cmp	r2, r3
 801306c:	d001      	beq.n	8013072 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801306e:	2300      	movs	r3, #0
 8013070:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307e:	2b00      	cmp	r3, #0
 8013080:	d193      	bne.n	8012faa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013082:	e000      	b.n	8013086 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013084:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013088:	2b00      	cmp	r3, #0
 801308a:	d12d      	bne.n	80130e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308e:	2b00      	cmp	r3, #0
 8013090:	d01c      	beq.n	80130cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013094:	88db      	ldrh	r3, [r3, #6]
 8013096:	b29a      	uxth	r2, r3
 8013098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801309a:	889b      	ldrh	r3, [r3, #4]
 801309c:	b29b      	uxth	r3, r3
 801309e:	429a      	cmp	r2, r3
 80130a0:	d906      	bls.n	80130b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80130a2:	4b45      	ldr	r3, [pc, #276]	; (80131b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80130a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80130a8:	4944      	ldr	r1, [pc, #272]	; (80131bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80130aa:	4845      	ldr	r0, [pc, #276]	; (80131c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80130ac:	f000 fdf2 	bl	8013c94 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80130b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b2:	68ba      	ldr	r2, [r7, #8]
 80130b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80130b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b8:	88db      	ldrh	r3, [r3, #6]
 80130ba:	b29a      	uxth	r2, r3
 80130bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130be:	889b      	ldrh	r3, [r3, #4]
 80130c0:	b29b      	uxth	r3, r3
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d010      	beq.n	80130e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80130c6:	2300      	movs	r3, #0
 80130c8:	623b      	str	r3, [r7, #32]
 80130ca:	e00d      	b.n	80130e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	685b      	ldr	r3, [r3, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d006      	beq.n	80130e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80130d4:	4b38      	ldr	r3, [pc, #224]	; (80131b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80130d6:	f240 12bf 	movw	r2, #447	; 0x1bf
 80130da:	493a      	ldr	r1, [pc, #232]	; (80131c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80130dc:	4838      	ldr	r0, [pc, #224]	; (80131c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80130de:	f000 fdd9 	bl	8013c94 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	68ba      	ldr	r2, [r7, #8]
 80130e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d105      	bne.n	80130fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	7f9b      	ldrb	r3, [r3, #30]
 80130f2:	f003 0301 	and.w	r3, r3, #1
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d059      	beq.n	80131ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80130fa:	6a3b      	ldr	r3, [r7, #32]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d04f      	beq.n	80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d006      	beq.n	8013116 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	685b      	ldr	r3, [r3, #4]
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	889b      	ldrh	r3, [r3, #4]
 8013110:	b29b      	uxth	r3, r3
 8013112:	2b00      	cmp	r3, #0
 8013114:	d002      	beq.n	801311c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	623b      	str	r3, [r7, #32]
 801311a:	e041      	b.n	80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013126:	e012      	b.n	801314e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013130:	88db      	ldrh	r3, [r3, #6]
 8013132:	b29a      	uxth	r2, r3
 8013134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013136:	889b      	ldrh	r3, [r3, #4]
 8013138:	b29b      	uxth	r3, r3
 801313a:	429a      	cmp	r2, r3
 801313c:	d002      	beq.n	8013144 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801313e:	2300      	movs	r3, #0
 8013140:	623b      	str	r3, [r7, #32]
            break;
 8013142:	e007      	b.n	8013154 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013146:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013150:	2b00      	cmp	r3, #0
 8013152:	d1e9      	bne.n	8013128 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d022      	beq.n	80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	685b      	ldr	r3, [r3, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d106      	bne.n	8013170 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013162:	4b15      	ldr	r3, [pc, #84]	; (80131b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013164:	f240 12df 	movw	r2, #479	; 0x1df
 8013168:	4917      	ldr	r1, [pc, #92]	; (80131c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801316a:	4815      	ldr	r0, [pc, #84]	; (80131c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801316c:	f000 fd92 	bl	8013c94 <iprintf>
          LWIP_ASSERT("sanity check",
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013178:	429a      	cmp	r2, r3
 801317a:	d106      	bne.n	801318a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801317c:	4b0e      	ldr	r3, [pc, #56]	; (80131b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801317e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013182:	4911      	ldr	r1, [pc, #68]	; (80131c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013184:	480e      	ldr	r0, [pc, #56]	; (80131c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013186:	f000 fd85 	bl	8013c94 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d006      	beq.n	80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013192:	4b09      	ldr	r3, [pc, #36]	; (80131b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013194:	f240 12e3 	movw	r2, #483	; 0x1e3
 8013198:	490c      	ldr	r1, [pc, #48]	; (80131cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801319a:	4809      	ldr	r0, [pc, #36]	; (80131c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801319c:	f000 fd7a 	bl	8013c94 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80131a0:	6a3b      	ldr	r3, [r7, #32]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	bf14      	ite	ne
 80131a6:	2301      	movne	r3, #1
 80131a8:	2300      	moveq	r3, #0
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	e000      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80131ae:	2300      	movs	r3, #0
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3730      	adds	r7, #48	; 0x30
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	08017360 	.word	0x08017360
 80131bc:	08017444 	.word	0x08017444
 80131c0:	080173a8 	.word	0x080173a8
 80131c4:	08017464 	.word	0x08017464
 80131c8:	0801749c 	.word	0x0801749c
 80131cc:	080174ac 	.word	0x080174ac

080131d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b08e      	sub	sp, #56	; 0x38
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80131de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	f003 030f 	and.w	r3, r3, #15
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	009b      	lsls	r3, r3, #2
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	2b14      	cmp	r3, #20
 80131ee:	f040 8167 	bne.w	80134c0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80131f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f4:	88db      	ldrh	r3, [r3, #6]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7f6 fedd 	bl	8009fb8 <lwip_htons>
 80131fe:	4603      	mov	r3, r0
 8013200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013204:	b29b      	uxth	r3, r3
 8013206:	00db      	lsls	r3, r3, #3
 8013208:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320c:	885b      	ldrh	r3, [r3, #2]
 801320e:	b29b      	uxth	r3, r3
 8013210:	4618      	mov	r0, r3
 8013212:	f7f6 fed1 	bl	8009fb8 <lwip_htons>
 8013216:	4603      	mov	r3, r0
 8013218:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	f003 030f 	and.w	r3, r3, #15
 8013222:	b2db      	uxtb	r3, r3
 8013224:	009b      	lsls	r3, r3, #2
 8013226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801322a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801322e:	b29b      	uxth	r3, r3
 8013230:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013232:	429a      	cmp	r2, r3
 8013234:	f0c0 8146 	bcc.w	80134c4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801323c:	b29b      	uxth	r3, r3
 801323e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013240:	1ad3      	subs	r3, r2, r3
 8013242:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7f8 fa75 	bl	800b734 <pbuf_clen>
 801324a:	4603      	mov	r3, r0
 801324c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801324e:	4ba3      	ldr	r3, [pc, #652]	; (80134dc <ip4_reass+0x30c>)
 8013250:	881b      	ldrh	r3, [r3, #0]
 8013252:	461a      	mov	r2, r3
 8013254:	8c3b      	ldrh	r3, [r7, #32]
 8013256:	4413      	add	r3, r2
 8013258:	2b0a      	cmp	r3, #10
 801325a:	dd10      	ble.n	801327e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801325c:	8c3b      	ldrh	r3, [r7, #32]
 801325e:	4619      	mov	r1, r3
 8013260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013262:	f7ff fd81 	bl	8012d68 <ip_reass_remove_oldest_datagram>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	f000 812d 	beq.w	80134c8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801326e:	4b9b      	ldr	r3, [pc, #620]	; (80134dc <ip4_reass+0x30c>)
 8013270:	881b      	ldrh	r3, [r3, #0]
 8013272:	461a      	mov	r2, r3
 8013274:	8c3b      	ldrh	r3, [r7, #32]
 8013276:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013278:	2b0a      	cmp	r3, #10
 801327a:	f300 8125 	bgt.w	80134c8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801327e:	4b98      	ldr	r3, [pc, #608]	; (80134e0 <ip4_reass+0x310>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	633b      	str	r3, [r7, #48]	; 0x30
 8013284:	e015      	b.n	80132b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013288:	695a      	ldr	r2, [r3, #20]
 801328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801328c:	68db      	ldr	r3, [r3, #12]
 801328e:	429a      	cmp	r2, r3
 8013290:	d10c      	bne.n	80132ac <ip4_reass+0xdc>
 8013292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013294:	699a      	ldr	r2, [r3, #24]
 8013296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013298:	691b      	ldr	r3, [r3, #16]
 801329a:	429a      	cmp	r2, r3
 801329c:	d106      	bne.n	80132ac <ip4_reass+0xdc>
 801329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a0:	899a      	ldrh	r2, [r3, #12]
 80132a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a4:	889b      	ldrh	r3, [r3, #4]
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d006      	beq.n	80132ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80132ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	633b      	str	r3, [r7, #48]	; 0x30
 80132b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d1e6      	bne.n	8013286 <ip4_reass+0xb6>
 80132b8:	e000      	b.n	80132bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80132ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80132bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d109      	bne.n	80132d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80132c2:	8c3b      	ldrh	r3, [r7, #32]
 80132c4:	4619      	mov	r1, r3
 80132c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132c8:	f7ff fdb0 	bl	8012e2c <ip_reass_enqueue_new_datagram>
 80132cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80132ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d11c      	bne.n	801330e <ip4_reass+0x13e>
      goto nullreturn;
 80132d4:	e0f9      	b.n	80134ca <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80132d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d8:	88db      	ldrh	r3, [r3, #6]
 80132da:	b29b      	uxth	r3, r3
 80132dc:	4618      	mov	r0, r3
 80132de:	f7f6 fe6b 	bl	8009fb8 <lwip_htons>
 80132e2:	4603      	mov	r3, r0
 80132e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d110      	bne.n	801330e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80132ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ee:	89db      	ldrh	r3, [r3, #14]
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7f6 fe61 	bl	8009fb8 <lwip_htons>
 80132f6:	4603      	mov	r3, r0
 80132f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d006      	beq.n	801330e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013302:	3308      	adds	r3, #8
 8013304:	2214      	movs	r2, #20
 8013306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013308:	4618      	mov	r0, r3
 801330a:	f000 fcb0 	bl	8013c6e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013310:	88db      	ldrh	r3, [r3, #6]
 8013312:	b29b      	uxth	r3, r3
 8013314:	f003 0320 	and.w	r3, r3, #32
 8013318:	2b00      	cmp	r3, #0
 801331a:	bf0c      	ite	eq
 801331c:	2301      	moveq	r3, #1
 801331e:	2300      	movne	r3, #0
 8013320:	b2db      	uxtb	r3, r3
 8013322:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d00e      	beq.n	8013348 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801332a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801332c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801332e:	4413      	add	r3, r2
 8013330:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013332:	8b7a      	ldrh	r2, [r7, #26]
 8013334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013336:	429a      	cmp	r2, r3
 8013338:	f0c0 80a0 	bcc.w	801347c <ip4_reass+0x2ac>
 801333c:	8b7b      	ldrh	r3, [r7, #26]
 801333e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013342:	4293      	cmp	r3, r2
 8013344:	f200 809a 	bhi.w	801347c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013348:	69fa      	ldr	r2, [r7, #28]
 801334a:	6879      	ldr	r1, [r7, #4]
 801334c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801334e:	f7ff fdd5 	bl	8012efc <ip_reass_chain_frag_into_datagram_and_validate>
 8013352:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801335a:	f000 8091 	beq.w	8013480 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801335e:	4b5f      	ldr	r3, [pc, #380]	; (80134dc <ip4_reass+0x30c>)
 8013360:	881a      	ldrh	r2, [r3, #0]
 8013362:	8c3b      	ldrh	r3, [r7, #32]
 8013364:	4413      	add	r3, r2
 8013366:	b29a      	uxth	r2, r3
 8013368:	4b5c      	ldr	r3, [pc, #368]	; (80134dc <ip4_reass+0x30c>)
 801336a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d00d      	beq.n	801338e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013372:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013376:	4413      	add	r3, r2
 8013378:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801337c:	8a7a      	ldrh	r2, [r7, #18]
 801337e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013382:	7f9b      	ldrb	r3, [r3, #30]
 8013384:	f043 0301 	orr.w	r3, r3, #1
 8013388:	b2da      	uxtb	r2, r3
 801338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	2b01      	cmp	r3, #1
 8013392:	d171      	bne.n	8013478 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013396:	8b9b      	ldrh	r3, [r3, #28]
 8013398:	3314      	adds	r3, #20
 801339a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80133a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	685b      	ldr	r3, [r3, #4]
 80133ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80133ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b0:	3308      	adds	r3, #8
 80133b2:	2214      	movs	r2, #20
 80133b4:	4619      	mov	r1, r3
 80133b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133b8:	f000 fc59 	bl	8013c6e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80133bc:	8a3b      	ldrh	r3, [r7, #16]
 80133be:	4618      	mov	r0, r3
 80133c0:	f7f6 fdfa 	bl	8009fb8 <lwip_htons>
 80133c4:	4603      	mov	r3, r0
 80133c6:	461a      	mov	r2, r3
 80133c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80133cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ce:	2200      	movs	r2, #0
 80133d0:	719a      	strb	r2, [r3, #6]
 80133d2:	2200      	movs	r2, #0
 80133d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80133d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d8:	2200      	movs	r2, #0
 80133da:	729a      	strb	r2, [r3, #10]
 80133dc:	2200      	movs	r2, #0
 80133de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80133e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80133e6:	e00d      	b.n	8013404 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80133e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80133ee:	2114      	movs	r1, #20
 80133f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80133f2:	f7f8 f88b 	bl	800b50c <pbuf_remove_header>
      pbuf_cat(p, r);
 80133f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7f8 f9db 	bl	800b7b4 <pbuf_cat>
      r = iprh->next_pbuf;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013406:	2b00      	cmp	r3, #0
 8013408:	d1ee      	bne.n	80133e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801340a:	4b35      	ldr	r3, [pc, #212]	; (80134e0 <ip4_reass+0x310>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013410:	429a      	cmp	r2, r3
 8013412:	d102      	bne.n	801341a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013414:	2300      	movs	r3, #0
 8013416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013418:	e010      	b.n	801343c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801341a:	4b31      	ldr	r3, [pc, #196]	; (80134e0 <ip4_reass+0x310>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013420:	e007      	b.n	8013432 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013428:	429a      	cmp	r2, r3
 801342a:	d006      	beq.n	801343a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013434:	2b00      	cmp	r3, #0
 8013436:	d1f4      	bne.n	8013422 <ip4_reass+0x252>
 8013438:	e000      	b.n	801343c <ip4_reass+0x26c>
          break;
 801343a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801343c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801343e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013440:	f7ff fd2e 	bl	8012ea0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f7f8 f975 	bl	800b734 <pbuf_clen>
 801344a:	4603      	mov	r3, r0
 801344c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801344e:	4b23      	ldr	r3, [pc, #140]	; (80134dc <ip4_reass+0x30c>)
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	8c3a      	ldrh	r2, [r7, #32]
 8013454:	429a      	cmp	r2, r3
 8013456:	d906      	bls.n	8013466 <ip4_reass+0x296>
 8013458:	4b22      	ldr	r3, [pc, #136]	; (80134e4 <ip4_reass+0x314>)
 801345a:	f240 229b 	movw	r2, #667	; 0x29b
 801345e:	4922      	ldr	r1, [pc, #136]	; (80134e8 <ip4_reass+0x318>)
 8013460:	4822      	ldr	r0, [pc, #136]	; (80134ec <ip4_reass+0x31c>)
 8013462:	f000 fc17 	bl	8013c94 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013466:	4b1d      	ldr	r3, [pc, #116]	; (80134dc <ip4_reass+0x30c>)
 8013468:	881a      	ldrh	r2, [r3, #0]
 801346a:	8c3b      	ldrh	r3, [r7, #32]
 801346c:	1ad3      	subs	r3, r2, r3
 801346e:	b29a      	uxth	r2, r3
 8013470:	4b1a      	ldr	r3, [pc, #104]	; (80134dc <ip4_reass+0x30c>)
 8013472:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	e02c      	b.n	80134d2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013478:	2300      	movs	r3, #0
 801347a:	e02a      	b.n	80134d2 <ip4_reass+0x302>

nullreturn_ipr:
 801347c:	bf00      	nop
 801347e:	e000      	b.n	8013482 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013480:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013484:	2b00      	cmp	r3, #0
 8013486:	d106      	bne.n	8013496 <ip4_reass+0x2c6>
 8013488:	4b16      	ldr	r3, [pc, #88]	; (80134e4 <ip4_reass+0x314>)
 801348a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801348e:	4918      	ldr	r1, [pc, #96]	; (80134f0 <ip4_reass+0x320>)
 8013490:	4816      	ldr	r0, [pc, #88]	; (80134ec <ip4_reass+0x31c>)
 8013492:	f000 fbff 	bl	8013c94 <iprintf>
  if (ipr->p == NULL) {
 8013496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d114      	bne.n	80134c8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801349e:	4b10      	ldr	r3, [pc, #64]	; (80134e0 <ip4_reass+0x310>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d006      	beq.n	80134b6 <ip4_reass+0x2e6>
 80134a8:	4b0e      	ldr	r3, [pc, #56]	; (80134e4 <ip4_reass+0x314>)
 80134aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80134ae:	4911      	ldr	r1, [pc, #68]	; (80134f4 <ip4_reass+0x324>)
 80134b0:	480e      	ldr	r0, [pc, #56]	; (80134ec <ip4_reass+0x31c>)
 80134b2:	f000 fbef 	bl	8013c94 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80134b6:	2100      	movs	r1, #0
 80134b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134ba:	f7ff fcf1 	bl	8012ea0 <ip_reass_dequeue_datagram>
 80134be:	e004      	b.n	80134ca <ip4_reass+0x2fa>
    goto nullreturn;
 80134c0:	bf00      	nop
 80134c2:	e002      	b.n	80134ca <ip4_reass+0x2fa>
    goto nullreturn;
 80134c4:	bf00      	nop
 80134c6:	e000      	b.n	80134ca <ip4_reass+0x2fa>
  }

nullreturn:
 80134c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f7f8 f8a4 	bl	800b618 <pbuf_free>
  return NULL;
 80134d0:	2300      	movs	r3, #0
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3738      	adds	r7, #56	; 0x38
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	2000f030 	.word	0x2000f030
 80134e0:	2000f02c 	.word	0x2000f02c
 80134e4:	08017360 	.word	0x08017360
 80134e8:	080174d0 	.word	0x080174d0
 80134ec:	080173a8 	.word	0x080173a8
 80134f0:	080174ec 	.word	0x080174ec
 80134f4:	080174f8 	.word	0x080174f8

080134f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80134fc:	2005      	movs	r0, #5
 80134fe:	f7f7 fa11 	bl	800a924 <memp_malloc>
 8013502:	4603      	mov	r3, r0
}
 8013504:	4618      	mov	r0, r3
 8013506:	bd80      	pop	{r7, pc}

08013508 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d106      	bne.n	8013524 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013516:	4b07      	ldr	r3, [pc, #28]	; (8013534 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013518:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801351c:	4906      	ldr	r1, [pc, #24]	; (8013538 <ip_frag_free_pbuf_custom_ref+0x30>)
 801351e:	4807      	ldr	r0, [pc, #28]	; (801353c <ip_frag_free_pbuf_custom_ref+0x34>)
 8013520:	f000 fbb8 	bl	8013c94 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013524:	6879      	ldr	r1, [r7, #4]
 8013526:	2005      	movs	r0, #5
 8013528:	f7f7 fa4e 	bl	800a9c8 <memp_free>
}
 801352c:	bf00      	nop
 801352e:	3708      	adds	r7, #8
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}
 8013534:	08017360 	.word	0x08017360
 8013538:	08017518 	.word	0x08017518
 801353c:	080173a8 	.word	0x080173a8

08013540 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b084      	sub	sp, #16
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d106      	bne.n	8013560 <ipfrag_free_pbuf_custom+0x20>
 8013552:	4b11      	ldr	r3, [pc, #68]	; (8013598 <ipfrag_free_pbuf_custom+0x58>)
 8013554:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013558:	4910      	ldr	r1, [pc, #64]	; (801359c <ipfrag_free_pbuf_custom+0x5c>)
 801355a:	4811      	ldr	r0, [pc, #68]	; (80135a0 <ipfrag_free_pbuf_custom+0x60>)
 801355c:	f000 fb9a 	bl	8013c94 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013560:	68fa      	ldr	r2, [r7, #12]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	429a      	cmp	r2, r3
 8013566:	d006      	beq.n	8013576 <ipfrag_free_pbuf_custom+0x36>
 8013568:	4b0b      	ldr	r3, [pc, #44]	; (8013598 <ipfrag_free_pbuf_custom+0x58>)
 801356a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801356e:	490d      	ldr	r1, [pc, #52]	; (80135a4 <ipfrag_free_pbuf_custom+0x64>)
 8013570:	480b      	ldr	r0, [pc, #44]	; (80135a0 <ipfrag_free_pbuf_custom+0x60>)
 8013572:	f000 fb8f 	bl	8013c94 <iprintf>
  if (pcr->original != NULL) {
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	695b      	ldr	r3, [r3, #20]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d004      	beq.n	8013588 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	695b      	ldr	r3, [r3, #20]
 8013582:	4618      	mov	r0, r3
 8013584:	f7f8 f848 	bl	800b618 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013588:	68f8      	ldr	r0, [r7, #12]
 801358a:	f7ff ffbd 	bl	8013508 <ip_frag_free_pbuf_custom_ref>
}
 801358e:	bf00      	nop
 8013590:	3710      	adds	r7, #16
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
 8013596:	bf00      	nop
 8013598:	08017360 	.word	0x08017360
 801359c:	08017524 	.word	0x08017524
 80135a0:	080173a8 	.word	0x080173a8
 80135a4:	08017530 	.word	0x08017530

080135a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b094      	sub	sp, #80	; 0x50
 80135ac:	af02      	add	r7, sp, #8
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80135b4:	2300      	movs	r3, #0
 80135b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	8c1b      	ldrh	r3, [r3, #32]
 80135be:	3b14      	subs	r3, #20
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	da00      	bge.n	80135c6 <ip4_frag+0x1e>
 80135c4:	3307      	adds	r3, #7
 80135c6:	10db      	asrs	r3, r3, #3
 80135c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80135ca:	2314      	movs	r3, #20
 80135cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80135d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80135d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	f003 030f 	and.w	r3, r3, #15
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	2b14      	cmp	r3, #20
 80135e8:	d002      	beq.n	80135f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80135ea:	f06f 0305 	mvn.w	r3, #5
 80135ee:	e10f      	b.n	8013810 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	895b      	ldrh	r3, [r3, #10]
 80135f4:	2b13      	cmp	r3, #19
 80135f6:	d809      	bhi.n	801360c <ip4_frag+0x64>
 80135f8:	4b87      	ldr	r3, [pc, #540]	; (8013818 <ip4_frag+0x270>)
 80135fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80135fe:	4987      	ldr	r1, [pc, #540]	; (801381c <ip4_frag+0x274>)
 8013600:	4887      	ldr	r0, [pc, #540]	; (8013820 <ip4_frag+0x278>)
 8013602:	f000 fb47 	bl	8013c94 <iprintf>
 8013606:	f06f 0305 	mvn.w	r3, #5
 801360a:	e101      	b.n	8013810 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360e:	88db      	ldrh	r3, [r3, #6]
 8013610:	b29b      	uxth	r3, r3
 8013612:	4618      	mov	r0, r3
 8013614:	f7f6 fcd0 	bl	8009fb8 <lwip_htons>
 8013618:	4603      	mov	r3, r0
 801361a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801361c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801361e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013622:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013626:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801362c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	891b      	ldrh	r3, [r3, #8]
 8013632:	3b14      	subs	r3, #20
 8013634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013638:	e0e0      	b.n	80137fc <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801363a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801363c:	00db      	lsls	r3, r3, #3
 801363e:	b29b      	uxth	r3, r3
 8013640:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013644:	4293      	cmp	r3, r2
 8013646:	bf28      	it	cs
 8013648:	4613      	movcs	r3, r2
 801364a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801364c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013650:	2114      	movs	r1, #20
 8013652:	200e      	movs	r0, #14
 8013654:	f7f7 fd00 	bl	800b058 <pbuf_alloc>
 8013658:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365c:	2b00      	cmp	r3, #0
 801365e:	f000 80d4 	beq.w	801380a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013664:	895b      	ldrh	r3, [r3, #10]
 8013666:	2b13      	cmp	r3, #19
 8013668:	d806      	bhi.n	8013678 <ip4_frag+0xd0>
 801366a:	4b6b      	ldr	r3, [pc, #428]	; (8013818 <ip4_frag+0x270>)
 801366c:	f240 3225 	movw	r2, #805	; 0x325
 8013670:	496c      	ldr	r1, [pc, #432]	; (8013824 <ip4_frag+0x27c>)
 8013672:	486b      	ldr	r0, [pc, #428]	; (8013820 <ip4_frag+0x278>)
 8013674:	f000 fb0e 	bl	8013c94 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801367a:	685b      	ldr	r3, [r3, #4]
 801367c:	2214      	movs	r2, #20
 801367e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013680:	4618      	mov	r0, r3
 8013682:	f000 faf4 	bl	8013c6e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801368c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801368e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013692:	e064      	b.n	801375e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	895a      	ldrh	r2, [r3, #10]
 8013698:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801369a:	1ad3      	subs	r3, r2, r3
 801369c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	895b      	ldrh	r3, [r3, #10]
 80136a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d906      	bls.n	80136b6 <ip4_frag+0x10e>
 80136a8:	4b5b      	ldr	r3, [pc, #364]	; (8013818 <ip4_frag+0x270>)
 80136aa:	f240 322d 	movw	r2, #813	; 0x32d
 80136ae:	495e      	ldr	r1, [pc, #376]	; (8013828 <ip4_frag+0x280>)
 80136b0:	485b      	ldr	r0, [pc, #364]	; (8013820 <ip4_frag+0x278>)
 80136b2:	f000 faef 	bl	8013c94 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80136b6:	8bfa      	ldrh	r2, [r7, #30]
 80136b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80136bc:	4293      	cmp	r3, r2
 80136be:	bf28      	it	cs
 80136c0:	4613      	movcs	r3, r2
 80136c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80136c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d105      	bne.n	80136da <ip4_frag+0x132>
        poff = 0;
 80136ce:	2300      	movs	r3, #0
 80136d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	60fb      	str	r3, [r7, #12]
        continue;
 80136d8:	e041      	b.n	801375e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80136da:	f7ff ff0d 	bl	80134f8 <ip_frag_alloc_pbuf_custom_ref>
 80136de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d103      	bne.n	80136ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80136e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136e8:	f7f7 ff96 	bl	800b618 <pbuf_free>
        goto memerr;
 80136ec:	e08e      	b.n	801380c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80136ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80136f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136f6:	4413      	add	r3, r2
 80136f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80136fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013700:	9201      	str	r2, [sp, #4]
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	4603      	mov	r3, r0
 8013706:	2241      	movs	r2, #65	; 0x41
 8013708:	2000      	movs	r0, #0
 801370a:	f7f7 fdcb 	bl	800b2a4 <pbuf_alloced_custom>
 801370e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d106      	bne.n	8013724 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013716:	69b8      	ldr	r0, [r7, #24]
 8013718:	f7ff fef6 	bl	8013508 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801371c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801371e:	f7f7 ff7b 	bl	800b618 <pbuf_free>
        goto memerr;
 8013722:	e073      	b.n	801380c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8013724:	68f8      	ldr	r0, [r7, #12]
 8013726:	f7f8 f81d 	bl	800b764 <pbuf_ref>
      pcr->original = p;
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013730:	69bb      	ldr	r3, [r7, #24]
 8013732:	4a3e      	ldr	r2, [pc, #248]	; (801382c <ip4_frag+0x284>)
 8013734:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013736:	6979      	ldr	r1, [r7, #20]
 8013738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801373a:	f7f8 f83b 	bl	800b7b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801373e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013742:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801374c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013750:	2b00      	cmp	r3, #0
 8013752:	d004      	beq.n	801375e <ip4_frag+0x1b6>
        poff = 0;
 8013754:	2300      	movs	r3, #0
 8013756:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801375e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013762:	2b00      	cmp	r3, #0
 8013764:	d196      	bne.n	8013694 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013766:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013768:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801376c:	4413      	add	r3, r2
 801376e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013770:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	8c1b      	ldrh	r3, [r3, #32]
 8013778:	3b14      	subs	r3, #20
 801377a:	429a      	cmp	r2, r3
 801377c:	bfd4      	ite	le
 801377e:	2301      	movle	r3, #1
 8013780:	2300      	movgt	r3, #0
 8013782:	b2db      	uxtb	r3, r3
 8013784:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013786:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801378a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801378e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013790:	6a3b      	ldr	r3, [r7, #32]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d002      	beq.n	801379c <ip4_frag+0x1f4>
 8013796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013798:	2b00      	cmp	r3, #0
 801379a:	d003      	beq.n	80137a4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801379c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801379e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80137a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80137a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7f6 fc06 	bl	8009fb8 <lwip_htons>
 80137ac:	4603      	mov	r3, r0
 80137ae:	461a      	mov	r2, r3
 80137b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80137b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80137b6:	3314      	adds	r3, #20
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7f6 fbfc 	bl	8009fb8 <lwip_htons>
 80137c0:	4603      	mov	r3, r0
 80137c2:	461a      	mov	r2, r3
 80137c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80137c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ca:	2200      	movs	r2, #0
 80137cc:	729a      	strb	r2, [r3, #10]
 80137ce:	2200      	movs	r2, #0
 80137d0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	695b      	ldr	r3, [r3, #20]
 80137d6:	687a      	ldr	r2, [r7, #4]
 80137d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137da:	68b8      	ldr	r0, [r7, #8]
 80137dc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80137de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137e0:	f7f7 ff1a 	bl	800b618 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80137e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80137ea:	1ad3      	subs	r3, r2, r3
 80137ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80137f0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80137f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137f6:	4413      	add	r3, r2
 80137f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80137fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013800:	2b00      	cmp	r3, #0
 8013802:	f47f af1a 	bne.w	801363a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013806:	2300      	movs	r3, #0
 8013808:	e002      	b.n	8013810 <ip4_frag+0x268>
      goto memerr;
 801380a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801380c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013810:	4618      	mov	r0, r3
 8013812:	3748      	adds	r7, #72	; 0x48
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}
 8013818:	08017360 	.word	0x08017360
 801381c:	0801753c 	.word	0x0801753c
 8013820:	080173a8 	.word	0x080173a8
 8013824:	08017558 	.word	0x08017558
 8013828:	08017578 	.word	0x08017578
 801382c:	08013541 	.word	0x08013541

08013830 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b086      	sub	sp, #24
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801383a:	230e      	movs	r3, #14
 801383c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	895b      	ldrh	r3, [r3, #10]
 8013842:	2b0e      	cmp	r3, #14
 8013844:	d96e      	bls.n	8013924 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	7bdb      	ldrb	r3, [r3, #15]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d106      	bne.n	801385c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013854:	3301      	adds	r3, #1
 8013856:	b2da      	uxtb	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	7b1a      	ldrb	r2, [r3, #12]
 8013866:	7b5b      	ldrb	r3, [r3, #13]
 8013868:	021b      	lsls	r3, r3, #8
 801386a:	4313      	orrs	r3, r2
 801386c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	f003 0301 	and.w	r3, r3, #1
 8013876:	2b00      	cmp	r3, #0
 8013878:	d023      	beq.n	80138c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	2b01      	cmp	r3, #1
 8013880:	d10f      	bne.n	80138a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	785b      	ldrb	r3, [r3, #1]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d11b      	bne.n	80138c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801388a:	693b      	ldr	r3, [r7, #16]
 801388c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801388e:	2b5e      	cmp	r3, #94	; 0x5e
 8013890:	d117      	bne.n	80138c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	7b5b      	ldrb	r3, [r3, #13]
 8013896:	f043 0310 	orr.w	r3, r3, #16
 801389a:	b2da      	uxtb	r2, r3
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	735a      	strb	r2, [r3, #13]
 80138a0:	e00f      	b.n	80138c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	2206      	movs	r2, #6
 80138a6:	4928      	ldr	r1, [pc, #160]	; (8013948 <ethernet_input+0x118>)
 80138a8:	4618      	mov	r0, r3
 80138aa:	f000 f9d1 	bl	8013c50 <memcmp>
 80138ae:	4603      	mov	r3, r0
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d106      	bne.n	80138c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	7b5b      	ldrb	r3, [r3, #13]
 80138b8:	f043 0308 	orr.w	r3, r3, #8
 80138bc:	b2da      	uxtb	r2, r3
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80138c2:	89fb      	ldrh	r3, [r7, #14]
 80138c4:	2b08      	cmp	r3, #8
 80138c6:	d003      	beq.n	80138d0 <ethernet_input+0xa0>
 80138c8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80138cc:	d014      	beq.n	80138f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80138ce:	e032      	b.n	8013936 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80138d6:	f003 0308 	and.w	r3, r3, #8
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d024      	beq.n	8013928 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80138de:	8afb      	ldrh	r3, [r7, #22]
 80138e0:	4619      	mov	r1, r3
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7f7 fe12 	bl	800b50c <pbuf_remove_header>
 80138e8:	4603      	mov	r3, r0
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d11e      	bne.n	801392c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80138ee:	6839      	ldr	r1, [r7, #0]
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7fe ff2d 	bl	8012750 <ip4_input>
      break;
 80138f6:	e013      	b.n	8013920 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80138fe:	f003 0308 	and.w	r3, r3, #8
 8013902:	2b00      	cmp	r3, #0
 8013904:	d014      	beq.n	8013930 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013906:	8afb      	ldrh	r3, [r7, #22]
 8013908:	4619      	mov	r1, r3
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f7f7 fdfe 	bl	800b50c <pbuf_remove_header>
 8013910:	4603      	mov	r3, r0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d10e      	bne.n	8013934 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013916:	6839      	ldr	r1, [r7, #0]
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f7fe f8cd 	bl	8011ab8 <etharp_input>
      break;
 801391e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013920:	2300      	movs	r3, #0
 8013922:	e00c      	b.n	801393e <ethernet_input+0x10e>
    goto free_and_return;
 8013924:	bf00      	nop
 8013926:	e006      	b.n	8013936 <ethernet_input+0x106>
        goto free_and_return;
 8013928:	bf00      	nop
 801392a:	e004      	b.n	8013936 <ethernet_input+0x106>
        goto free_and_return;
 801392c:	bf00      	nop
 801392e:	e002      	b.n	8013936 <ethernet_input+0x106>
        goto free_and_return;
 8013930:	bf00      	nop
 8013932:	e000      	b.n	8013936 <ethernet_input+0x106>
        goto free_and_return;
 8013934:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7f7 fe6e 	bl	800b618 <pbuf_free>
  return ERR_OK;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	3718      	adds	r7, #24
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	08017748 	.word	0x08017748

0801394c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801394c:	b580      	push	{r7, lr}
 801394e:	b086      	sub	sp, #24
 8013950:	af00      	add	r7, sp, #0
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	607a      	str	r2, [r7, #4]
 8013958:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801395a:	8c3b      	ldrh	r3, [r7, #32]
 801395c:	4618      	mov	r0, r3
 801395e:	f7f6 fb2b 	bl	8009fb8 <lwip_htons>
 8013962:	4603      	mov	r3, r0
 8013964:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013966:	210e      	movs	r1, #14
 8013968:	68b8      	ldr	r0, [r7, #8]
 801396a:	f7f7 fdbf 	bl	800b4ec <pbuf_add_header>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d125      	bne.n	80139c0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	685b      	ldr	r3, [r3, #4]
 8013978:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	8afa      	ldrh	r2, [r7, #22]
 801397e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	2206      	movs	r2, #6
 8013984:	6839      	ldr	r1, [r7, #0]
 8013986:	4618      	mov	r0, r3
 8013988:	f000 f971 	bl	8013c6e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	3306      	adds	r3, #6
 8013990:	2206      	movs	r2, #6
 8013992:	6879      	ldr	r1, [r7, #4]
 8013994:	4618      	mov	r0, r3
 8013996:	f000 f96a 	bl	8013c6e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139a0:	2b06      	cmp	r3, #6
 80139a2:	d006      	beq.n	80139b2 <ethernet_output+0x66>
 80139a4:	4b0a      	ldr	r3, [pc, #40]	; (80139d0 <ethernet_output+0x84>)
 80139a6:	f240 1233 	movw	r2, #307	; 0x133
 80139aa:	490a      	ldr	r1, [pc, #40]	; (80139d4 <ethernet_output+0x88>)
 80139ac:	480a      	ldr	r0, [pc, #40]	; (80139d8 <ethernet_output+0x8c>)
 80139ae:	f000 f971 	bl	8013c94 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	699b      	ldr	r3, [r3, #24]
 80139b6:	68b9      	ldr	r1, [r7, #8]
 80139b8:	68f8      	ldr	r0, [r7, #12]
 80139ba:	4798      	blx	r3
 80139bc:	4603      	mov	r3, r0
 80139be:	e002      	b.n	80139c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80139c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80139c2:	f06f 0301 	mvn.w	r3, #1
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3718      	adds	r7, #24
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	08017588 	.word	0x08017588
 80139d4:	080175c0 	.word	0x080175c0
 80139d8:	080175f4 	.word	0x080175f4

080139dc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b086      	sub	sp, #24
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	60bb      	str	r3, [r7, #8]
 80139ea:	2304      	movs	r3, #4
 80139ec:	60fb      	str	r3, [r7, #12]
 80139ee:	2300      	movs	r3, #0
 80139f0:	613b      	str	r3, [r7, #16]
 80139f2:	2300      	movs	r3, #0
 80139f4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80139f6:	f107 0308 	add.w	r3, r7, #8
 80139fa:	2100      	movs	r1, #0
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7f3 fc0f 	bl	8007220 <osMessageCreate>
 8013a02:	4602      	mov	r2, r0
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d102      	bne.n	8013a16 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013a10:	f04f 33ff 	mov.w	r3, #4294967295
 8013a14:	e000      	b.n	8013a18 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013a16:	2300      	movs	r3, #0
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3718      	adds	r7, #24
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}

08013a20 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	6839      	ldr	r1, [r7, #0]
 8013a30:	2200      	movs	r2, #0
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7f3 fc1e 	bl	8007274 <osMessagePut>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d102      	bne.n	8013a44 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	73fb      	strb	r3, [r7, #15]
 8013a42:	e001      	b.n	8013a48 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013a44:	23ff      	movs	r3, #255	; 0xff
 8013a46:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3710      	adds	r7, #16
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b08c      	sub	sp, #48	; 0x30
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	61f8      	str	r0, [r7, #28]
 8013a5c:	61b9      	str	r1, [r7, #24]
 8013a5e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013a60:	f7f3 fa1a 	bl	8006e98 <osKernelSysTick>
 8013a64:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d017      	beq.n	8013a9c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	6819      	ldr	r1, [r3, #0]
 8013a70:	f107 0320 	add.w	r3, r7, #32
 8013a74:	697a      	ldr	r2, [r7, #20]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7f3 fc3c 	bl	80072f4 <osMessageGet>

    if(event.status == osEventMessage)
 8013a7c:	6a3b      	ldr	r3, [r7, #32]
 8013a7e:	2b10      	cmp	r3, #16
 8013a80:	d109      	bne.n	8013a96 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a84:	461a      	mov	r2, r3
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013a8a:	f7f3 fa05 	bl	8006e98 <osKernelSysTick>
 8013a8e:	4602      	mov	r2, r0
 8013a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	e019      	b.n	8013aca <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013a96:	f04f 33ff 	mov.w	r3, #4294967295
 8013a9a:	e016      	b.n	8013aca <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	6819      	ldr	r1, [r3, #0]
 8013aa0:	463b      	mov	r3, r7
 8013aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7f3 fc24 	bl	80072f4 <osMessageGet>
 8013aac:	f107 0320 	add.w	r3, r7, #32
 8013ab0:	463a      	mov	r2, r7
 8013ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ab4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aba:	461a      	mov	r2, r3
 8013abc:	69bb      	ldr	r3, [r7, #24]
 8013abe:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013ac0:	f7f3 f9ea 	bl	8006e98 <osKernelSysTick>
 8013ac4:	4602      	mov	r2, r0
 8013ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3730      	adds	r7, #48	; 0x30
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013ad2:	b480      	push	{r7}
 8013ad4:	b083      	sub	sp, #12
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d101      	bne.n	8013ae6 <sys_mbox_valid+0x14>
    return 0;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e000      	b.n	8013ae8 <sys_mbox_valid+0x16>
  else
    return 1;
 8013ae6:	2301      	movs	r3, #1
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	370c      	adds	r7, #12
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr

08013af4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013af8:	4803      	ldr	r0, [pc, #12]	; (8013b08 <sys_init+0x14>)
 8013afa:	f7f3 fa3d 	bl	8006f78 <osMutexCreate>
 8013afe:	4602      	mov	r2, r0
 8013b00:	4b02      	ldr	r3, [pc, #8]	; (8013b0c <sys_init+0x18>)
 8013b02:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013b04:	bf00      	nop
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	08017758 	.word	0x08017758
 8013b0c:	20015ef4 	.word	0x20015ef4

08013b10 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b084      	sub	sp, #16
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013b18:	2300      	movs	r3, #0
 8013b1a:	60bb      	str	r3, [r7, #8]
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013b20:	f107 0308 	add.w	r3, r7, #8
 8013b24:	4618      	mov	r0, r3
 8013b26:	f7f3 fa27 	bl	8006f78 <osMutexCreate>
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d102      	bne.n	8013b3e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013b38:	f04f 33ff 	mov.w	r3, #4294967295
 8013b3c:	e000      	b.n	8013b40 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013b3e:	2300      	movs	r3, #0
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f04f 31ff 	mov.w	r1, #4294967295
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7f3 fa25 	bl	8006fa8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013b5e:	bf00      	nop
 8013b60:	3708      	adds	r7, #8
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}

08013b66 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013b66:	b580      	push	{r7, lr}
 8013b68:	b082      	sub	sp, #8
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f3 fa66 	bl	8007044 <osMutexRelease>
}
 8013b78:	bf00      	nop
 8013b7a:	3708      	adds	r7, #8
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}

08013b80 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b08c      	sub	sp, #48	; 0x30
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	607a      	str	r2, [r7, #4]
 8013b8c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013b8e:	f107 0314 	add.w	r3, r7, #20
 8013b92:	2200      	movs	r2, #0
 8013b94:	601a      	str	r2, [r3, #0]
 8013b96:	605a      	str	r2, [r3, #4]
 8013b98:	609a      	str	r2, [r3, #8]
 8013b9a:	60da      	str	r2, [r3, #12]
 8013b9c:	611a      	str	r2, [r3, #16]
 8013b9e:	615a      	str	r2, [r3, #20]
 8013ba0:	619a      	str	r2, [r3, #24]
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	617b      	str	r3, [r7, #20]
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	61bb      	str	r3, [r7, #24]
 8013baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bac:	b21b      	sxth	r3, r3
 8013bae:	83bb      	strh	r3, [r7, #28]
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013bb4:	f107 0314 	add.w	r3, r7, #20
 8013bb8:	6879      	ldr	r1, [r7, #4]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7f3 f97c 	bl	8006eb8 <osThreadCreate>
 8013bc0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3730      	adds	r7, #48	; 0x30
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
	...

08013bcc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013bd0:	4b04      	ldr	r3, [pc, #16]	; (8013be4 <sys_arch_protect+0x18>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7f3 f9e5 	bl	8006fa8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013bde:	2301      	movs	r3, #1
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	bd80      	pop	{r7, pc}
 8013be4:	20015ef4 	.word	0x20015ef4

08013be8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013bf0:	4b04      	ldr	r3, [pc, #16]	; (8013c04 <sys_arch_unprotect+0x1c>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7f3 fa25 	bl	8007044 <osMutexRelease>
}
 8013bfa:	bf00      	nop
 8013bfc:	3708      	adds	r7, #8
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	20015ef4 	.word	0x20015ef4

08013c08 <__libc_init_array>:
 8013c08:	b570      	push	{r4, r5, r6, lr}
 8013c0a:	4e0d      	ldr	r6, [pc, #52]	; (8013c40 <__libc_init_array+0x38>)
 8013c0c:	4c0d      	ldr	r4, [pc, #52]	; (8013c44 <__libc_init_array+0x3c>)
 8013c0e:	1ba4      	subs	r4, r4, r6
 8013c10:	10a4      	asrs	r4, r4, #2
 8013c12:	2500      	movs	r5, #0
 8013c14:	42a5      	cmp	r5, r4
 8013c16:	d109      	bne.n	8013c2c <__libc_init_array+0x24>
 8013c18:	4e0b      	ldr	r6, [pc, #44]	; (8013c48 <__libc_init_array+0x40>)
 8013c1a:	4c0c      	ldr	r4, [pc, #48]	; (8013c4c <__libc_init_array+0x44>)
 8013c1c:	f000 ff5a 	bl	8014ad4 <_init>
 8013c20:	1ba4      	subs	r4, r4, r6
 8013c22:	10a4      	asrs	r4, r4, #2
 8013c24:	2500      	movs	r5, #0
 8013c26:	42a5      	cmp	r5, r4
 8013c28:	d105      	bne.n	8013c36 <__libc_init_array+0x2e>
 8013c2a:	bd70      	pop	{r4, r5, r6, pc}
 8013c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013c30:	4798      	blx	r3
 8013c32:	3501      	adds	r5, #1
 8013c34:	e7ee      	b.n	8013c14 <__libc_init_array+0xc>
 8013c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013c3a:	4798      	blx	r3
 8013c3c:	3501      	adds	r5, #1
 8013c3e:	e7f2      	b.n	8013c26 <__libc_init_array+0x1e>
 8013c40:	08017800 	.word	0x08017800
 8013c44:	08017800 	.word	0x08017800
 8013c48:	08017800 	.word	0x08017800
 8013c4c:	08017804 	.word	0x08017804

08013c50 <memcmp>:
 8013c50:	b530      	push	{r4, r5, lr}
 8013c52:	2400      	movs	r4, #0
 8013c54:	42a2      	cmp	r2, r4
 8013c56:	d101      	bne.n	8013c5c <memcmp+0xc>
 8013c58:	2000      	movs	r0, #0
 8013c5a:	e007      	b.n	8013c6c <memcmp+0x1c>
 8013c5c:	5d03      	ldrb	r3, [r0, r4]
 8013c5e:	3401      	adds	r4, #1
 8013c60:	190d      	adds	r5, r1, r4
 8013c62:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8013c66:	42ab      	cmp	r3, r5
 8013c68:	d0f4      	beq.n	8013c54 <memcmp+0x4>
 8013c6a:	1b58      	subs	r0, r3, r5
 8013c6c:	bd30      	pop	{r4, r5, pc}

08013c6e <memcpy>:
 8013c6e:	b510      	push	{r4, lr}
 8013c70:	1e43      	subs	r3, r0, #1
 8013c72:	440a      	add	r2, r1
 8013c74:	4291      	cmp	r1, r2
 8013c76:	d100      	bne.n	8013c7a <memcpy+0xc>
 8013c78:	bd10      	pop	{r4, pc}
 8013c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c82:	e7f7      	b.n	8013c74 <memcpy+0x6>

08013c84 <memset>:
 8013c84:	4402      	add	r2, r0
 8013c86:	4603      	mov	r3, r0
 8013c88:	4293      	cmp	r3, r2
 8013c8a:	d100      	bne.n	8013c8e <memset+0xa>
 8013c8c:	4770      	bx	lr
 8013c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8013c92:	e7f9      	b.n	8013c88 <memset+0x4>

08013c94 <iprintf>:
 8013c94:	b40f      	push	{r0, r1, r2, r3}
 8013c96:	4b0a      	ldr	r3, [pc, #40]	; (8013cc0 <iprintf+0x2c>)
 8013c98:	b513      	push	{r0, r1, r4, lr}
 8013c9a:	681c      	ldr	r4, [r3, #0]
 8013c9c:	b124      	cbz	r4, 8013ca8 <iprintf+0x14>
 8013c9e:	69a3      	ldr	r3, [r4, #24]
 8013ca0:	b913      	cbnz	r3, 8013ca8 <iprintf+0x14>
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	f000 f882 	bl	8013dac <__sinit>
 8013ca8:	ab05      	add	r3, sp, #20
 8013caa:	9a04      	ldr	r2, [sp, #16]
 8013cac:	68a1      	ldr	r1, [r4, #8]
 8013cae:	9301      	str	r3, [sp, #4]
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	f000 f9df 	bl	8014074 <_vfiprintf_r>
 8013cb6:	b002      	add	sp, #8
 8013cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cbc:	b004      	add	sp, #16
 8013cbe:	4770      	bx	lr
 8013cc0:	2000001c 	.word	0x2000001c

08013cc4 <rand>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	4b13      	ldr	r3, [pc, #76]	; (8013d14 <rand+0x50>)
 8013cc8:	681c      	ldr	r4, [r3, #0]
 8013cca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ccc:	b97b      	cbnz	r3, 8013cee <rand+0x2a>
 8013cce:	2018      	movs	r0, #24
 8013cd0:	f000 f8f6 	bl	8013ec0 <malloc>
 8013cd4:	4a10      	ldr	r2, [pc, #64]	; (8013d18 <rand+0x54>)
 8013cd6:	4b11      	ldr	r3, [pc, #68]	; (8013d1c <rand+0x58>)
 8013cd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8013cda:	e9c0 2300 	strd	r2, r3, [r0]
 8013cde:	4b10      	ldr	r3, [pc, #64]	; (8013d20 <rand+0x5c>)
 8013ce0:	6083      	str	r3, [r0, #8]
 8013ce2:	230b      	movs	r3, #11
 8013ce4:	8183      	strh	r3, [r0, #12]
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	2300      	movs	r3, #0
 8013cea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013cee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013cf0:	480c      	ldr	r0, [pc, #48]	; (8013d24 <rand+0x60>)
 8013cf2:	690a      	ldr	r2, [r1, #16]
 8013cf4:	694b      	ldr	r3, [r1, #20]
 8013cf6:	4c0c      	ldr	r4, [pc, #48]	; (8013d28 <rand+0x64>)
 8013cf8:	4350      	muls	r0, r2
 8013cfa:	fb04 0003 	mla	r0, r4, r3, r0
 8013cfe:	fba2 2304 	umull	r2, r3, r2, r4
 8013d02:	4403      	add	r3, r0
 8013d04:	1c54      	adds	r4, r2, #1
 8013d06:	f143 0500 	adc.w	r5, r3, #0
 8013d0a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8013d0e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8013d12:	bd38      	pop	{r3, r4, r5, pc}
 8013d14:	2000001c 	.word	0x2000001c
 8013d18:	abcd330e 	.word	0xabcd330e
 8013d1c:	e66d1234 	.word	0xe66d1234
 8013d20:	0005deec 	.word	0x0005deec
 8013d24:	5851f42d 	.word	0x5851f42d
 8013d28:	4c957f2d 	.word	0x4c957f2d

08013d2c <std>:
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	b510      	push	{r4, lr}
 8013d30:	4604      	mov	r4, r0
 8013d32:	e9c0 3300 	strd	r3, r3, [r0]
 8013d36:	6083      	str	r3, [r0, #8]
 8013d38:	8181      	strh	r1, [r0, #12]
 8013d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8013d3c:	81c2      	strh	r2, [r0, #14]
 8013d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d42:	6183      	str	r3, [r0, #24]
 8013d44:	4619      	mov	r1, r3
 8013d46:	2208      	movs	r2, #8
 8013d48:	305c      	adds	r0, #92	; 0x5c
 8013d4a:	f7ff ff9b 	bl	8013c84 <memset>
 8013d4e:	4b05      	ldr	r3, [pc, #20]	; (8013d64 <std+0x38>)
 8013d50:	6263      	str	r3, [r4, #36]	; 0x24
 8013d52:	4b05      	ldr	r3, [pc, #20]	; (8013d68 <std+0x3c>)
 8013d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d56:	4b05      	ldr	r3, [pc, #20]	; (8013d6c <std+0x40>)
 8013d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d5a:	4b05      	ldr	r3, [pc, #20]	; (8013d70 <std+0x44>)
 8013d5c:	6224      	str	r4, [r4, #32]
 8013d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8013d60:	bd10      	pop	{r4, pc}
 8013d62:	bf00      	nop
 8013d64:	080145d1 	.word	0x080145d1
 8013d68:	080145f3 	.word	0x080145f3
 8013d6c:	0801462b 	.word	0x0801462b
 8013d70:	0801464f 	.word	0x0801464f

08013d74 <_cleanup_r>:
 8013d74:	4901      	ldr	r1, [pc, #4]	; (8013d7c <_cleanup_r+0x8>)
 8013d76:	f000 b885 	b.w	8013e84 <_fwalk_reent>
 8013d7a:	bf00      	nop
 8013d7c:	08014929 	.word	0x08014929

08013d80 <__sfmoreglue>:
 8013d80:	b570      	push	{r4, r5, r6, lr}
 8013d82:	1e4a      	subs	r2, r1, #1
 8013d84:	2568      	movs	r5, #104	; 0x68
 8013d86:	4355      	muls	r5, r2
 8013d88:	460e      	mov	r6, r1
 8013d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d8e:	f000 f8ed 	bl	8013f6c <_malloc_r>
 8013d92:	4604      	mov	r4, r0
 8013d94:	b140      	cbz	r0, 8013da8 <__sfmoreglue+0x28>
 8013d96:	2100      	movs	r1, #0
 8013d98:	e9c0 1600 	strd	r1, r6, [r0]
 8013d9c:	300c      	adds	r0, #12
 8013d9e:	60a0      	str	r0, [r4, #8]
 8013da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013da4:	f7ff ff6e 	bl	8013c84 <memset>
 8013da8:	4620      	mov	r0, r4
 8013daa:	bd70      	pop	{r4, r5, r6, pc}

08013dac <__sinit>:
 8013dac:	6983      	ldr	r3, [r0, #24]
 8013dae:	b510      	push	{r4, lr}
 8013db0:	4604      	mov	r4, r0
 8013db2:	bb33      	cbnz	r3, 8013e02 <__sinit+0x56>
 8013db4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013db8:	6503      	str	r3, [r0, #80]	; 0x50
 8013dba:	4b12      	ldr	r3, [pc, #72]	; (8013e04 <__sinit+0x58>)
 8013dbc:	4a12      	ldr	r2, [pc, #72]	; (8013e08 <__sinit+0x5c>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	6282      	str	r2, [r0, #40]	; 0x28
 8013dc2:	4298      	cmp	r0, r3
 8013dc4:	bf04      	itt	eq
 8013dc6:	2301      	moveq	r3, #1
 8013dc8:	6183      	streq	r3, [r0, #24]
 8013dca:	f000 f81f 	bl	8013e0c <__sfp>
 8013dce:	6060      	str	r0, [r4, #4]
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f000 f81b 	bl	8013e0c <__sfp>
 8013dd6:	60a0      	str	r0, [r4, #8]
 8013dd8:	4620      	mov	r0, r4
 8013dda:	f000 f817 	bl	8013e0c <__sfp>
 8013dde:	2200      	movs	r2, #0
 8013de0:	60e0      	str	r0, [r4, #12]
 8013de2:	2104      	movs	r1, #4
 8013de4:	6860      	ldr	r0, [r4, #4]
 8013de6:	f7ff ffa1 	bl	8013d2c <std>
 8013dea:	2201      	movs	r2, #1
 8013dec:	2109      	movs	r1, #9
 8013dee:	68a0      	ldr	r0, [r4, #8]
 8013df0:	f7ff ff9c 	bl	8013d2c <std>
 8013df4:	2202      	movs	r2, #2
 8013df6:	2112      	movs	r1, #18
 8013df8:	68e0      	ldr	r0, [r4, #12]
 8013dfa:	f7ff ff97 	bl	8013d2c <std>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	61a3      	str	r3, [r4, #24]
 8013e02:	bd10      	pop	{r4, pc}
 8013e04:	08017760 	.word	0x08017760
 8013e08:	08013d75 	.word	0x08013d75

08013e0c <__sfp>:
 8013e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e0e:	4b1b      	ldr	r3, [pc, #108]	; (8013e7c <__sfp+0x70>)
 8013e10:	681e      	ldr	r6, [r3, #0]
 8013e12:	69b3      	ldr	r3, [r6, #24]
 8013e14:	4607      	mov	r7, r0
 8013e16:	b913      	cbnz	r3, 8013e1e <__sfp+0x12>
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f7ff ffc7 	bl	8013dac <__sinit>
 8013e1e:	3648      	adds	r6, #72	; 0x48
 8013e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e24:	3b01      	subs	r3, #1
 8013e26:	d503      	bpl.n	8013e30 <__sfp+0x24>
 8013e28:	6833      	ldr	r3, [r6, #0]
 8013e2a:	b133      	cbz	r3, 8013e3a <__sfp+0x2e>
 8013e2c:	6836      	ldr	r6, [r6, #0]
 8013e2e:	e7f7      	b.n	8013e20 <__sfp+0x14>
 8013e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e34:	b16d      	cbz	r5, 8013e52 <__sfp+0x46>
 8013e36:	3468      	adds	r4, #104	; 0x68
 8013e38:	e7f4      	b.n	8013e24 <__sfp+0x18>
 8013e3a:	2104      	movs	r1, #4
 8013e3c:	4638      	mov	r0, r7
 8013e3e:	f7ff ff9f 	bl	8013d80 <__sfmoreglue>
 8013e42:	6030      	str	r0, [r6, #0]
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d1f1      	bne.n	8013e2c <__sfp+0x20>
 8013e48:	230c      	movs	r3, #12
 8013e4a:	603b      	str	r3, [r7, #0]
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	4620      	mov	r0, r4
 8013e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e52:	4b0b      	ldr	r3, [pc, #44]	; (8013e80 <__sfp+0x74>)
 8013e54:	6665      	str	r5, [r4, #100]	; 0x64
 8013e56:	e9c4 5500 	strd	r5, r5, [r4]
 8013e5a:	60a5      	str	r5, [r4, #8]
 8013e5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013e60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013e64:	2208      	movs	r2, #8
 8013e66:	4629      	mov	r1, r5
 8013e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e6c:	f7ff ff0a 	bl	8013c84 <memset>
 8013e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e78:	e7e9      	b.n	8013e4e <__sfp+0x42>
 8013e7a:	bf00      	nop
 8013e7c:	08017760 	.word	0x08017760
 8013e80:	ffff0001 	.word	0xffff0001

08013e84 <_fwalk_reent>:
 8013e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e88:	4680      	mov	r8, r0
 8013e8a:	4689      	mov	r9, r1
 8013e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e90:	2600      	movs	r6, #0
 8013e92:	b914      	cbnz	r4, 8013e9a <_fwalk_reent+0x16>
 8013e94:	4630      	mov	r0, r6
 8013e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013e9e:	3f01      	subs	r7, #1
 8013ea0:	d501      	bpl.n	8013ea6 <_fwalk_reent+0x22>
 8013ea2:	6824      	ldr	r4, [r4, #0]
 8013ea4:	e7f5      	b.n	8013e92 <_fwalk_reent+0xe>
 8013ea6:	89ab      	ldrh	r3, [r5, #12]
 8013ea8:	2b01      	cmp	r3, #1
 8013eaa:	d907      	bls.n	8013ebc <_fwalk_reent+0x38>
 8013eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	d003      	beq.n	8013ebc <_fwalk_reent+0x38>
 8013eb4:	4629      	mov	r1, r5
 8013eb6:	4640      	mov	r0, r8
 8013eb8:	47c8      	blx	r9
 8013eba:	4306      	orrs	r6, r0
 8013ebc:	3568      	adds	r5, #104	; 0x68
 8013ebe:	e7ee      	b.n	8013e9e <_fwalk_reent+0x1a>

08013ec0 <malloc>:
 8013ec0:	4b02      	ldr	r3, [pc, #8]	; (8013ecc <malloc+0xc>)
 8013ec2:	4601      	mov	r1, r0
 8013ec4:	6818      	ldr	r0, [r3, #0]
 8013ec6:	f000 b851 	b.w	8013f6c <_malloc_r>
 8013eca:	bf00      	nop
 8013ecc:	2000001c 	.word	0x2000001c

08013ed0 <_free_r>:
 8013ed0:	b538      	push	{r3, r4, r5, lr}
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	2900      	cmp	r1, #0
 8013ed6:	d045      	beq.n	8013f64 <_free_r+0x94>
 8013ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013edc:	1f0c      	subs	r4, r1, #4
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	bfb8      	it	lt
 8013ee2:	18e4      	addlt	r4, r4, r3
 8013ee4:	f000 fdc0 	bl	8014a68 <__malloc_lock>
 8013ee8:	4a1f      	ldr	r2, [pc, #124]	; (8013f68 <_free_r+0x98>)
 8013eea:	6813      	ldr	r3, [r2, #0]
 8013eec:	4610      	mov	r0, r2
 8013eee:	b933      	cbnz	r3, 8013efe <_free_r+0x2e>
 8013ef0:	6063      	str	r3, [r4, #4]
 8013ef2:	6014      	str	r4, [r2, #0]
 8013ef4:	4628      	mov	r0, r5
 8013ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013efa:	f000 bdb6 	b.w	8014a6a <__malloc_unlock>
 8013efe:	42a3      	cmp	r3, r4
 8013f00:	d90c      	bls.n	8013f1c <_free_r+0x4c>
 8013f02:	6821      	ldr	r1, [r4, #0]
 8013f04:	1862      	adds	r2, r4, r1
 8013f06:	4293      	cmp	r3, r2
 8013f08:	bf04      	itt	eq
 8013f0a:	681a      	ldreq	r2, [r3, #0]
 8013f0c:	685b      	ldreq	r3, [r3, #4]
 8013f0e:	6063      	str	r3, [r4, #4]
 8013f10:	bf04      	itt	eq
 8013f12:	1852      	addeq	r2, r2, r1
 8013f14:	6022      	streq	r2, [r4, #0]
 8013f16:	6004      	str	r4, [r0, #0]
 8013f18:	e7ec      	b.n	8013ef4 <_free_r+0x24>
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	685a      	ldr	r2, [r3, #4]
 8013f1e:	b10a      	cbz	r2, 8013f24 <_free_r+0x54>
 8013f20:	42a2      	cmp	r2, r4
 8013f22:	d9fa      	bls.n	8013f1a <_free_r+0x4a>
 8013f24:	6819      	ldr	r1, [r3, #0]
 8013f26:	1858      	adds	r0, r3, r1
 8013f28:	42a0      	cmp	r0, r4
 8013f2a:	d10b      	bne.n	8013f44 <_free_r+0x74>
 8013f2c:	6820      	ldr	r0, [r4, #0]
 8013f2e:	4401      	add	r1, r0
 8013f30:	1858      	adds	r0, r3, r1
 8013f32:	4282      	cmp	r2, r0
 8013f34:	6019      	str	r1, [r3, #0]
 8013f36:	d1dd      	bne.n	8013ef4 <_free_r+0x24>
 8013f38:	6810      	ldr	r0, [r2, #0]
 8013f3a:	6852      	ldr	r2, [r2, #4]
 8013f3c:	605a      	str	r2, [r3, #4]
 8013f3e:	4401      	add	r1, r0
 8013f40:	6019      	str	r1, [r3, #0]
 8013f42:	e7d7      	b.n	8013ef4 <_free_r+0x24>
 8013f44:	d902      	bls.n	8013f4c <_free_r+0x7c>
 8013f46:	230c      	movs	r3, #12
 8013f48:	602b      	str	r3, [r5, #0]
 8013f4a:	e7d3      	b.n	8013ef4 <_free_r+0x24>
 8013f4c:	6820      	ldr	r0, [r4, #0]
 8013f4e:	1821      	adds	r1, r4, r0
 8013f50:	428a      	cmp	r2, r1
 8013f52:	bf04      	itt	eq
 8013f54:	6811      	ldreq	r1, [r2, #0]
 8013f56:	6852      	ldreq	r2, [r2, #4]
 8013f58:	6062      	str	r2, [r4, #4]
 8013f5a:	bf04      	itt	eq
 8013f5c:	1809      	addeq	r1, r1, r0
 8013f5e:	6021      	streq	r1, [r4, #0]
 8013f60:	605c      	str	r4, [r3, #4]
 8013f62:	e7c7      	b.n	8013ef4 <_free_r+0x24>
 8013f64:	bd38      	pop	{r3, r4, r5, pc}
 8013f66:	bf00      	nop
 8013f68:	2000f034 	.word	0x2000f034

08013f6c <_malloc_r>:
 8013f6c:	b570      	push	{r4, r5, r6, lr}
 8013f6e:	1ccd      	adds	r5, r1, #3
 8013f70:	f025 0503 	bic.w	r5, r5, #3
 8013f74:	3508      	adds	r5, #8
 8013f76:	2d0c      	cmp	r5, #12
 8013f78:	bf38      	it	cc
 8013f7a:	250c      	movcc	r5, #12
 8013f7c:	2d00      	cmp	r5, #0
 8013f7e:	4606      	mov	r6, r0
 8013f80:	db01      	blt.n	8013f86 <_malloc_r+0x1a>
 8013f82:	42a9      	cmp	r1, r5
 8013f84:	d903      	bls.n	8013f8e <_malloc_r+0x22>
 8013f86:	230c      	movs	r3, #12
 8013f88:	6033      	str	r3, [r6, #0]
 8013f8a:	2000      	movs	r0, #0
 8013f8c:	bd70      	pop	{r4, r5, r6, pc}
 8013f8e:	f000 fd6b 	bl	8014a68 <__malloc_lock>
 8013f92:	4a21      	ldr	r2, [pc, #132]	; (8014018 <_malloc_r+0xac>)
 8013f94:	6814      	ldr	r4, [r2, #0]
 8013f96:	4621      	mov	r1, r4
 8013f98:	b991      	cbnz	r1, 8013fc0 <_malloc_r+0x54>
 8013f9a:	4c20      	ldr	r4, [pc, #128]	; (801401c <_malloc_r+0xb0>)
 8013f9c:	6823      	ldr	r3, [r4, #0]
 8013f9e:	b91b      	cbnz	r3, 8013fa8 <_malloc_r+0x3c>
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	f000 fb05 	bl	80145b0 <_sbrk_r>
 8013fa6:	6020      	str	r0, [r4, #0]
 8013fa8:	4629      	mov	r1, r5
 8013faa:	4630      	mov	r0, r6
 8013fac:	f000 fb00 	bl	80145b0 <_sbrk_r>
 8013fb0:	1c43      	adds	r3, r0, #1
 8013fb2:	d124      	bne.n	8013ffe <_malloc_r+0x92>
 8013fb4:	230c      	movs	r3, #12
 8013fb6:	6033      	str	r3, [r6, #0]
 8013fb8:	4630      	mov	r0, r6
 8013fba:	f000 fd56 	bl	8014a6a <__malloc_unlock>
 8013fbe:	e7e4      	b.n	8013f8a <_malloc_r+0x1e>
 8013fc0:	680b      	ldr	r3, [r1, #0]
 8013fc2:	1b5b      	subs	r3, r3, r5
 8013fc4:	d418      	bmi.n	8013ff8 <_malloc_r+0x8c>
 8013fc6:	2b0b      	cmp	r3, #11
 8013fc8:	d90f      	bls.n	8013fea <_malloc_r+0x7e>
 8013fca:	600b      	str	r3, [r1, #0]
 8013fcc:	50cd      	str	r5, [r1, r3]
 8013fce:	18cc      	adds	r4, r1, r3
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	f000 fd4a 	bl	8014a6a <__malloc_unlock>
 8013fd6:	f104 000b 	add.w	r0, r4, #11
 8013fda:	1d23      	adds	r3, r4, #4
 8013fdc:	f020 0007 	bic.w	r0, r0, #7
 8013fe0:	1ac3      	subs	r3, r0, r3
 8013fe2:	d0d3      	beq.n	8013f8c <_malloc_r+0x20>
 8013fe4:	425a      	negs	r2, r3
 8013fe6:	50e2      	str	r2, [r4, r3]
 8013fe8:	e7d0      	b.n	8013f8c <_malloc_r+0x20>
 8013fea:	428c      	cmp	r4, r1
 8013fec:	684b      	ldr	r3, [r1, #4]
 8013fee:	bf16      	itet	ne
 8013ff0:	6063      	strne	r3, [r4, #4]
 8013ff2:	6013      	streq	r3, [r2, #0]
 8013ff4:	460c      	movne	r4, r1
 8013ff6:	e7eb      	b.n	8013fd0 <_malloc_r+0x64>
 8013ff8:	460c      	mov	r4, r1
 8013ffa:	6849      	ldr	r1, [r1, #4]
 8013ffc:	e7cc      	b.n	8013f98 <_malloc_r+0x2c>
 8013ffe:	1cc4      	adds	r4, r0, #3
 8014000:	f024 0403 	bic.w	r4, r4, #3
 8014004:	42a0      	cmp	r0, r4
 8014006:	d005      	beq.n	8014014 <_malloc_r+0xa8>
 8014008:	1a21      	subs	r1, r4, r0
 801400a:	4630      	mov	r0, r6
 801400c:	f000 fad0 	bl	80145b0 <_sbrk_r>
 8014010:	3001      	adds	r0, #1
 8014012:	d0cf      	beq.n	8013fb4 <_malloc_r+0x48>
 8014014:	6025      	str	r5, [r4, #0]
 8014016:	e7db      	b.n	8013fd0 <_malloc_r+0x64>
 8014018:	2000f034 	.word	0x2000f034
 801401c:	2000f038 	.word	0x2000f038

08014020 <__sfputc_r>:
 8014020:	6893      	ldr	r3, [r2, #8]
 8014022:	3b01      	subs	r3, #1
 8014024:	2b00      	cmp	r3, #0
 8014026:	b410      	push	{r4}
 8014028:	6093      	str	r3, [r2, #8]
 801402a:	da08      	bge.n	801403e <__sfputc_r+0x1e>
 801402c:	6994      	ldr	r4, [r2, #24]
 801402e:	42a3      	cmp	r3, r4
 8014030:	db01      	blt.n	8014036 <__sfputc_r+0x16>
 8014032:	290a      	cmp	r1, #10
 8014034:	d103      	bne.n	801403e <__sfputc_r+0x1e>
 8014036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801403a:	f000 bb0d 	b.w	8014658 <__swbuf_r>
 801403e:	6813      	ldr	r3, [r2, #0]
 8014040:	1c58      	adds	r0, r3, #1
 8014042:	6010      	str	r0, [r2, #0]
 8014044:	7019      	strb	r1, [r3, #0]
 8014046:	4608      	mov	r0, r1
 8014048:	f85d 4b04 	ldr.w	r4, [sp], #4
 801404c:	4770      	bx	lr

0801404e <__sfputs_r>:
 801404e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014050:	4606      	mov	r6, r0
 8014052:	460f      	mov	r7, r1
 8014054:	4614      	mov	r4, r2
 8014056:	18d5      	adds	r5, r2, r3
 8014058:	42ac      	cmp	r4, r5
 801405a:	d101      	bne.n	8014060 <__sfputs_r+0x12>
 801405c:	2000      	movs	r0, #0
 801405e:	e007      	b.n	8014070 <__sfputs_r+0x22>
 8014060:	463a      	mov	r2, r7
 8014062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014066:	4630      	mov	r0, r6
 8014068:	f7ff ffda 	bl	8014020 <__sfputc_r>
 801406c:	1c43      	adds	r3, r0, #1
 801406e:	d1f3      	bne.n	8014058 <__sfputs_r+0xa>
 8014070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014074 <_vfiprintf_r>:
 8014074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014078:	460c      	mov	r4, r1
 801407a:	b09d      	sub	sp, #116	; 0x74
 801407c:	4617      	mov	r7, r2
 801407e:	461d      	mov	r5, r3
 8014080:	4606      	mov	r6, r0
 8014082:	b118      	cbz	r0, 801408c <_vfiprintf_r+0x18>
 8014084:	6983      	ldr	r3, [r0, #24]
 8014086:	b90b      	cbnz	r3, 801408c <_vfiprintf_r+0x18>
 8014088:	f7ff fe90 	bl	8013dac <__sinit>
 801408c:	4b7c      	ldr	r3, [pc, #496]	; (8014280 <_vfiprintf_r+0x20c>)
 801408e:	429c      	cmp	r4, r3
 8014090:	d158      	bne.n	8014144 <_vfiprintf_r+0xd0>
 8014092:	6874      	ldr	r4, [r6, #4]
 8014094:	89a3      	ldrh	r3, [r4, #12]
 8014096:	0718      	lsls	r0, r3, #28
 8014098:	d55e      	bpl.n	8014158 <_vfiprintf_r+0xe4>
 801409a:	6923      	ldr	r3, [r4, #16]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d05b      	beq.n	8014158 <_vfiprintf_r+0xe4>
 80140a0:	2300      	movs	r3, #0
 80140a2:	9309      	str	r3, [sp, #36]	; 0x24
 80140a4:	2320      	movs	r3, #32
 80140a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140aa:	2330      	movs	r3, #48	; 0x30
 80140ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140b0:	9503      	str	r5, [sp, #12]
 80140b2:	f04f 0b01 	mov.w	fp, #1
 80140b6:	46b8      	mov	r8, r7
 80140b8:	4645      	mov	r5, r8
 80140ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80140be:	b10b      	cbz	r3, 80140c4 <_vfiprintf_r+0x50>
 80140c0:	2b25      	cmp	r3, #37	; 0x25
 80140c2:	d154      	bne.n	801416e <_vfiprintf_r+0xfa>
 80140c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80140c8:	d00b      	beq.n	80140e2 <_vfiprintf_r+0x6e>
 80140ca:	4653      	mov	r3, sl
 80140cc:	463a      	mov	r2, r7
 80140ce:	4621      	mov	r1, r4
 80140d0:	4630      	mov	r0, r6
 80140d2:	f7ff ffbc 	bl	801404e <__sfputs_r>
 80140d6:	3001      	adds	r0, #1
 80140d8:	f000 80c2 	beq.w	8014260 <_vfiprintf_r+0x1ec>
 80140dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140de:	4453      	add	r3, sl
 80140e0:	9309      	str	r3, [sp, #36]	; 0x24
 80140e2:	f898 3000 	ldrb.w	r3, [r8]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	f000 80ba 	beq.w	8014260 <_vfiprintf_r+0x1ec>
 80140ec:	2300      	movs	r3, #0
 80140ee:	f04f 32ff 	mov.w	r2, #4294967295
 80140f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140f6:	9304      	str	r3, [sp, #16]
 80140f8:	9307      	str	r3, [sp, #28]
 80140fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140fe:	931a      	str	r3, [sp, #104]	; 0x68
 8014100:	46a8      	mov	r8, r5
 8014102:	2205      	movs	r2, #5
 8014104:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014108:	485e      	ldr	r0, [pc, #376]	; (8014284 <_vfiprintf_r+0x210>)
 801410a:	f7ec f881 	bl	8000210 <memchr>
 801410e:	9b04      	ldr	r3, [sp, #16]
 8014110:	bb78      	cbnz	r0, 8014172 <_vfiprintf_r+0xfe>
 8014112:	06d9      	lsls	r1, r3, #27
 8014114:	bf44      	itt	mi
 8014116:	2220      	movmi	r2, #32
 8014118:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801411c:	071a      	lsls	r2, r3, #28
 801411e:	bf44      	itt	mi
 8014120:	222b      	movmi	r2, #43	; 0x2b
 8014122:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014126:	782a      	ldrb	r2, [r5, #0]
 8014128:	2a2a      	cmp	r2, #42	; 0x2a
 801412a:	d02a      	beq.n	8014182 <_vfiprintf_r+0x10e>
 801412c:	9a07      	ldr	r2, [sp, #28]
 801412e:	46a8      	mov	r8, r5
 8014130:	2000      	movs	r0, #0
 8014132:	250a      	movs	r5, #10
 8014134:	4641      	mov	r1, r8
 8014136:	f811 3b01 	ldrb.w	r3, [r1], #1
 801413a:	3b30      	subs	r3, #48	; 0x30
 801413c:	2b09      	cmp	r3, #9
 801413e:	d969      	bls.n	8014214 <_vfiprintf_r+0x1a0>
 8014140:	b360      	cbz	r0, 801419c <_vfiprintf_r+0x128>
 8014142:	e024      	b.n	801418e <_vfiprintf_r+0x11a>
 8014144:	4b50      	ldr	r3, [pc, #320]	; (8014288 <_vfiprintf_r+0x214>)
 8014146:	429c      	cmp	r4, r3
 8014148:	d101      	bne.n	801414e <_vfiprintf_r+0xda>
 801414a:	68b4      	ldr	r4, [r6, #8]
 801414c:	e7a2      	b.n	8014094 <_vfiprintf_r+0x20>
 801414e:	4b4f      	ldr	r3, [pc, #316]	; (801428c <_vfiprintf_r+0x218>)
 8014150:	429c      	cmp	r4, r3
 8014152:	bf08      	it	eq
 8014154:	68f4      	ldreq	r4, [r6, #12]
 8014156:	e79d      	b.n	8014094 <_vfiprintf_r+0x20>
 8014158:	4621      	mov	r1, r4
 801415a:	4630      	mov	r0, r6
 801415c:	f000 fae0 	bl	8014720 <__swsetup_r>
 8014160:	2800      	cmp	r0, #0
 8014162:	d09d      	beq.n	80140a0 <_vfiprintf_r+0x2c>
 8014164:	f04f 30ff 	mov.w	r0, #4294967295
 8014168:	b01d      	add	sp, #116	; 0x74
 801416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801416e:	46a8      	mov	r8, r5
 8014170:	e7a2      	b.n	80140b8 <_vfiprintf_r+0x44>
 8014172:	4a44      	ldr	r2, [pc, #272]	; (8014284 <_vfiprintf_r+0x210>)
 8014174:	1a80      	subs	r0, r0, r2
 8014176:	fa0b f000 	lsl.w	r0, fp, r0
 801417a:	4318      	orrs	r0, r3
 801417c:	9004      	str	r0, [sp, #16]
 801417e:	4645      	mov	r5, r8
 8014180:	e7be      	b.n	8014100 <_vfiprintf_r+0x8c>
 8014182:	9a03      	ldr	r2, [sp, #12]
 8014184:	1d11      	adds	r1, r2, #4
 8014186:	6812      	ldr	r2, [r2, #0]
 8014188:	9103      	str	r1, [sp, #12]
 801418a:	2a00      	cmp	r2, #0
 801418c:	db01      	blt.n	8014192 <_vfiprintf_r+0x11e>
 801418e:	9207      	str	r2, [sp, #28]
 8014190:	e004      	b.n	801419c <_vfiprintf_r+0x128>
 8014192:	4252      	negs	r2, r2
 8014194:	f043 0302 	orr.w	r3, r3, #2
 8014198:	9207      	str	r2, [sp, #28]
 801419a:	9304      	str	r3, [sp, #16]
 801419c:	f898 3000 	ldrb.w	r3, [r8]
 80141a0:	2b2e      	cmp	r3, #46	; 0x2e
 80141a2:	d10e      	bne.n	80141c2 <_vfiprintf_r+0x14e>
 80141a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80141a8:	2b2a      	cmp	r3, #42	; 0x2a
 80141aa:	d138      	bne.n	801421e <_vfiprintf_r+0x1aa>
 80141ac:	9b03      	ldr	r3, [sp, #12]
 80141ae:	1d1a      	adds	r2, r3, #4
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	9203      	str	r2, [sp, #12]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	bfb8      	it	lt
 80141b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80141bc:	f108 0802 	add.w	r8, r8, #2
 80141c0:	9305      	str	r3, [sp, #20]
 80141c2:	4d33      	ldr	r5, [pc, #204]	; (8014290 <_vfiprintf_r+0x21c>)
 80141c4:	f898 1000 	ldrb.w	r1, [r8]
 80141c8:	2203      	movs	r2, #3
 80141ca:	4628      	mov	r0, r5
 80141cc:	f7ec f820 	bl	8000210 <memchr>
 80141d0:	b140      	cbz	r0, 80141e4 <_vfiprintf_r+0x170>
 80141d2:	2340      	movs	r3, #64	; 0x40
 80141d4:	1b40      	subs	r0, r0, r5
 80141d6:	fa03 f000 	lsl.w	r0, r3, r0
 80141da:	9b04      	ldr	r3, [sp, #16]
 80141dc:	4303      	orrs	r3, r0
 80141de:	f108 0801 	add.w	r8, r8, #1
 80141e2:	9304      	str	r3, [sp, #16]
 80141e4:	f898 1000 	ldrb.w	r1, [r8]
 80141e8:	482a      	ldr	r0, [pc, #168]	; (8014294 <_vfiprintf_r+0x220>)
 80141ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141ee:	2206      	movs	r2, #6
 80141f0:	f108 0701 	add.w	r7, r8, #1
 80141f4:	f7ec f80c 	bl	8000210 <memchr>
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d037      	beq.n	801426c <_vfiprintf_r+0x1f8>
 80141fc:	4b26      	ldr	r3, [pc, #152]	; (8014298 <_vfiprintf_r+0x224>)
 80141fe:	bb1b      	cbnz	r3, 8014248 <_vfiprintf_r+0x1d4>
 8014200:	9b03      	ldr	r3, [sp, #12]
 8014202:	3307      	adds	r3, #7
 8014204:	f023 0307 	bic.w	r3, r3, #7
 8014208:	3308      	adds	r3, #8
 801420a:	9303      	str	r3, [sp, #12]
 801420c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801420e:	444b      	add	r3, r9
 8014210:	9309      	str	r3, [sp, #36]	; 0x24
 8014212:	e750      	b.n	80140b6 <_vfiprintf_r+0x42>
 8014214:	fb05 3202 	mla	r2, r5, r2, r3
 8014218:	2001      	movs	r0, #1
 801421a:	4688      	mov	r8, r1
 801421c:	e78a      	b.n	8014134 <_vfiprintf_r+0xc0>
 801421e:	2300      	movs	r3, #0
 8014220:	f108 0801 	add.w	r8, r8, #1
 8014224:	9305      	str	r3, [sp, #20]
 8014226:	4619      	mov	r1, r3
 8014228:	250a      	movs	r5, #10
 801422a:	4640      	mov	r0, r8
 801422c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014230:	3a30      	subs	r2, #48	; 0x30
 8014232:	2a09      	cmp	r2, #9
 8014234:	d903      	bls.n	801423e <_vfiprintf_r+0x1ca>
 8014236:	2b00      	cmp	r3, #0
 8014238:	d0c3      	beq.n	80141c2 <_vfiprintf_r+0x14e>
 801423a:	9105      	str	r1, [sp, #20]
 801423c:	e7c1      	b.n	80141c2 <_vfiprintf_r+0x14e>
 801423e:	fb05 2101 	mla	r1, r5, r1, r2
 8014242:	2301      	movs	r3, #1
 8014244:	4680      	mov	r8, r0
 8014246:	e7f0      	b.n	801422a <_vfiprintf_r+0x1b6>
 8014248:	ab03      	add	r3, sp, #12
 801424a:	9300      	str	r3, [sp, #0]
 801424c:	4622      	mov	r2, r4
 801424e:	4b13      	ldr	r3, [pc, #76]	; (801429c <_vfiprintf_r+0x228>)
 8014250:	a904      	add	r1, sp, #16
 8014252:	4630      	mov	r0, r6
 8014254:	f3af 8000 	nop.w
 8014258:	f1b0 3fff 	cmp.w	r0, #4294967295
 801425c:	4681      	mov	r9, r0
 801425e:	d1d5      	bne.n	801420c <_vfiprintf_r+0x198>
 8014260:	89a3      	ldrh	r3, [r4, #12]
 8014262:	065b      	lsls	r3, r3, #25
 8014264:	f53f af7e 	bmi.w	8014164 <_vfiprintf_r+0xf0>
 8014268:	9809      	ldr	r0, [sp, #36]	; 0x24
 801426a:	e77d      	b.n	8014168 <_vfiprintf_r+0xf4>
 801426c:	ab03      	add	r3, sp, #12
 801426e:	9300      	str	r3, [sp, #0]
 8014270:	4622      	mov	r2, r4
 8014272:	4b0a      	ldr	r3, [pc, #40]	; (801429c <_vfiprintf_r+0x228>)
 8014274:	a904      	add	r1, sp, #16
 8014276:	4630      	mov	r0, r6
 8014278:	f000 f888 	bl	801438c <_printf_i>
 801427c:	e7ec      	b.n	8014258 <_vfiprintf_r+0x1e4>
 801427e:	bf00      	nop
 8014280:	08017784 	.word	0x08017784
 8014284:	080177c4 	.word	0x080177c4
 8014288:	080177a4 	.word	0x080177a4
 801428c:	08017764 	.word	0x08017764
 8014290:	080177ca 	.word	0x080177ca
 8014294:	080177ce 	.word	0x080177ce
 8014298:	00000000 	.word	0x00000000
 801429c:	0801404f 	.word	0x0801404f

080142a0 <_printf_common>:
 80142a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142a4:	4691      	mov	r9, r2
 80142a6:	461f      	mov	r7, r3
 80142a8:	688a      	ldr	r2, [r1, #8]
 80142aa:	690b      	ldr	r3, [r1, #16]
 80142ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142b0:	4293      	cmp	r3, r2
 80142b2:	bfb8      	it	lt
 80142b4:	4613      	movlt	r3, r2
 80142b6:	f8c9 3000 	str.w	r3, [r9]
 80142ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142be:	4606      	mov	r6, r0
 80142c0:	460c      	mov	r4, r1
 80142c2:	b112      	cbz	r2, 80142ca <_printf_common+0x2a>
 80142c4:	3301      	adds	r3, #1
 80142c6:	f8c9 3000 	str.w	r3, [r9]
 80142ca:	6823      	ldr	r3, [r4, #0]
 80142cc:	0699      	lsls	r1, r3, #26
 80142ce:	bf42      	ittt	mi
 80142d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80142d4:	3302      	addmi	r3, #2
 80142d6:	f8c9 3000 	strmi.w	r3, [r9]
 80142da:	6825      	ldr	r5, [r4, #0]
 80142dc:	f015 0506 	ands.w	r5, r5, #6
 80142e0:	d107      	bne.n	80142f2 <_printf_common+0x52>
 80142e2:	f104 0a19 	add.w	sl, r4, #25
 80142e6:	68e3      	ldr	r3, [r4, #12]
 80142e8:	f8d9 2000 	ldr.w	r2, [r9]
 80142ec:	1a9b      	subs	r3, r3, r2
 80142ee:	42ab      	cmp	r3, r5
 80142f0:	dc28      	bgt.n	8014344 <_printf_common+0xa4>
 80142f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80142f6:	6822      	ldr	r2, [r4, #0]
 80142f8:	3300      	adds	r3, #0
 80142fa:	bf18      	it	ne
 80142fc:	2301      	movne	r3, #1
 80142fe:	0692      	lsls	r2, r2, #26
 8014300:	d42d      	bmi.n	801435e <_printf_common+0xbe>
 8014302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014306:	4639      	mov	r1, r7
 8014308:	4630      	mov	r0, r6
 801430a:	47c0      	blx	r8
 801430c:	3001      	adds	r0, #1
 801430e:	d020      	beq.n	8014352 <_printf_common+0xb2>
 8014310:	6823      	ldr	r3, [r4, #0]
 8014312:	68e5      	ldr	r5, [r4, #12]
 8014314:	f8d9 2000 	ldr.w	r2, [r9]
 8014318:	f003 0306 	and.w	r3, r3, #6
 801431c:	2b04      	cmp	r3, #4
 801431e:	bf08      	it	eq
 8014320:	1aad      	subeq	r5, r5, r2
 8014322:	68a3      	ldr	r3, [r4, #8]
 8014324:	6922      	ldr	r2, [r4, #16]
 8014326:	bf0c      	ite	eq
 8014328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801432c:	2500      	movne	r5, #0
 801432e:	4293      	cmp	r3, r2
 8014330:	bfc4      	itt	gt
 8014332:	1a9b      	subgt	r3, r3, r2
 8014334:	18ed      	addgt	r5, r5, r3
 8014336:	f04f 0900 	mov.w	r9, #0
 801433a:	341a      	adds	r4, #26
 801433c:	454d      	cmp	r5, r9
 801433e:	d11a      	bne.n	8014376 <_printf_common+0xd6>
 8014340:	2000      	movs	r0, #0
 8014342:	e008      	b.n	8014356 <_printf_common+0xb6>
 8014344:	2301      	movs	r3, #1
 8014346:	4652      	mov	r2, sl
 8014348:	4639      	mov	r1, r7
 801434a:	4630      	mov	r0, r6
 801434c:	47c0      	blx	r8
 801434e:	3001      	adds	r0, #1
 8014350:	d103      	bne.n	801435a <_printf_common+0xba>
 8014352:	f04f 30ff 	mov.w	r0, #4294967295
 8014356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801435a:	3501      	adds	r5, #1
 801435c:	e7c3      	b.n	80142e6 <_printf_common+0x46>
 801435e:	18e1      	adds	r1, r4, r3
 8014360:	1c5a      	adds	r2, r3, #1
 8014362:	2030      	movs	r0, #48	; 0x30
 8014364:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014368:	4422      	add	r2, r4
 801436a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801436e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014372:	3302      	adds	r3, #2
 8014374:	e7c5      	b.n	8014302 <_printf_common+0x62>
 8014376:	2301      	movs	r3, #1
 8014378:	4622      	mov	r2, r4
 801437a:	4639      	mov	r1, r7
 801437c:	4630      	mov	r0, r6
 801437e:	47c0      	blx	r8
 8014380:	3001      	adds	r0, #1
 8014382:	d0e6      	beq.n	8014352 <_printf_common+0xb2>
 8014384:	f109 0901 	add.w	r9, r9, #1
 8014388:	e7d8      	b.n	801433c <_printf_common+0x9c>
	...

0801438c <_printf_i>:
 801438c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014390:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014394:	460c      	mov	r4, r1
 8014396:	7e09      	ldrb	r1, [r1, #24]
 8014398:	b085      	sub	sp, #20
 801439a:	296e      	cmp	r1, #110	; 0x6e
 801439c:	4617      	mov	r7, r2
 801439e:	4606      	mov	r6, r0
 80143a0:	4698      	mov	r8, r3
 80143a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143a4:	f000 80b3 	beq.w	801450e <_printf_i+0x182>
 80143a8:	d822      	bhi.n	80143f0 <_printf_i+0x64>
 80143aa:	2963      	cmp	r1, #99	; 0x63
 80143ac:	d036      	beq.n	801441c <_printf_i+0x90>
 80143ae:	d80a      	bhi.n	80143c6 <_printf_i+0x3a>
 80143b0:	2900      	cmp	r1, #0
 80143b2:	f000 80b9 	beq.w	8014528 <_printf_i+0x19c>
 80143b6:	2958      	cmp	r1, #88	; 0x58
 80143b8:	f000 8083 	beq.w	80144c2 <_printf_i+0x136>
 80143bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80143c4:	e032      	b.n	801442c <_printf_i+0xa0>
 80143c6:	2964      	cmp	r1, #100	; 0x64
 80143c8:	d001      	beq.n	80143ce <_printf_i+0x42>
 80143ca:	2969      	cmp	r1, #105	; 0x69
 80143cc:	d1f6      	bne.n	80143bc <_printf_i+0x30>
 80143ce:	6820      	ldr	r0, [r4, #0]
 80143d0:	6813      	ldr	r3, [r2, #0]
 80143d2:	0605      	lsls	r5, r0, #24
 80143d4:	f103 0104 	add.w	r1, r3, #4
 80143d8:	d52a      	bpl.n	8014430 <_printf_i+0xa4>
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	6011      	str	r1, [r2, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	da03      	bge.n	80143ea <_printf_i+0x5e>
 80143e2:	222d      	movs	r2, #45	; 0x2d
 80143e4:	425b      	negs	r3, r3
 80143e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80143ea:	486f      	ldr	r0, [pc, #444]	; (80145a8 <_printf_i+0x21c>)
 80143ec:	220a      	movs	r2, #10
 80143ee:	e039      	b.n	8014464 <_printf_i+0xd8>
 80143f0:	2973      	cmp	r1, #115	; 0x73
 80143f2:	f000 809d 	beq.w	8014530 <_printf_i+0x1a4>
 80143f6:	d808      	bhi.n	801440a <_printf_i+0x7e>
 80143f8:	296f      	cmp	r1, #111	; 0x6f
 80143fa:	d020      	beq.n	801443e <_printf_i+0xb2>
 80143fc:	2970      	cmp	r1, #112	; 0x70
 80143fe:	d1dd      	bne.n	80143bc <_printf_i+0x30>
 8014400:	6823      	ldr	r3, [r4, #0]
 8014402:	f043 0320 	orr.w	r3, r3, #32
 8014406:	6023      	str	r3, [r4, #0]
 8014408:	e003      	b.n	8014412 <_printf_i+0x86>
 801440a:	2975      	cmp	r1, #117	; 0x75
 801440c:	d017      	beq.n	801443e <_printf_i+0xb2>
 801440e:	2978      	cmp	r1, #120	; 0x78
 8014410:	d1d4      	bne.n	80143bc <_printf_i+0x30>
 8014412:	2378      	movs	r3, #120	; 0x78
 8014414:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014418:	4864      	ldr	r0, [pc, #400]	; (80145ac <_printf_i+0x220>)
 801441a:	e055      	b.n	80144c8 <_printf_i+0x13c>
 801441c:	6813      	ldr	r3, [r2, #0]
 801441e:	1d19      	adds	r1, r3, #4
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	6011      	str	r1, [r2, #0]
 8014424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801442c:	2301      	movs	r3, #1
 801442e:	e08c      	b.n	801454a <_printf_i+0x1be>
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	6011      	str	r1, [r2, #0]
 8014434:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014438:	bf18      	it	ne
 801443a:	b21b      	sxthne	r3, r3
 801443c:	e7cf      	b.n	80143de <_printf_i+0x52>
 801443e:	6813      	ldr	r3, [r2, #0]
 8014440:	6825      	ldr	r5, [r4, #0]
 8014442:	1d18      	adds	r0, r3, #4
 8014444:	6010      	str	r0, [r2, #0]
 8014446:	0628      	lsls	r0, r5, #24
 8014448:	d501      	bpl.n	801444e <_printf_i+0xc2>
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	e002      	b.n	8014454 <_printf_i+0xc8>
 801444e:	0668      	lsls	r0, r5, #25
 8014450:	d5fb      	bpl.n	801444a <_printf_i+0xbe>
 8014452:	881b      	ldrh	r3, [r3, #0]
 8014454:	4854      	ldr	r0, [pc, #336]	; (80145a8 <_printf_i+0x21c>)
 8014456:	296f      	cmp	r1, #111	; 0x6f
 8014458:	bf14      	ite	ne
 801445a:	220a      	movne	r2, #10
 801445c:	2208      	moveq	r2, #8
 801445e:	2100      	movs	r1, #0
 8014460:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014464:	6865      	ldr	r5, [r4, #4]
 8014466:	60a5      	str	r5, [r4, #8]
 8014468:	2d00      	cmp	r5, #0
 801446a:	f2c0 8095 	blt.w	8014598 <_printf_i+0x20c>
 801446e:	6821      	ldr	r1, [r4, #0]
 8014470:	f021 0104 	bic.w	r1, r1, #4
 8014474:	6021      	str	r1, [r4, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d13d      	bne.n	80144f6 <_printf_i+0x16a>
 801447a:	2d00      	cmp	r5, #0
 801447c:	f040 808e 	bne.w	801459c <_printf_i+0x210>
 8014480:	4665      	mov	r5, ip
 8014482:	2a08      	cmp	r2, #8
 8014484:	d10b      	bne.n	801449e <_printf_i+0x112>
 8014486:	6823      	ldr	r3, [r4, #0]
 8014488:	07db      	lsls	r3, r3, #31
 801448a:	d508      	bpl.n	801449e <_printf_i+0x112>
 801448c:	6923      	ldr	r3, [r4, #16]
 801448e:	6862      	ldr	r2, [r4, #4]
 8014490:	429a      	cmp	r2, r3
 8014492:	bfde      	ittt	le
 8014494:	2330      	movle	r3, #48	; 0x30
 8014496:	f805 3c01 	strble.w	r3, [r5, #-1]
 801449a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801449e:	ebac 0305 	sub.w	r3, ip, r5
 80144a2:	6123      	str	r3, [r4, #16]
 80144a4:	f8cd 8000 	str.w	r8, [sp]
 80144a8:	463b      	mov	r3, r7
 80144aa:	aa03      	add	r2, sp, #12
 80144ac:	4621      	mov	r1, r4
 80144ae:	4630      	mov	r0, r6
 80144b0:	f7ff fef6 	bl	80142a0 <_printf_common>
 80144b4:	3001      	adds	r0, #1
 80144b6:	d14d      	bne.n	8014554 <_printf_i+0x1c8>
 80144b8:	f04f 30ff 	mov.w	r0, #4294967295
 80144bc:	b005      	add	sp, #20
 80144be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c2:	4839      	ldr	r0, [pc, #228]	; (80145a8 <_printf_i+0x21c>)
 80144c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80144c8:	6813      	ldr	r3, [r2, #0]
 80144ca:	6821      	ldr	r1, [r4, #0]
 80144cc:	1d1d      	adds	r5, r3, #4
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	6015      	str	r5, [r2, #0]
 80144d2:	060a      	lsls	r2, r1, #24
 80144d4:	d50b      	bpl.n	80144ee <_printf_i+0x162>
 80144d6:	07ca      	lsls	r2, r1, #31
 80144d8:	bf44      	itt	mi
 80144da:	f041 0120 	orrmi.w	r1, r1, #32
 80144de:	6021      	strmi	r1, [r4, #0]
 80144e0:	b91b      	cbnz	r3, 80144ea <_printf_i+0x15e>
 80144e2:	6822      	ldr	r2, [r4, #0]
 80144e4:	f022 0220 	bic.w	r2, r2, #32
 80144e8:	6022      	str	r2, [r4, #0]
 80144ea:	2210      	movs	r2, #16
 80144ec:	e7b7      	b.n	801445e <_printf_i+0xd2>
 80144ee:	064d      	lsls	r5, r1, #25
 80144f0:	bf48      	it	mi
 80144f2:	b29b      	uxthmi	r3, r3
 80144f4:	e7ef      	b.n	80144d6 <_printf_i+0x14a>
 80144f6:	4665      	mov	r5, ip
 80144f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80144fc:	fb02 3311 	mls	r3, r2, r1, r3
 8014500:	5cc3      	ldrb	r3, [r0, r3]
 8014502:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014506:	460b      	mov	r3, r1
 8014508:	2900      	cmp	r1, #0
 801450a:	d1f5      	bne.n	80144f8 <_printf_i+0x16c>
 801450c:	e7b9      	b.n	8014482 <_printf_i+0xf6>
 801450e:	6813      	ldr	r3, [r2, #0]
 8014510:	6825      	ldr	r5, [r4, #0]
 8014512:	6961      	ldr	r1, [r4, #20]
 8014514:	1d18      	adds	r0, r3, #4
 8014516:	6010      	str	r0, [r2, #0]
 8014518:	0628      	lsls	r0, r5, #24
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	d501      	bpl.n	8014522 <_printf_i+0x196>
 801451e:	6019      	str	r1, [r3, #0]
 8014520:	e002      	b.n	8014528 <_printf_i+0x19c>
 8014522:	066a      	lsls	r2, r5, #25
 8014524:	d5fb      	bpl.n	801451e <_printf_i+0x192>
 8014526:	8019      	strh	r1, [r3, #0]
 8014528:	2300      	movs	r3, #0
 801452a:	6123      	str	r3, [r4, #16]
 801452c:	4665      	mov	r5, ip
 801452e:	e7b9      	b.n	80144a4 <_printf_i+0x118>
 8014530:	6813      	ldr	r3, [r2, #0]
 8014532:	1d19      	adds	r1, r3, #4
 8014534:	6011      	str	r1, [r2, #0]
 8014536:	681d      	ldr	r5, [r3, #0]
 8014538:	6862      	ldr	r2, [r4, #4]
 801453a:	2100      	movs	r1, #0
 801453c:	4628      	mov	r0, r5
 801453e:	f7eb fe67 	bl	8000210 <memchr>
 8014542:	b108      	cbz	r0, 8014548 <_printf_i+0x1bc>
 8014544:	1b40      	subs	r0, r0, r5
 8014546:	6060      	str	r0, [r4, #4]
 8014548:	6863      	ldr	r3, [r4, #4]
 801454a:	6123      	str	r3, [r4, #16]
 801454c:	2300      	movs	r3, #0
 801454e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014552:	e7a7      	b.n	80144a4 <_printf_i+0x118>
 8014554:	6923      	ldr	r3, [r4, #16]
 8014556:	462a      	mov	r2, r5
 8014558:	4639      	mov	r1, r7
 801455a:	4630      	mov	r0, r6
 801455c:	47c0      	blx	r8
 801455e:	3001      	adds	r0, #1
 8014560:	d0aa      	beq.n	80144b8 <_printf_i+0x12c>
 8014562:	6823      	ldr	r3, [r4, #0]
 8014564:	079b      	lsls	r3, r3, #30
 8014566:	d413      	bmi.n	8014590 <_printf_i+0x204>
 8014568:	68e0      	ldr	r0, [r4, #12]
 801456a:	9b03      	ldr	r3, [sp, #12]
 801456c:	4298      	cmp	r0, r3
 801456e:	bfb8      	it	lt
 8014570:	4618      	movlt	r0, r3
 8014572:	e7a3      	b.n	80144bc <_printf_i+0x130>
 8014574:	2301      	movs	r3, #1
 8014576:	464a      	mov	r2, r9
 8014578:	4639      	mov	r1, r7
 801457a:	4630      	mov	r0, r6
 801457c:	47c0      	blx	r8
 801457e:	3001      	adds	r0, #1
 8014580:	d09a      	beq.n	80144b8 <_printf_i+0x12c>
 8014582:	3501      	adds	r5, #1
 8014584:	68e3      	ldr	r3, [r4, #12]
 8014586:	9a03      	ldr	r2, [sp, #12]
 8014588:	1a9b      	subs	r3, r3, r2
 801458a:	42ab      	cmp	r3, r5
 801458c:	dcf2      	bgt.n	8014574 <_printf_i+0x1e8>
 801458e:	e7eb      	b.n	8014568 <_printf_i+0x1dc>
 8014590:	2500      	movs	r5, #0
 8014592:	f104 0919 	add.w	r9, r4, #25
 8014596:	e7f5      	b.n	8014584 <_printf_i+0x1f8>
 8014598:	2b00      	cmp	r3, #0
 801459a:	d1ac      	bne.n	80144f6 <_printf_i+0x16a>
 801459c:	7803      	ldrb	r3, [r0, #0]
 801459e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145a6:	e76c      	b.n	8014482 <_printf_i+0xf6>
 80145a8:	080177d5 	.word	0x080177d5
 80145ac:	080177e6 	.word	0x080177e6

080145b0 <_sbrk_r>:
 80145b0:	b538      	push	{r3, r4, r5, lr}
 80145b2:	4c06      	ldr	r4, [pc, #24]	; (80145cc <_sbrk_r+0x1c>)
 80145b4:	2300      	movs	r3, #0
 80145b6:	4605      	mov	r5, r0
 80145b8:	4608      	mov	r0, r1
 80145ba:	6023      	str	r3, [r4, #0]
 80145bc:	f7ec fb8a 	bl	8000cd4 <_sbrk>
 80145c0:	1c43      	adds	r3, r0, #1
 80145c2:	d102      	bne.n	80145ca <_sbrk_r+0x1a>
 80145c4:	6823      	ldr	r3, [r4, #0]
 80145c6:	b103      	cbz	r3, 80145ca <_sbrk_r+0x1a>
 80145c8:	602b      	str	r3, [r5, #0]
 80145ca:	bd38      	pop	{r3, r4, r5, pc}
 80145cc:	20015ef0 	.word	0x20015ef0

080145d0 <__sread>:
 80145d0:	b510      	push	{r4, lr}
 80145d2:	460c      	mov	r4, r1
 80145d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145d8:	f000 fa48 	bl	8014a6c <_read_r>
 80145dc:	2800      	cmp	r0, #0
 80145de:	bfab      	itete	ge
 80145e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80145e2:	89a3      	ldrhlt	r3, [r4, #12]
 80145e4:	181b      	addge	r3, r3, r0
 80145e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80145ea:	bfac      	ite	ge
 80145ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80145ee:	81a3      	strhlt	r3, [r4, #12]
 80145f0:	bd10      	pop	{r4, pc}

080145f2 <__swrite>:
 80145f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f6:	461f      	mov	r7, r3
 80145f8:	898b      	ldrh	r3, [r1, #12]
 80145fa:	05db      	lsls	r3, r3, #23
 80145fc:	4605      	mov	r5, r0
 80145fe:	460c      	mov	r4, r1
 8014600:	4616      	mov	r6, r2
 8014602:	d505      	bpl.n	8014610 <__swrite+0x1e>
 8014604:	2302      	movs	r3, #2
 8014606:	2200      	movs	r2, #0
 8014608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801460c:	f000 f9b6 	bl	801497c <_lseek_r>
 8014610:	89a3      	ldrh	r3, [r4, #12]
 8014612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801461a:	81a3      	strh	r3, [r4, #12]
 801461c:	4632      	mov	r2, r6
 801461e:	463b      	mov	r3, r7
 8014620:	4628      	mov	r0, r5
 8014622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014626:	f000 b869 	b.w	80146fc <_write_r>

0801462a <__sseek>:
 801462a:	b510      	push	{r4, lr}
 801462c:	460c      	mov	r4, r1
 801462e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014632:	f000 f9a3 	bl	801497c <_lseek_r>
 8014636:	1c43      	adds	r3, r0, #1
 8014638:	89a3      	ldrh	r3, [r4, #12]
 801463a:	bf15      	itete	ne
 801463c:	6560      	strne	r0, [r4, #84]	; 0x54
 801463e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014646:	81a3      	strheq	r3, [r4, #12]
 8014648:	bf18      	it	ne
 801464a:	81a3      	strhne	r3, [r4, #12]
 801464c:	bd10      	pop	{r4, pc}

0801464e <__sclose>:
 801464e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014652:	f000 b8d3 	b.w	80147fc <_close_r>
	...

08014658 <__swbuf_r>:
 8014658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801465a:	460e      	mov	r6, r1
 801465c:	4614      	mov	r4, r2
 801465e:	4605      	mov	r5, r0
 8014660:	b118      	cbz	r0, 801466a <__swbuf_r+0x12>
 8014662:	6983      	ldr	r3, [r0, #24]
 8014664:	b90b      	cbnz	r3, 801466a <__swbuf_r+0x12>
 8014666:	f7ff fba1 	bl	8013dac <__sinit>
 801466a:	4b21      	ldr	r3, [pc, #132]	; (80146f0 <__swbuf_r+0x98>)
 801466c:	429c      	cmp	r4, r3
 801466e:	d12a      	bne.n	80146c6 <__swbuf_r+0x6e>
 8014670:	686c      	ldr	r4, [r5, #4]
 8014672:	69a3      	ldr	r3, [r4, #24]
 8014674:	60a3      	str	r3, [r4, #8]
 8014676:	89a3      	ldrh	r3, [r4, #12]
 8014678:	071a      	lsls	r2, r3, #28
 801467a:	d52e      	bpl.n	80146da <__swbuf_r+0x82>
 801467c:	6923      	ldr	r3, [r4, #16]
 801467e:	b363      	cbz	r3, 80146da <__swbuf_r+0x82>
 8014680:	6923      	ldr	r3, [r4, #16]
 8014682:	6820      	ldr	r0, [r4, #0]
 8014684:	1ac0      	subs	r0, r0, r3
 8014686:	6963      	ldr	r3, [r4, #20]
 8014688:	b2f6      	uxtb	r6, r6
 801468a:	4283      	cmp	r3, r0
 801468c:	4637      	mov	r7, r6
 801468e:	dc04      	bgt.n	801469a <__swbuf_r+0x42>
 8014690:	4621      	mov	r1, r4
 8014692:	4628      	mov	r0, r5
 8014694:	f000 f948 	bl	8014928 <_fflush_r>
 8014698:	bb28      	cbnz	r0, 80146e6 <__swbuf_r+0x8e>
 801469a:	68a3      	ldr	r3, [r4, #8]
 801469c:	3b01      	subs	r3, #1
 801469e:	60a3      	str	r3, [r4, #8]
 80146a0:	6823      	ldr	r3, [r4, #0]
 80146a2:	1c5a      	adds	r2, r3, #1
 80146a4:	6022      	str	r2, [r4, #0]
 80146a6:	701e      	strb	r6, [r3, #0]
 80146a8:	6963      	ldr	r3, [r4, #20]
 80146aa:	3001      	adds	r0, #1
 80146ac:	4283      	cmp	r3, r0
 80146ae:	d004      	beq.n	80146ba <__swbuf_r+0x62>
 80146b0:	89a3      	ldrh	r3, [r4, #12]
 80146b2:	07db      	lsls	r3, r3, #31
 80146b4:	d519      	bpl.n	80146ea <__swbuf_r+0x92>
 80146b6:	2e0a      	cmp	r6, #10
 80146b8:	d117      	bne.n	80146ea <__swbuf_r+0x92>
 80146ba:	4621      	mov	r1, r4
 80146bc:	4628      	mov	r0, r5
 80146be:	f000 f933 	bl	8014928 <_fflush_r>
 80146c2:	b190      	cbz	r0, 80146ea <__swbuf_r+0x92>
 80146c4:	e00f      	b.n	80146e6 <__swbuf_r+0x8e>
 80146c6:	4b0b      	ldr	r3, [pc, #44]	; (80146f4 <__swbuf_r+0x9c>)
 80146c8:	429c      	cmp	r4, r3
 80146ca:	d101      	bne.n	80146d0 <__swbuf_r+0x78>
 80146cc:	68ac      	ldr	r4, [r5, #8]
 80146ce:	e7d0      	b.n	8014672 <__swbuf_r+0x1a>
 80146d0:	4b09      	ldr	r3, [pc, #36]	; (80146f8 <__swbuf_r+0xa0>)
 80146d2:	429c      	cmp	r4, r3
 80146d4:	bf08      	it	eq
 80146d6:	68ec      	ldreq	r4, [r5, #12]
 80146d8:	e7cb      	b.n	8014672 <__swbuf_r+0x1a>
 80146da:	4621      	mov	r1, r4
 80146dc:	4628      	mov	r0, r5
 80146de:	f000 f81f 	bl	8014720 <__swsetup_r>
 80146e2:	2800      	cmp	r0, #0
 80146e4:	d0cc      	beq.n	8014680 <__swbuf_r+0x28>
 80146e6:	f04f 37ff 	mov.w	r7, #4294967295
 80146ea:	4638      	mov	r0, r7
 80146ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146ee:	bf00      	nop
 80146f0:	08017784 	.word	0x08017784
 80146f4:	080177a4 	.word	0x080177a4
 80146f8:	08017764 	.word	0x08017764

080146fc <_write_r>:
 80146fc:	b538      	push	{r3, r4, r5, lr}
 80146fe:	4c07      	ldr	r4, [pc, #28]	; (801471c <_write_r+0x20>)
 8014700:	4605      	mov	r5, r0
 8014702:	4608      	mov	r0, r1
 8014704:	4611      	mov	r1, r2
 8014706:	2200      	movs	r2, #0
 8014708:	6022      	str	r2, [r4, #0]
 801470a:	461a      	mov	r2, r3
 801470c:	f7ec fa91 	bl	8000c32 <_write>
 8014710:	1c43      	adds	r3, r0, #1
 8014712:	d102      	bne.n	801471a <_write_r+0x1e>
 8014714:	6823      	ldr	r3, [r4, #0]
 8014716:	b103      	cbz	r3, 801471a <_write_r+0x1e>
 8014718:	602b      	str	r3, [r5, #0]
 801471a:	bd38      	pop	{r3, r4, r5, pc}
 801471c:	20015ef0 	.word	0x20015ef0

08014720 <__swsetup_r>:
 8014720:	4b32      	ldr	r3, [pc, #200]	; (80147ec <__swsetup_r+0xcc>)
 8014722:	b570      	push	{r4, r5, r6, lr}
 8014724:	681d      	ldr	r5, [r3, #0]
 8014726:	4606      	mov	r6, r0
 8014728:	460c      	mov	r4, r1
 801472a:	b125      	cbz	r5, 8014736 <__swsetup_r+0x16>
 801472c:	69ab      	ldr	r3, [r5, #24]
 801472e:	b913      	cbnz	r3, 8014736 <__swsetup_r+0x16>
 8014730:	4628      	mov	r0, r5
 8014732:	f7ff fb3b 	bl	8013dac <__sinit>
 8014736:	4b2e      	ldr	r3, [pc, #184]	; (80147f0 <__swsetup_r+0xd0>)
 8014738:	429c      	cmp	r4, r3
 801473a:	d10f      	bne.n	801475c <__swsetup_r+0x3c>
 801473c:	686c      	ldr	r4, [r5, #4]
 801473e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014742:	b29a      	uxth	r2, r3
 8014744:	0715      	lsls	r5, r2, #28
 8014746:	d42c      	bmi.n	80147a2 <__swsetup_r+0x82>
 8014748:	06d0      	lsls	r0, r2, #27
 801474a:	d411      	bmi.n	8014770 <__swsetup_r+0x50>
 801474c:	2209      	movs	r2, #9
 801474e:	6032      	str	r2, [r6, #0]
 8014750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014754:	81a3      	strh	r3, [r4, #12]
 8014756:	f04f 30ff 	mov.w	r0, #4294967295
 801475a:	e03e      	b.n	80147da <__swsetup_r+0xba>
 801475c:	4b25      	ldr	r3, [pc, #148]	; (80147f4 <__swsetup_r+0xd4>)
 801475e:	429c      	cmp	r4, r3
 8014760:	d101      	bne.n	8014766 <__swsetup_r+0x46>
 8014762:	68ac      	ldr	r4, [r5, #8]
 8014764:	e7eb      	b.n	801473e <__swsetup_r+0x1e>
 8014766:	4b24      	ldr	r3, [pc, #144]	; (80147f8 <__swsetup_r+0xd8>)
 8014768:	429c      	cmp	r4, r3
 801476a:	bf08      	it	eq
 801476c:	68ec      	ldreq	r4, [r5, #12]
 801476e:	e7e6      	b.n	801473e <__swsetup_r+0x1e>
 8014770:	0751      	lsls	r1, r2, #29
 8014772:	d512      	bpl.n	801479a <__swsetup_r+0x7a>
 8014774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014776:	b141      	cbz	r1, 801478a <__swsetup_r+0x6a>
 8014778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801477c:	4299      	cmp	r1, r3
 801477e:	d002      	beq.n	8014786 <__swsetup_r+0x66>
 8014780:	4630      	mov	r0, r6
 8014782:	f7ff fba5 	bl	8013ed0 <_free_r>
 8014786:	2300      	movs	r3, #0
 8014788:	6363      	str	r3, [r4, #52]	; 0x34
 801478a:	89a3      	ldrh	r3, [r4, #12]
 801478c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014790:	81a3      	strh	r3, [r4, #12]
 8014792:	2300      	movs	r3, #0
 8014794:	6063      	str	r3, [r4, #4]
 8014796:	6923      	ldr	r3, [r4, #16]
 8014798:	6023      	str	r3, [r4, #0]
 801479a:	89a3      	ldrh	r3, [r4, #12]
 801479c:	f043 0308 	orr.w	r3, r3, #8
 80147a0:	81a3      	strh	r3, [r4, #12]
 80147a2:	6923      	ldr	r3, [r4, #16]
 80147a4:	b94b      	cbnz	r3, 80147ba <__swsetup_r+0x9a>
 80147a6:	89a3      	ldrh	r3, [r4, #12]
 80147a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80147ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147b0:	d003      	beq.n	80147ba <__swsetup_r+0x9a>
 80147b2:	4621      	mov	r1, r4
 80147b4:	4630      	mov	r0, r6
 80147b6:	f000 f917 	bl	80149e8 <__smakebuf_r>
 80147ba:	89a2      	ldrh	r2, [r4, #12]
 80147bc:	f012 0301 	ands.w	r3, r2, #1
 80147c0:	d00c      	beq.n	80147dc <__swsetup_r+0xbc>
 80147c2:	2300      	movs	r3, #0
 80147c4:	60a3      	str	r3, [r4, #8]
 80147c6:	6963      	ldr	r3, [r4, #20]
 80147c8:	425b      	negs	r3, r3
 80147ca:	61a3      	str	r3, [r4, #24]
 80147cc:	6923      	ldr	r3, [r4, #16]
 80147ce:	b953      	cbnz	r3, 80147e6 <__swsetup_r+0xc6>
 80147d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80147d8:	d1ba      	bne.n	8014750 <__swsetup_r+0x30>
 80147da:	bd70      	pop	{r4, r5, r6, pc}
 80147dc:	0792      	lsls	r2, r2, #30
 80147de:	bf58      	it	pl
 80147e0:	6963      	ldrpl	r3, [r4, #20]
 80147e2:	60a3      	str	r3, [r4, #8]
 80147e4:	e7f2      	b.n	80147cc <__swsetup_r+0xac>
 80147e6:	2000      	movs	r0, #0
 80147e8:	e7f7      	b.n	80147da <__swsetup_r+0xba>
 80147ea:	bf00      	nop
 80147ec:	2000001c 	.word	0x2000001c
 80147f0:	08017784 	.word	0x08017784
 80147f4:	080177a4 	.word	0x080177a4
 80147f8:	08017764 	.word	0x08017764

080147fc <_close_r>:
 80147fc:	b538      	push	{r3, r4, r5, lr}
 80147fe:	4c06      	ldr	r4, [pc, #24]	; (8014818 <_close_r+0x1c>)
 8014800:	2300      	movs	r3, #0
 8014802:	4605      	mov	r5, r0
 8014804:	4608      	mov	r0, r1
 8014806:	6023      	str	r3, [r4, #0]
 8014808:	f7ec fa2f 	bl	8000c6a <_close>
 801480c:	1c43      	adds	r3, r0, #1
 801480e:	d102      	bne.n	8014816 <_close_r+0x1a>
 8014810:	6823      	ldr	r3, [r4, #0]
 8014812:	b103      	cbz	r3, 8014816 <_close_r+0x1a>
 8014814:	602b      	str	r3, [r5, #0]
 8014816:	bd38      	pop	{r3, r4, r5, pc}
 8014818:	20015ef0 	.word	0x20015ef0

0801481c <__sflush_r>:
 801481c:	898a      	ldrh	r2, [r1, #12]
 801481e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014822:	4605      	mov	r5, r0
 8014824:	0710      	lsls	r0, r2, #28
 8014826:	460c      	mov	r4, r1
 8014828:	d458      	bmi.n	80148dc <__sflush_r+0xc0>
 801482a:	684b      	ldr	r3, [r1, #4]
 801482c:	2b00      	cmp	r3, #0
 801482e:	dc05      	bgt.n	801483c <__sflush_r+0x20>
 8014830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014832:	2b00      	cmp	r3, #0
 8014834:	dc02      	bgt.n	801483c <__sflush_r+0x20>
 8014836:	2000      	movs	r0, #0
 8014838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801483c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801483e:	2e00      	cmp	r6, #0
 8014840:	d0f9      	beq.n	8014836 <__sflush_r+0x1a>
 8014842:	2300      	movs	r3, #0
 8014844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014848:	682f      	ldr	r7, [r5, #0]
 801484a:	6a21      	ldr	r1, [r4, #32]
 801484c:	602b      	str	r3, [r5, #0]
 801484e:	d032      	beq.n	80148b6 <__sflush_r+0x9a>
 8014850:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014852:	89a3      	ldrh	r3, [r4, #12]
 8014854:	075a      	lsls	r2, r3, #29
 8014856:	d505      	bpl.n	8014864 <__sflush_r+0x48>
 8014858:	6863      	ldr	r3, [r4, #4]
 801485a:	1ac0      	subs	r0, r0, r3
 801485c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801485e:	b10b      	cbz	r3, 8014864 <__sflush_r+0x48>
 8014860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014862:	1ac0      	subs	r0, r0, r3
 8014864:	2300      	movs	r3, #0
 8014866:	4602      	mov	r2, r0
 8014868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801486a:	6a21      	ldr	r1, [r4, #32]
 801486c:	4628      	mov	r0, r5
 801486e:	47b0      	blx	r6
 8014870:	1c43      	adds	r3, r0, #1
 8014872:	89a3      	ldrh	r3, [r4, #12]
 8014874:	d106      	bne.n	8014884 <__sflush_r+0x68>
 8014876:	6829      	ldr	r1, [r5, #0]
 8014878:	291d      	cmp	r1, #29
 801487a:	d848      	bhi.n	801490e <__sflush_r+0xf2>
 801487c:	4a29      	ldr	r2, [pc, #164]	; (8014924 <__sflush_r+0x108>)
 801487e:	40ca      	lsrs	r2, r1
 8014880:	07d6      	lsls	r6, r2, #31
 8014882:	d544      	bpl.n	801490e <__sflush_r+0xf2>
 8014884:	2200      	movs	r2, #0
 8014886:	6062      	str	r2, [r4, #4]
 8014888:	04d9      	lsls	r1, r3, #19
 801488a:	6922      	ldr	r2, [r4, #16]
 801488c:	6022      	str	r2, [r4, #0]
 801488e:	d504      	bpl.n	801489a <__sflush_r+0x7e>
 8014890:	1c42      	adds	r2, r0, #1
 8014892:	d101      	bne.n	8014898 <__sflush_r+0x7c>
 8014894:	682b      	ldr	r3, [r5, #0]
 8014896:	b903      	cbnz	r3, 801489a <__sflush_r+0x7e>
 8014898:	6560      	str	r0, [r4, #84]	; 0x54
 801489a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801489c:	602f      	str	r7, [r5, #0]
 801489e:	2900      	cmp	r1, #0
 80148a0:	d0c9      	beq.n	8014836 <__sflush_r+0x1a>
 80148a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148a6:	4299      	cmp	r1, r3
 80148a8:	d002      	beq.n	80148b0 <__sflush_r+0x94>
 80148aa:	4628      	mov	r0, r5
 80148ac:	f7ff fb10 	bl	8013ed0 <_free_r>
 80148b0:	2000      	movs	r0, #0
 80148b2:	6360      	str	r0, [r4, #52]	; 0x34
 80148b4:	e7c0      	b.n	8014838 <__sflush_r+0x1c>
 80148b6:	2301      	movs	r3, #1
 80148b8:	4628      	mov	r0, r5
 80148ba:	47b0      	blx	r6
 80148bc:	1c41      	adds	r1, r0, #1
 80148be:	d1c8      	bne.n	8014852 <__sflush_r+0x36>
 80148c0:	682b      	ldr	r3, [r5, #0]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d0c5      	beq.n	8014852 <__sflush_r+0x36>
 80148c6:	2b1d      	cmp	r3, #29
 80148c8:	d001      	beq.n	80148ce <__sflush_r+0xb2>
 80148ca:	2b16      	cmp	r3, #22
 80148cc:	d101      	bne.n	80148d2 <__sflush_r+0xb6>
 80148ce:	602f      	str	r7, [r5, #0]
 80148d0:	e7b1      	b.n	8014836 <__sflush_r+0x1a>
 80148d2:	89a3      	ldrh	r3, [r4, #12]
 80148d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148d8:	81a3      	strh	r3, [r4, #12]
 80148da:	e7ad      	b.n	8014838 <__sflush_r+0x1c>
 80148dc:	690f      	ldr	r7, [r1, #16]
 80148de:	2f00      	cmp	r7, #0
 80148e0:	d0a9      	beq.n	8014836 <__sflush_r+0x1a>
 80148e2:	0793      	lsls	r3, r2, #30
 80148e4:	680e      	ldr	r6, [r1, #0]
 80148e6:	bf08      	it	eq
 80148e8:	694b      	ldreq	r3, [r1, #20]
 80148ea:	600f      	str	r7, [r1, #0]
 80148ec:	bf18      	it	ne
 80148ee:	2300      	movne	r3, #0
 80148f0:	eba6 0807 	sub.w	r8, r6, r7
 80148f4:	608b      	str	r3, [r1, #8]
 80148f6:	f1b8 0f00 	cmp.w	r8, #0
 80148fa:	dd9c      	ble.n	8014836 <__sflush_r+0x1a>
 80148fc:	4643      	mov	r3, r8
 80148fe:	463a      	mov	r2, r7
 8014900:	6a21      	ldr	r1, [r4, #32]
 8014902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014904:	4628      	mov	r0, r5
 8014906:	47b0      	blx	r6
 8014908:	2800      	cmp	r0, #0
 801490a:	dc06      	bgt.n	801491a <__sflush_r+0xfe>
 801490c:	89a3      	ldrh	r3, [r4, #12]
 801490e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014912:	81a3      	strh	r3, [r4, #12]
 8014914:	f04f 30ff 	mov.w	r0, #4294967295
 8014918:	e78e      	b.n	8014838 <__sflush_r+0x1c>
 801491a:	4407      	add	r7, r0
 801491c:	eba8 0800 	sub.w	r8, r8, r0
 8014920:	e7e9      	b.n	80148f6 <__sflush_r+0xda>
 8014922:	bf00      	nop
 8014924:	20400001 	.word	0x20400001

08014928 <_fflush_r>:
 8014928:	b538      	push	{r3, r4, r5, lr}
 801492a:	690b      	ldr	r3, [r1, #16]
 801492c:	4605      	mov	r5, r0
 801492e:	460c      	mov	r4, r1
 8014930:	b1db      	cbz	r3, 801496a <_fflush_r+0x42>
 8014932:	b118      	cbz	r0, 801493c <_fflush_r+0x14>
 8014934:	6983      	ldr	r3, [r0, #24]
 8014936:	b90b      	cbnz	r3, 801493c <_fflush_r+0x14>
 8014938:	f7ff fa38 	bl	8013dac <__sinit>
 801493c:	4b0c      	ldr	r3, [pc, #48]	; (8014970 <_fflush_r+0x48>)
 801493e:	429c      	cmp	r4, r3
 8014940:	d109      	bne.n	8014956 <_fflush_r+0x2e>
 8014942:	686c      	ldr	r4, [r5, #4]
 8014944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014948:	b17b      	cbz	r3, 801496a <_fflush_r+0x42>
 801494a:	4621      	mov	r1, r4
 801494c:	4628      	mov	r0, r5
 801494e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014952:	f7ff bf63 	b.w	801481c <__sflush_r>
 8014956:	4b07      	ldr	r3, [pc, #28]	; (8014974 <_fflush_r+0x4c>)
 8014958:	429c      	cmp	r4, r3
 801495a:	d101      	bne.n	8014960 <_fflush_r+0x38>
 801495c:	68ac      	ldr	r4, [r5, #8]
 801495e:	e7f1      	b.n	8014944 <_fflush_r+0x1c>
 8014960:	4b05      	ldr	r3, [pc, #20]	; (8014978 <_fflush_r+0x50>)
 8014962:	429c      	cmp	r4, r3
 8014964:	bf08      	it	eq
 8014966:	68ec      	ldreq	r4, [r5, #12]
 8014968:	e7ec      	b.n	8014944 <_fflush_r+0x1c>
 801496a:	2000      	movs	r0, #0
 801496c:	bd38      	pop	{r3, r4, r5, pc}
 801496e:	bf00      	nop
 8014970:	08017784 	.word	0x08017784
 8014974:	080177a4 	.word	0x080177a4
 8014978:	08017764 	.word	0x08017764

0801497c <_lseek_r>:
 801497c:	b538      	push	{r3, r4, r5, lr}
 801497e:	4c07      	ldr	r4, [pc, #28]	; (801499c <_lseek_r+0x20>)
 8014980:	4605      	mov	r5, r0
 8014982:	4608      	mov	r0, r1
 8014984:	4611      	mov	r1, r2
 8014986:	2200      	movs	r2, #0
 8014988:	6022      	str	r2, [r4, #0]
 801498a:	461a      	mov	r2, r3
 801498c:	f7ec f994 	bl	8000cb8 <_lseek>
 8014990:	1c43      	adds	r3, r0, #1
 8014992:	d102      	bne.n	801499a <_lseek_r+0x1e>
 8014994:	6823      	ldr	r3, [r4, #0]
 8014996:	b103      	cbz	r3, 801499a <_lseek_r+0x1e>
 8014998:	602b      	str	r3, [r5, #0]
 801499a:	bd38      	pop	{r3, r4, r5, pc}
 801499c:	20015ef0 	.word	0x20015ef0

080149a0 <__swhatbuf_r>:
 80149a0:	b570      	push	{r4, r5, r6, lr}
 80149a2:	460e      	mov	r6, r1
 80149a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149a8:	2900      	cmp	r1, #0
 80149aa:	b096      	sub	sp, #88	; 0x58
 80149ac:	4614      	mov	r4, r2
 80149ae:	461d      	mov	r5, r3
 80149b0:	da07      	bge.n	80149c2 <__swhatbuf_r+0x22>
 80149b2:	2300      	movs	r3, #0
 80149b4:	602b      	str	r3, [r5, #0]
 80149b6:	89b3      	ldrh	r3, [r6, #12]
 80149b8:	061a      	lsls	r2, r3, #24
 80149ba:	d410      	bmi.n	80149de <__swhatbuf_r+0x3e>
 80149bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149c0:	e00e      	b.n	80149e0 <__swhatbuf_r+0x40>
 80149c2:	466a      	mov	r2, sp
 80149c4:	f000 f864 	bl	8014a90 <_fstat_r>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	dbf2      	blt.n	80149b2 <__swhatbuf_r+0x12>
 80149cc:	9a01      	ldr	r2, [sp, #4]
 80149ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80149d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80149d6:	425a      	negs	r2, r3
 80149d8:	415a      	adcs	r2, r3
 80149da:	602a      	str	r2, [r5, #0]
 80149dc:	e7ee      	b.n	80149bc <__swhatbuf_r+0x1c>
 80149de:	2340      	movs	r3, #64	; 0x40
 80149e0:	2000      	movs	r0, #0
 80149e2:	6023      	str	r3, [r4, #0]
 80149e4:	b016      	add	sp, #88	; 0x58
 80149e6:	bd70      	pop	{r4, r5, r6, pc}

080149e8 <__smakebuf_r>:
 80149e8:	898b      	ldrh	r3, [r1, #12]
 80149ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80149ec:	079d      	lsls	r5, r3, #30
 80149ee:	4606      	mov	r6, r0
 80149f0:	460c      	mov	r4, r1
 80149f2:	d507      	bpl.n	8014a04 <__smakebuf_r+0x1c>
 80149f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149f8:	6023      	str	r3, [r4, #0]
 80149fa:	6123      	str	r3, [r4, #16]
 80149fc:	2301      	movs	r3, #1
 80149fe:	6163      	str	r3, [r4, #20]
 8014a00:	b002      	add	sp, #8
 8014a02:	bd70      	pop	{r4, r5, r6, pc}
 8014a04:	ab01      	add	r3, sp, #4
 8014a06:	466a      	mov	r2, sp
 8014a08:	f7ff ffca 	bl	80149a0 <__swhatbuf_r>
 8014a0c:	9900      	ldr	r1, [sp, #0]
 8014a0e:	4605      	mov	r5, r0
 8014a10:	4630      	mov	r0, r6
 8014a12:	f7ff faab 	bl	8013f6c <_malloc_r>
 8014a16:	b948      	cbnz	r0, 8014a2c <__smakebuf_r+0x44>
 8014a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a1c:	059a      	lsls	r2, r3, #22
 8014a1e:	d4ef      	bmi.n	8014a00 <__smakebuf_r+0x18>
 8014a20:	f023 0303 	bic.w	r3, r3, #3
 8014a24:	f043 0302 	orr.w	r3, r3, #2
 8014a28:	81a3      	strh	r3, [r4, #12]
 8014a2a:	e7e3      	b.n	80149f4 <__smakebuf_r+0xc>
 8014a2c:	4b0d      	ldr	r3, [pc, #52]	; (8014a64 <__smakebuf_r+0x7c>)
 8014a2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a30:	89a3      	ldrh	r3, [r4, #12]
 8014a32:	6020      	str	r0, [r4, #0]
 8014a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a38:	81a3      	strh	r3, [r4, #12]
 8014a3a:	9b00      	ldr	r3, [sp, #0]
 8014a3c:	6163      	str	r3, [r4, #20]
 8014a3e:	9b01      	ldr	r3, [sp, #4]
 8014a40:	6120      	str	r0, [r4, #16]
 8014a42:	b15b      	cbz	r3, 8014a5c <__smakebuf_r+0x74>
 8014a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a48:	4630      	mov	r0, r6
 8014a4a:	f000 f833 	bl	8014ab4 <_isatty_r>
 8014a4e:	b128      	cbz	r0, 8014a5c <__smakebuf_r+0x74>
 8014a50:	89a3      	ldrh	r3, [r4, #12]
 8014a52:	f023 0303 	bic.w	r3, r3, #3
 8014a56:	f043 0301 	orr.w	r3, r3, #1
 8014a5a:	81a3      	strh	r3, [r4, #12]
 8014a5c:	89a3      	ldrh	r3, [r4, #12]
 8014a5e:	431d      	orrs	r5, r3
 8014a60:	81a5      	strh	r5, [r4, #12]
 8014a62:	e7cd      	b.n	8014a00 <__smakebuf_r+0x18>
 8014a64:	08013d75 	.word	0x08013d75

08014a68 <__malloc_lock>:
 8014a68:	4770      	bx	lr

08014a6a <__malloc_unlock>:
 8014a6a:	4770      	bx	lr

08014a6c <_read_r>:
 8014a6c:	b538      	push	{r3, r4, r5, lr}
 8014a6e:	4c07      	ldr	r4, [pc, #28]	; (8014a8c <_read_r+0x20>)
 8014a70:	4605      	mov	r5, r0
 8014a72:	4608      	mov	r0, r1
 8014a74:	4611      	mov	r1, r2
 8014a76:	2200      	movs	r2, #0
 8014a78:	6022      	str	r2, [r4, #0]
 8014a7a:	461a      	mov	r2, r3
 8014a7c:	f7ec f8bc 	bl	8000bf8 <_read>
 8014a80:	1c43      	adds	r3, r0, #1
 8014a82:	d102      	bne.n	8014a8a <_read_r+0x1e>
 8014a84:	6823      	ldr	r3, [r4, #0]
 8014a86:	b103      	cbz	r3, 8014a8a <_read_r+0x1e>
 8014a88:	602b      	str	r3, [r5, #0]
 8014a8a:	bd38      	pop	{r3, r4, r5, pc}
 8014a8c:	20015ef0 	.word	0x20015ef0

08014a90 <_fstat_r>:
 8014a90:	b538      	push	{r3, r4, r5, lr}
 8014a92:	4c07      	ldr	r4, [pc, #28]	; (8014ab0 <_fstat_r+0x20>)
 8014a94:	2300      	movs	r3, #0
 8014a96:	4605      	mov	r5, r0
 8014a98:	4608      	mov	r0, r1
 8014a9a:	4611      	mov	r1, r2
 8014a9c:	6023      	str	r3, [r4, #0]
 8014a9e:	f7ec f8f0 	bl	8000c82 <_fstat>
 8014aa2:	1c43      	adds	r3, r0, #1
 8014aa4:	d102      	bne.n	8014aac <_fstat_r+0x1c>
 8014aa6:	6823      	ldr	r3, [r4, #0]
 8014aa8:	b103      	cbz	r3, 8014aac <_fstat_r+0x1c>
 8014aaa:	602b      	str	r3, [r5, #0]
 8014aac:	bd38      	pop	{r3, r4, r5, pc}
 8014aae:	bf00      	nop
 8014ab0:	20015ef0 	.word	0x20015ef0

08014ab4 <_isatty_r>:
 8014ab4:	b538      	push	{r3, r4, r5, lr}
 8014ab6:	4c06      	ldr	r4, [pc, #24]	; (8014ad0 <_isatty_r+0x1c>)
 8014ab8:	2300      	movs	r3, #0
 8014aba:	4605      	mov	r5, r0
 8014abc:	4608      	mov	r0, r1
 8014abe:	6023      	str	r3, [r4, #0]
 8014ac0:	f7ec f8ef 	bl	8000ca2 <_isatty>
 8014ac4:	1c43      	adds	r3, r0, #1
 8014ac6:	d102      	bne.n	8014ace <_isatty_r+0x1a>
 8014ac8:	6823      	ldr	r3, [r4, #0]
 8014aca:	b103      	cbz	r3, 8014ace <_isatty_r+0x1a>
 8014acc:	602b      	str	r3, [r5, #0]
 8014ace:	bd38      	pop	{r3, r4, r5, pc}
 8014ad0:	20015ef0 	.word	0x20015ef0

08014ad4 <_init>:
 8014ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ad6:	bf00      	nop
 8014ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ada:	bc08      	pop	{r3}
 8014adc:	469e      	mov	lr, r3
 8014ade:	4770      	bx	lr

08014ae0 <_fini>:
 8014ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ae2:	bf00      	nop
 8014ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ae6:	bc08      	pop	{r3}
 8014ae8:	469e      	mov	lr, r3
 8014aea:	4770      	bx	lr
